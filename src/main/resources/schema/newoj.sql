/*2017-5-16：添加了站外竞赛信息表、讨论表、讨论回复表、
  作业表，用户-竞赛关联表、用户-作业关联表*/
/*2017-5-17：users表添加了level（用户等级s）*/
/*2017-5-26:添加了notice（公告）表和news（新闻）表*/
/*2017-5-31:添加了Course表与course-user关联表*/
CREATE  DATABASE onlinejudge;

use onlinejudge;
--
-- Table structure for table `compileinfo`
--

<<<<<<< HEAD
<<<<<<< HEAD
DROP table  IF EXISTS `token`;
create table `token`(
  `rec_id` int(11) not null,
  `user_id` varchar(48) not null,
  `token` varchar(255) not null,
  `create_time` varchar(255) not null,
  `expire_time` varchar(255) not null
)ENGINE =InnoDB DEFAULT CHARSET =utf8;

INSERT INTO token (rec_id, user_id, token, create_time, expire_time) VALUES (1,'14101118','3d08ff652d24d5799720a6482756ad27','1496194598375','1496799398375');

=======
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b

DROP table if EXISTS `course`;
CREATE TABLE `course` (
  `course_id` int(10) not null AUTO_INCREMENT,
  `course_name` varchar(60) not null default '' COMMENT '课程名',
  `course_teacher` varchar(40) not null default '' COMMENT '执教老师',
  `course_time` varchar(60) not null  COMMENT '上课时间',
<<<<<<< HEAD
<<<<<<< HEAD
  `delete_flag` int(11) not null default '0',
  PRIMARY KEY (`course_id`)
)ENGINE =InnoDB DEFAULT CHARSET =utf8 AUTO_INCREMENT=2;

INSERT INTO course (course_name, course_teacher, course_time) VALUES ('Algorithm','lin','1-18周 周一 8：00');
=======
  PRIMARY KEY (`course_id`)
)ENGINE =InnoDB DEFAULT CHARSET =utf8 AUTO_INCREMENT=2;

>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
  PRIMARY KEY (`course_id`)
)ENGINE =InnoDB DEFAULT CHARSET =utf8 AUTO_INCREMENT=2;

>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b

DROP TABLE  if EXISTS  `notice`;
create table if not exists `notice`(
  `notice_id` int(10) not null AUTO_INCREMENT,
  `notice_content` MEDIUMTEXT not null comment '公告内容',
  `delete_flag` int(5) not null default '0',
  `is_show` int(5) not null default '0' comment '是否展示，是为1,默认为0',
  `weight` int(10) not null default '1' comment '权重',
  PRIMARY KEY (`notice_id`)
)ENGINE =InnoDB DEFAULT CHARSET =utf8 AUTO_INCREMENT=2;

<<<<<<< HEAD
INSERT INTO notice (notice_id,notice_content, delete_flag, is_show, weight) VALUES (1,'公告内容',0,0,1);
=======
INSERT INTO notice (notice_content, delete_flag, is_show, weight) VALUES (1,'公告内容',0,0,1);
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b



DROP TABLE IF EXISTS `compileinfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `compileinfo` (
  `solution_id` int(11) NOT NULL DEFAULT '0',
  `error` text,
  PRIMARY KEY (`solution_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `compileinfo`
--

LOCK TABLES `compileinfo` WRITE;
/*!40000 ALTER TABLE `compileinfo` DISABLE KEYS */;
INSERT INTO `compileinfo` VALUES (1076,'Main.c:2:8: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘void’\n public void f(int n){\r\n        ^\nMain.c: In function ‘main’:\nMain.c:8:1: warning: implicit declaration of function ‘f’ [-Wimplicit-function-declaration]\n f(1);\r\n ^\n');
/*!40000 ALTER TABLE `compileinfo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `contest`
--

DROP TABLE IF EXISTS `contest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `contest` (
  `contest_id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL,
  `start_time` datetime DEFAULT NULL,
  `end_time` datetime DEFAULT NULL,
  `defunct` char(1) NOT NULL DEFAULT 'N',
  `description` text,
  `private` tinyint(4) NOT NULL DEFAULT '0',
  `langmask` int(11) NOT NULL DEFAULT '0' COMMENT 'bits for LANG to mask',
  `password` char(16) NOT NULL DEFAULT '',
<<<<<<< HEAD
<<<<<<< HEAD
  `delete_flag` int(11) not null default '0',
=======
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
  PRIMARY KEY (`contest_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `contest`
--

LOCK TABLES `contest` WRITE;
/*!40000 ALTER TABLE `contest` DISABLE KEYS */;
<<<<<<< HEAD
INSERT INTO contest (title, start_time, end_time, defunct, description, private, langmask, password) VALUES ('天津科技大学第一届计算机程序设计大赛','2017-04-30 04:00:00','2017-04-30 08:00:00','N','天津科技大学第一届计算机程序设计大赛',0,262132,'123456');
=======
INSERT INTO `contest` VALUES (1000,'天津科技大学第一届计算机程序设计大赛','2017-04-30 04:00:00','2017-04-30 08:00:00','N','天津科技大学第一届计算机程序设计大赛',0,262132,'123456');
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
/*!40000 ALTER TABLE `contest` ENABLE KEYS */;
UNLOCK TABLES;


/*站外竞赛信息
DROP TABLE IF EXISTS `contests_nonlocal`;
CREATE TABLE `contests_nonlocal` (
  `contest_name` VARCHAR(128) NOT NULL ,
  `contest_url` VARCHAR(128) NOT NULL ,
  `create_time` TIMESTAMP NOT NULL DEFAULT current_timestamp
)ENGINE =InnoDB DEFAULT CHARSET =utf8;

INSERT INTO contests_nonlocal (contest_name, contest_url,create_time)
VALUES ('acm','http://dl.acm.org/','2017-5-13 08:00:00');
*/


--
-- Table structure for table `contest_problem`
--

DROP TABLE IF EXISTS `contest_problem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `contest_problem` (
  `problem_id` int(11) NOT NULL DEFAULT '0',
  `contest_id` int(11) DEFAULT NULL,
  `title` char(200) NOT NULL DEFAULT '',
  `num` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `contest_problem`
--

LOCK TABLES `contest_problem` WRITE;
/*!40000 ALTER TABLE `contest_problem` DISABLE KEYS */;
INSERT INTO `contest_problem` VALUES (1061,1000,'',2),(1060,1000,'',1),(1059,1000,'',0);
/*!40000 ALTER TABLE `contest_problem` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `custominput`
--

DROP TABLE IF EXISTS `custominput`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `custominput` (
  `solution_id` int(11) NOT NULL DEFAULT '0',
  `input_text` text,
  PRIMARY KEY (`solution_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `custominput`
--

LOCK TABLES `custominput` WRITE;
/*!40000 ALTER TABLE `custominput` DISABLE KEYS */;
/*!40000 ALTER TABLE `custominput` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `loginlog`
--

DROP TABLE IF EXISTS `loginlog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `loginlog` (
  `user_id` varchar(48) NOT NULL DEFAULT '',
  `password` varchar(40) DEFAULT NULL,
  `ip` varchar(100) DEFAULT NULL,
  `time` datetime DEFAULT NULL,
  KEY `user_log_index` (`user_id`,`time`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `loginlog`
--

LOCK TABLES `loginlog` WRITE;
/*!40000 ALTER TABLE `loginlog` DISABLE KEYS */;
INSERT INTO `loginlog` VALUES ('blank','No Saved','59.67.0.184','2017-04-30 02:41:40'),('admin','No Saved','59.67.0.184','2017-04-30 02:41:50'),('admin','No Saved','59.67.0.184','2017-04-30 02:43:35'),('admin','No Saved','59.67.0.184','2017-04-30 02:44:05'),('admin','No Saved','59.67.0.184','2017-04-30 02:44:56'),('admin','No Saved','59.67.0.184','2017-04-30 02:45:12'),('blank','No Saved','59.67.0.184','2017-04-30 02:45:21'),('blank','No Saved','59.67.0.184','2017-04-30 02:45:47'),('14101118','w1AJ+Fuba+TpvTQyddZST53qzERlMDA5','59.67.0.184','2017-04-30 02:49:57'),('14101118','No Saved','59.67.0.184','2017-04-30 02:51:29'),('14101118','No Saved','59.67.0.184','2017-04-30 03:28:37'),('14101118','No Saved','59.67.0.184','2017-04-30 03:31:34'),('admin','No Saved','59.67.0.184','2017-04-30 03:31:55'),('blank','No Saved','59.67.0.184','2017-04-30 03:32:04'),('admin','No Saved','59.67.0.184','2017-04-30 03:32:18'),('14101118','No Saved','59.67.0.184','2017-04-30 03:32:26'),('14101118','No Saved','59.67.0.184','2017-04-30 03:32:54'),('14101118','No Saved','59.67.0.184','2017-04-30 03:33:09'),('admin','No Saved','59.67.0.184','2017-04-30 03:36:42'),('14101118','No Saved','59.67.0.184','2017-04-30 03:36:57'),('14101118','No Saved','59.67.0.184','2017-04-30 03:53:00'),('14101118','No Saved','59.67.0.184','2017-04-30 03:53:05'),('14101118','No Saved','59.67.0.184','2017-04-30 03:53:18'),('14101118','No Saved','59.67.0.184','2017-04-30 03:53:52'),('14101118','No Saved','59.67.0.184','2017-04-30 03:59:02'),('14101118','No Saved','59.67.0.184','2017-04-30 03:59:46'),('admin','No Saved','59.67.0.184','2017-04-30 04:13:54'),('yhy5058','rG9hnT74p/vOa5GE9Glf46qP4kI3OGE0','59.67.0.184','2017-04-30 04:14:28'),('yhy5058','No Saved','59.67.0.184','2017-04-30 04:16:31'),('yhy5058','No Saved','59.67.0.184','2017-04-30 04:21:46'),('14101118','No Saved','59.67.0.184','2017-04-30 04:23:00'),('14101118','No Saved','59.67.0.184','2017-04-30 04:23:15'),('yhy5058','No Saved','59.67.0.184','2017-04-30 04:25:55'),('14101118','No Saved','59.67.0.184','2017-04-30 04:30:59'),('14101118','No Saved','59.67.0.184','2017-04-30 04:35:13'),('14101118','No Saved','117.14.28.115','2017-04-30 13:31:59'),('14101118','No Saved','117.14.28.115','2017-04-30 15:02:55'),('14101118','No Saved','117.14.28.115','2017-04-30 15:11:02'),('14101118','No Saved','117.14.28.115','2017-04-30 17:37:56'),('14101118','No Saved','117.15.116.122','2017-05-01 16:27:05'),('14101118','No Saved','59.67.0.181','2017-05-03 10:25:25'),('14101118','No Saved','59.67.0.196','2017-05-03 23:18:05'),('14101118','No Saved','59.67.0.196','2017-05-04 00:27:03'),('14101118','No Saved','59.67.0.196','2017-05-04 00:34:52');
/*!40000 ALTER TABLE `loginlog` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `mail`
--

DROP TABLE IF EXISTS `mail`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `mail` (
  `mail_id` int(11) NOT NULL AUTO_INCREMENT,
  `to_user` varchar(48) NOT NULL DEFAULT '',
  `from_user` varchar(48) NOT NULL DEFAULT '',
  `title` varchar(200) NOT NULL DEFAULT '',
  `content` text,
  `new_mail` tinyint(1) NOT NULL DEFAULT '1',
  `reply` tinyint(4) DEFAULT '0',
  `in_date` datetime DEFAULT NULL,
  `defunct` char(1) NOT NULL DEFAULT 'N',
  PRIMARY KEY (`mail_id`),
  KEY `uid` (`to_user`)
) ENGINE=InnoDB AUTO_INCREMENT=1013 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `mail`
--

LOCK TABLES `mail` WRITE;
/*!40000 ALTER TABLE `mail` DISABLE KEYS */;
/*!40000 ALTER TABLE `mail` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `news`
--

DROP TABLE IF EXISTS `news`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `news` (
  `news_id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) NOT NULL ,
  `pic_url` VARCHAR(200) NOT NULL ,
  `user_id` varchar(48) NOT NULL DEFAULT '',
  `content` text not null,
  `is_top` int(5) not NULL DEFAULT '0' comment '是否置顶',
  `is_report` int(5) not null default '0' comment '是否允许发表',
  `delete_flag` int(5) not null DEFAULT  '0' comment '是否删除,是为1',
  `weight` int(10) not null default '1' comment '权重数，数越大，展示越靠前',
  `add_time` varchar(50) not null,
  PRIMARY KEY (`news_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `news`
--

INSERT INTO news (news_id, title, pic_url, user_id, content, is_top, is_report, delete_flag, weight, add_time)
<<<<<<< HEAD
VALUES (1,'文章标题','封面图片的地址','admin','文章内容',0,0,0,1,'1484385311991');

<<<<<<< HEAD
INSERT INTO news (title, pic_url, user_id, content, is_top, is_report, delete_flag, weight, add_time) VALUES ('文章标题','封面图片的地址','admin','文章内容',0,0,0,1,'1484385311991');
=======
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
VALUES (1,'文章标题','封面图片的地址','文章内容',0,0,0,1,'1484385311991');

>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
--
-- Table structure for table `online`
--

DROP TABLE IF EXISTS `online`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `online` (
  `hash` varchar(32) COLLATE utf8_unicode_ci NOT NULL,
  `ip` varchar(20) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `ua` varchar(255) CHARACTER SET utf8 NOT NULL DEFAULT '',
  `refer` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `lastmove` int(10) NOT NULL,
  `firsttime` int(10) DEFAULT NULL,
  `uri` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`hash`),
  UNIQUE KEY `hash` (`hash`)
) ENGINE=MEMORY DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `online`
--

LOCK TABLES `online` WRITE;
/*!40000 ALTER TABLE `online` DISABLE KEYS */;
/*!40000 ALTER TABLE `online` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `privilege`
--

DROP TABLE IF EXISTS `privilege`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `privilege` (
  `user_id` char(48) NOT NULL DEFAULT '',
  `rightstr` char(30) NOT NULL DEFAULT '',
  `defunct` char(1) NOT NULL DEFAULT 'N'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `privilege`
--

LOCK TABLES `privilege` WRITE;
/*!40000 ALTER TABLE `privilege` DISABLE KEYS */;
INSERT INTO `privilege` VALUES ('yhy5058','administrator','N'),('blank','administrator','N'),('14101118','m1000','N'),('14101118','administrator','N'),('14101118','c1000','N');
/*!40000 ALTER TABLE `privilege` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `problem`
--

DROP TABLE IF EXISTS `problem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `problem` (
  `problem_id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) NOT NULL DEFAULT '',
  `description` text,
  `input` text,
  `output` text,
  `sample_input` text,
  `sample_output` text,
  `spj` char(1) NOT NULL DEFAULT '0',
  `hint` text,
  `source` varchar(100) DEFAULT NULL,
  `in_date` datetime DEFAULT NULL,
  `time_limit` int(11) NOT NULL DEFAULT '0',
  `memory_limit` int(11) NOT NULL DEFAULT '0',
  `defunct` char(1) NOT NULL DEFAULT 'N',
  `accepted` int(11) DEFAULT '0',
  `submit` int(11) DEFAULT '0',
  `solved` int(11) DEFAULT '0',
<<<<<<< HEAD
<<<<<<< HEAD
  `delete_flag` int(11) not null default '0',
=======
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
  PRIMARY KEY (`problem_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1243 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `problem`
--

LOCK TABLES `problem` WRITE;
/*!40000 ALTER TABLE `problem` DISABLE KEYS */;
<<<<<<< HEAD
<<<<<<< HEAD
INSERT INTO problem (problem_id, title, description, input, output, sample_input, sample_output, spj, hint, source, in_date, time_limit, memory_limit, defunct, accepted, submit, solved)
VALUES (1000,'C语言程序设计教程（第三版）课后习题1.5','<p>请参照本章例题，编写一个C程序，输出以下信息：</p>\n<p>**************************</br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Very&nbsp;&nbsp;&nbsp; Good!</br>\n**************************</p>\n<p>数＊号可看出，Very前面9空格，Good前面&hellip;&hellip;</p>\n<p>*也是输出的一部分，别光打印Very Good!</p>','<p>无需输入</p>','<p>**************************</br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Very&nbsp;&nbsp;&nbsp; Good!</br>\n**************************</p>','','**************************\n         Very    Good!\n**************************','0','','','2017-04-30 03:06:25',1,128,'N',2,2,0),(1001,'C语言程序设计教程（第三版）课后习题1.6','编写一个程序，输入a、b、c三个值，输出其中最大值。','一行数组，分别为a b c','a b c其中最大的数','10 20 30','30','0','','','2017-04-30 03:06:25',1,128,'N',2,3,0),(1002,'C语言程序设计教程（第三版）课后习题3.7','<p>要将&quot;China&quot;译成密码，译码规律是：用原来字母后面的第4个字母代替原来的字母．例如，字母&quot;A&quot;后面第4个字母是&quot;E&quot;．&quot;E&quot;代替&quot;A&quot;。因此，&quot;China&quot;应译为&quot;Glmre&quot;。请编一程序，用赋初值的方法使cl、c2、c3、c4、c5五个变量的值分别为，&rsquo;C&rsquo;、&rsquo;h&rsquo;、&rsquo;i&rsquo;、&rsquo;n&rsquo;、&rsquo;a&rsquo;，经过运算，使c1、c2、c3、c4、c5分别变为&rsquo;G&rsquo;、&rsquo;l&rsquo;、&rsquo;m&rsquo;、&rsquo;r&rsquo;、&rsquo;e&rsquo;，并输出。</p>','<p>China</p>','<p>加密后的China</p>','China','Glmre','0','so easy','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1003,'C语言程序设计教程（第三版）课后习题4.8','设圆半径r，圆柱高h\n\n求圆周长C1、圆面积Sa、圆球表面积Sb、圆球体积Va、圆柱体积Vb。\n用scanf输入数据，输出计算结果，输出时要求文字说明，取小数点后两位数字。请编程序。\n\nPI＝3.14  ','两个浮点数，r和h','圆周长C1、圆面积Sa、圆球表面积Sb、圆球体积Va、圆柱体积Vb。\n保留两位小数，每个结果后换行。','1.5 3','C1=9.42\nSa=7.07\nSb=28.26\nVa=14.13\nVb=21.19\n\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1004,'C语言程序设计教程（第三版）课后习题4.9','输入一个华氏温度，要求输出摄氏温度。公式为  \nc=5(F-32)/9  \n输出要求有文字说明，取位2小数。','一个华氏温度，浮点数','摄氏温度，浮点两位小数','-40','c=-40.00','0','零下40度，可以不问是？氏','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1005,'C语言程序设计教程（第三版）课后习题5.4','有三个整数a b c,由键盘输入，输出其中的最大的数。','一行数组，分别为a b c','a b c其中最大的数','10 20 30','30','0','max ?\nif(a>b) ?\n\nint main(){\n\n  return 0;\n}','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1006,'C语言程序设计教程（第三版）课后习题5.5','<p>有一个函数<br />\ny={ x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x&lt;1<br />\n&nbsp;&nbsp; &nbsp;| 2x-1&nbsp;&nbsp; 1&lt;=x&lt;10<br />\n&nbsp;&nbsp;&nbsp; \\ 3x-11&nbsp; x&gt;=10</p>\n<p>写一段程序，输入x，输出y</p>','<p>一个数x</p>','<p>一个数y</p>','14\n','31','0','使用函数','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1007,'C语言程序设计教程（第三版）课后习题5.6','给出一百分制成绩，要求输出成绩等级‘A’、‘B’、‘C’、‘D’、‘E’。\n90分以上为A\n80-89分为B\n70-79分为C\n60-69分为D\n60分以下为E\n','一个整数0－100以内','一个字符，表示成绩等级','90','A','0','分段函数返回字符','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1008,'C语言程序设计教程（第三版）课后习题5.7','给出一个不多于5位的整数，要求\n1、求出它是几位数\n2、分别输出每一位数字\n3、按逆序输出各位数字，例如原数为321,应输出123','一个不大于5位的数字','三行\n第一行 位数\n第二行 用空格分开的每个数字，注意最后一个数字后没有空格\n第三行 按逆序输出这个数','12345','5\n1 2 3 4 5\n54321','0','哈姆雷特：数字还是字符？这是一个问题！','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1009,'C语言程序设计教程（第三版）课后习题5.8','<p>企业发放的奖金根据利润提成。利润低于或等于100000元的，奖金可提10%;<br />\n利润高于100000元，低于200000元（100000&lt;I&le;200000）时，低于100000元的部分按10％提成，高于100000元的部分，可提成 7.5%;<br />\n200000&lt;I&le;400000时，低于200000元部分仍按上述办法提成，（下同），高于200000元的部分按5％提成；<br />\n400000&lt;I&le;600000元时，高于400000元的部分按3％提成；600000&lt;I&le;1000000时，高于600000元的部分按1.5%提成；<br />\nI&gt;1000000时，超过1000000元的部分按1%提成。从键盘输入当月利润I,求应发奖金总数。</p>','<p>一个整数，当月利润。</p>','<p>一个整数，奖金。</p>','900','90','0','用Switch要比用if的看起来更清晰。','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1010,'C语言程序设计教程（第三版）课后习题6.1','输入两个正整数m和n，求其最大公约数和最小公倍数。','两个整数','最大公约数，最小公倍数','5 7','1 35','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1011,'C语言程序设计教程（第三版）课后习题6.2','输入一行字符，分别统计出其中英文字母、空格、数字和其他字符的个数。','一行字符','统计值','aklsjflj123 sadf918u324 asdf91u32oasdf/.\';123\n','23 16 2 4','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1012,'C语言程序设计教程（第三版）课后习题6.3','求Sn=a+aa+aaa+…+aa…aaa（有n个a）之值，其中a是一个数字。\n例如：2+22+222+2222+22222（n=5），n由键盘输入。','a','和','5','24690','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1013,'C语言程序设计教程（第三版）课后习题6.4','求Sn=1!+2!+3!+4!+5!+…+n!之值，其中n是一个数字。\n','n','和','5','153','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1014,'C语言程序设计教程（第三版）课后习题6.5','求以下三数的和,保留2位小数\n1~a之和\n1~b的平方和\n1~c的倒数和','a b c','1+2+...+a + 1^2+2^2+...+b^2 + 1/1+1/2+...+1/c','100 50 10','47977.93','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1015,'C语言程序设计教程（第三版）课后习题6.6','打印出所有\"水仙花数\"，所谓\"水仙花数\"是指一个三位数，其各位数字立方和等于该本身。\n例如：153是一个水仙花数，因为153=1^3+5^3+3^3。\nOutput:<pre>\n153\n???\n???\n??? </pre>','无','所有的水仙花数，从小的开始。\n每行一个','','','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1016,'C语言程序设计教程（第三版）课后习题6.7','<p>一个数如果恰好等于它的因子之和，这个数就称为&quot;完数&quot;。 例如，6的因子为1、2、3，而6=1+2+3，因此6是&quot;完数&quot;。 编程序找出N之内的所有完数，并按下面格式输出其因子：</p>','<p>N</p>','<p>? its factors are ? ? ?</p>','1000','6 its factors are 1 2 3 \n28 its factors are 1 2 4 7 14 \n496 its factors are 1 2 4 8 16 31 62 124 248 ','0','','','2017-04-30 03:06:25',10,128,'N',1,1,0),(1017,'C语言程序设计教程（第三版）课后习题6.8','有一分数序列：  \n2/1 3/2 5/3 8/5 13/8 21/13......\n求出这个数列的前N项之和，保留两位小数。  ','N','数列前N项和','10','16.48','0','','','2017-04-30 03:06:25',1,128,'N',0,1,0),(1018,'C语言程序设计教程（第三版）课后习题6.9','一球从M米高度自由下落，每次落地后返回原高度的一半，再落下。\n它在第N次落地时反弹多高？共经过多少米？\n保留两位小数','M N','它在第N次落地时反弹多高？共经过多少米？\n保留两位小数，空格隔开，放在一行','1000 5','31.25 2875.00','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1019,'C语言程序设计教程（第三版）课后习题6.10','猴子吃桃问题。猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个。\n第二天早上又将剩下的桃子吃掉一半，又多吃一个。以后每天早上都吃了前一天剩下的一半零一个。\n到第N天早上想再吃时，见只剩下一个桃子了。求第一天共摘多少桃子。','N','桃子总数','10','1534','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1020,'C语言程序设计教程（第三版）课后习题6.11','用迭代法求 。求平方根的迭代公式为：  \nX[n+1]=1/2(X[n]+a/X[n])\n要求前后两次求出的得差的绝对值少于0.00001。\n输出保留3位小数','X','X的平方根','4','2.000','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1021,'C语言程序设计教程（第三版）课后习题7.1','用筛法求之N内的素数。 ','N','0～N的素数','100','2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97','0','数组大小动态定义？函数？','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1022,'C语言程序设计教程（第三版）课后习题7.2','用选择法对10个整数从小到大排序。  ','10个整数','排序好的10个整数','4 85  3 234 45 345 345 122 30 12','3\n4\n12\n30\n45\n85\n122\n234\n345\n345','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1023,'C语言程序设计教程（第三版）课后习题7.3','求一个3×3矩阵对角线元素之和。  ','矩阵','主对角线 副对角线 元素和','1 2 3\n1 1 1\n3 2 1','3 7','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1024,'C语言程序设计教程（第三版）课后习题7.4','已有一个已排好的9个元素的数组，今输入一个数要求按原来排序的规律将它插入数组中。','第一行，原始数列。\n第二行，需要插入的数字。','排序后的数列','1 7 8 17 23 24 59 62 101\n50','1\n7\n8\n17\n23\n24\n50\n59\n62\n101\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1025,'C语言程序设计教程（第三版）课后习题7.5','输入10个数字，然后逆序输出。','十个整数','逆序输出，空格分开','1 2 3 4 5 6 7 8 9 0','0 9 8 7 6 5 4 3 2 1','0','数组？堆栈？','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1026,'C语言程序设计教程（第三版）课后习题8.1','写两个函数，分别求两个整数的最大公约数和最小公倍数，用主函数调用这两个函数，并输出结果两个整数由键盘输入。','两个数','最大公约数 最小公倍数','6 15','3 30','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1027,'C语言程序设计教程（第三版）课后习题8.2','求方程 的根，用三个函数分别求当b^2-4ac大于0、等于0、和小于0时的根，并输出结果。从主函数输入a、b、c的值。 ','a b c','x1=? x2=?','4 1 1','x1=-0.125+0.484i x2=-0.125-0.484i','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1028,'C语言程序设计教程（第三版）课后习题8.3','写一个判断素数的函数，在主函数输入一个整数，输出是否是素数的消息。','一个数','如果是素数输出prime\n如果不是输出not prime','97','prime','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1029,'C语言程序设计教程（第三版）课后习题8.4','写一个函数，使给定的一个二维数组（３×３）转置，即行列互换。','一个3x3的矩阵','转置后的矩阵','1 2 3\n4 5 6\n7 8 9\n','1 4 7 \n2 5 8 \n3 6 9 \n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1030,'C语言程序设计教程（第三版）课后习题8.5','写一函数，使输入的一个字符串按反序存放，在主函数中输入输出反序后的字符串。  ','一行字符','逆序后的字符串','123456abcdef \n','fedcba654321\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1031,'C语言程序设计教程（第三版）课后习题8.6','写一函数，将两个字符串连接','两行字符串','链接后的字符串','123\nabc','123abc','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1032,'C语言程序设计教程（第三版）课后习题8.7','写一函数，将两个字符串中的元音字母复制到另一个字符串，然后输出。','一行字符串','顺序输出其中的元音字母（aeiuo）','abcde','ae','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1033,'C语言程序设计教程（第三版）课后习题8.8','写一函数，输入一个四位数字，要求输出这四个数字字符，但每两个数字间空格。如输入1990，应输出\"1 9 9 0\"。','一个四位数','增加空格输出','1990','1 9 9 0 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1034,'C语言程序设计教程（第三版）课后习题8.9','编写一函数，由实参传来一个字符串，统计此字符串中字母、数字、空格和其它字符的个数，在主函数中输入字符串以及输出上述结果。\n\n只要结果，别输出什么提示信息。','一行字符串','统计数据，4个数字，空格分开。','!@#$%^QWERT    1234567','5 7 4 6 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1035,'C语言程序设计教程（第三版）课后习题9.1','定义一个带参的宏，使两个参数的值互换，并写出程序，输入两个数作为使用宏时的实参。输出已交换后的两个值。  ','两个数，空格隔开','交换后的两个数，空格隔开','1 2','2 1','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1036,'C语言程序设计教程（第三版）课后习题9.2','输入两个整数，求他们相除的余数。用带参的宏来实现，编程序。  ','a b两个数','a/b的余数','3 2','1','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1037,'C语言程序设计教程（第三版）课后习题9.3','三角形面积=SQRT(S*(S-a)*(S-b)*(S-c))\n其中S=(a+b+c)/2，a、b、c为三角形的三边。\n定义两个带参的宏，一个用来求area，\n另一个宏用来求S。\n\n写程序，在程序中用带实参的宏名来求面积area。 ','a b c三角形的三条边,可以是小数。','三角形面积，保留3位小数','3 4 5','6.000','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1038,'C语言程序设计教程（第三版）课后习题9.4','给年份year，定义一个宏，以判别该年份是否闰年。提示：宏名可以定义为LEAP_YEAR，形参为y，既定义宏的形式为  \n#define LEAP_YEAR(y) （读者设计的字符串）','一个年份','根据是否闰年输出，是输出\"L\",否输出\"N\"','2000','L','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1039,'C语言程序设计教程（第三版）课后习题9.6','请设计输出实数的格式，包括：⑴一行输出一个实数；⑵一行内输出两个实数；⑶一行内输出三个实数。实数用\"6.2f\"格式输出。','一个实数，float范围','输出3行，第一行打印一遍输入的数，第二行打印两遍，第三行打印三遍。\n第二行和第三行，用空格分隔同一行的数字。\n实数用\"6.2f\"格式输出。','0.618','  0.62\n  0.62   0.62\n  0.62   0.62   0.62\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1040,'C语言程序设计教程（第三版）课后习题9.8','分别用函数和带参的宏，从三个数中找出最大的数。','3个实数','最大的数,输出两遍，先用函数，再用宏。\n保留3位小数。','1 2 3','3.000\n3.000','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1041,'C语言程序设计教程（第三版）课后习题9.10','输入一行电报文字，将字母变成其下一字母（如’a’变成’b’……’z’变成’ａ’其它字符不变）。','一行字符','加密处理后的字符','a b','b c','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1042,'C语言程序设计教程（第三版）课后习题10.1','输入三个整数，按由小到大的顺序输出。','三个整数','由小到大输出成一行，每个数字后面跟一个空格','2 3 1','1 2 3 ','0','','','2017-04-30 03:06:25',1,128,'N',0,1,0),(1043,'C语言程序设计教程（第三版）课后习题10.2','输入三个字符串，按由小到大的顺序输出 ','3行字符串','按照从小到大输出成3行','cde\nafg\nabc\n','abc\nafg\ncde','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1044,'C语言程序设计教程（第三版）课后习题10.3','输入10个整数，将其中最小的数与第一个数对换，把最大的数与最后一个数对换。写三个函数；\n①输入10个数；②进行处理；③输出10个数。','10个整数','整理后的十个数，每个数后跟一个空格（注意最后一个数后也有空格）','2 1 3 4 5 6 7 8 10 9','1 2 3 4 5 6 7 8 9 10 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1045,'C语言程序设计教程（第三版）课后习题10.4','有n个整数，使前面各数顺序向后移m个位置，最后m个数变成前面m个数，见图。写一函数：实现以上功能，在主函数中输入n个数和输出调整后的n个数。','输入数据的个数n\nn个整数\n移动的位置m','移动后的n个数','10\n1 2 3 4 5 6 7 8 9 10\n2','9 10 1 2 3 4 5 6 7 8 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1046,'C语言程序设计教程（第三版）课后习题10.5','有n人围成一圈，顺序排号。从第1个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来的第几号的那位。','初始人数n','最后一人的初始编号','3','2','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1047,'C语言程序设计教程（第三版）课后习题10.7','有一字符串，包含n个字符。写一函数，将此字符串中从第m个字符开始的全部字符复制成为另一个字符串。','数字n\n一行字符串\n数字m','从m开始的子串','6\nabcdef\n3','cdef','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1048,'C语言程序设计教程（第三版）课后习题11.1','定义一个结构体变量（包括年、月、日）。计算该日在本年中是第几天，注意闰年问题。  \n','年月日','当年第几天','2000 12 31','366','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1049,'C语言程序设计教程（第三版）课后习题11.3','现有有N个学生的数据记录，每个记录包括学号、姓名、三科成绩。\n编写一个函数input,用来输入一个学生的数据记录。\n编写一个函数print,打印一个学生的数据记录。\n在主函数调用这两个函数，读取N条记录输入，再按要求输出。\nN<100','学生数量N占一行\n每个学生的学号、姓名、三科成绩占一行，空格分开。','每个学生的学号、姓名、三科成绩占一行，逗号分开。','2\na100 zhblue 70 80 90\nb200 newsclan 90 85 75\n','a100,zhblue,70,80,90\nb200,newsclan,90,85,75\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1050,'C语言程序设计教程（第三版）课后习题11.5','有N个学生，每个学生的数据包括学号、姓名、3门课的成绩，从键盘输入N个学生的数据，要求打印出3门课的总平均成绩，以及最高分的学生的数据（包括学号、姓名、3门课成绩）','学生数量N占一行每个学生的学号、姓名、三科成绩占一行，空格分开。','各门课的平均成绩\n最高分的学生的数据（包括学号、姓名、3门课成绩）','2\n1 blue 90 80 70\nb clan 80 70 60','85 75 65\n1 blue 90 80 70','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1051,'C语言程序设计教程（第三版）课后习题11.8','已有a、b两个链表，每个链表中的结点包括学好、成绩。要求把两个链表合并，按学号升序排列。  ','第一行，a、b两个链表元素的数量N、M,用空格隔开。\n接下来N行是a的数据\n然后M行是b的数据\n每行数据由学号和成绩两部分组成\n\n','按照学号升序排列的数据','2 3\n5 100\n6 89\n3 82\n4 95\n2 10','2 10\n3 82\n4 95\n5 100\n6 89','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1052,'通话记录','<p>使用3个队列，分别保留手机上最近10个，（0）未接来电、（1）已接来电、（2）已拨电话。</p>\n<p></p>','<p>全部通话记录，每行一条记录。</p>\n<p>每条记录包含两个数字，第一个数代表记录类型，第二个数代表手机号码。</p>','<p>分3列输出未接来电、已接来电、已拨电话。</p>\n<p>列之间用空格分割，后接电话在最先输出，不足10条用0占位。</p>','2	18270477699\n1	10149800116\n0	19906559817\n1	16209018105\n1	16804212234\n2	19289130583\n1	17982711123\n0	10897630486\n1	11860787674\n0	15192777554\n','15192777554 11860787674 19289130583\n10897630486 17982711123 18270477699\n19906559817 16804212234 0\n0 16209018105 0\n0 10149800116 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1053,'使用栈实现进制转换','<p>使用栈将一个很长（&gt;30）的十进制数转换为二进制数</p>','<p>若干个很长的十进制数</p>\n<p>每行一个</p>','<p>转换为二进制，每行输出一个</p>','123456789012345678901234567890\n753951684269875454652589568545854758545824','1100011101110100100001111111101101100001101110011111000001110111001001110001111110000101011010010\n10001010011110101010001101001000100100100000101001011010001010101001000100111101011001110001000111110010001000101101111110110110100110100000','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1054,'判断升序','<p>实现public static boolean isSorted(int[] table)</p>\n<p>判断整数数组元素是否已经按升序排序。</p>','<p>一列数，需要判断的数组元素。</p>','<p>如果已经排序输出YES</p>\n<p>如果没有排序输出NO</p>','1\n2\n3\n4\n5\n6\n','YES\n','0','<p>import java.util.*;</p>\n<p>public class Main{</p>\n<p>&nbsp;&nbsp; public static void main(String args[]){</p>\n<p>&nbsp; Scanner cin = new Scanner(System.in);</p>\n<p>&nbsp; int a, b;<br />\n&nbsp; b=-1;<br />\n&nbsp; while (cin.hasNext()){</p>\n<p>&nbsp; a = cin.nextInt();</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(??????????){<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;????????;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;????????????????????;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\n&nbsp;????????????;</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p>&nbsp;if(!cin.hasNext())<br />\n&nbsp;&nbsp;????????????????????????</p>\n<p>&nbsp; }</p>\n<p>}</p>\n<p><br />\n</p>','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1055,'金额的中文大写','<p>读入一个浮点数值，将其转化为金额的中文大写形式。<br />\n例如：<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 123.45转化为&ldquo;壹佰贰拾叁元肆角伍分&rdquo;。</p>\n<p>1）当金额为整数时，只表示整数部分，省略小数部分，并添加&ldquo;整&rdquo;字。<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 例如：123表示为&ldquo;壹佰贰拾叁元整&rdquo;</p>\n<p>2）当金额中有连续的0时（含一个0），只需写一个&ldquo;零&rdquo;即可。<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 例如：10005表示为&ldquo;壹万零伍元整&rdquo;</p>\n<p>3）10元缩写为&ldquo;拾元整&rdquo;。</p>','<p>表示金额的浮点数若干，每行一个</p>','<p>各金额的中文大写形式，每行一个</p>\n<p>注：数字&ldquo;壹贰叁肆伍陆柒捌玖拾佰仟万亿&rdquo;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 单位&ldquo;元角分&rdquo;</p>','123.45\n123\n10005\n10','壹佰贰拾叁元肆角伍分\n壹佰贰拾叁元整\n壹万零伍元整\n拾元整','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1056,'复数加法','<p>数集拓展到实数范围内，仍有些运算无法进行。比如判别式小于0的<a href=\"http://baike.baidu.com/view/397767.htm\" target=\"_blank\"><font color=\"#136ec2\">一元二次方程</font></a>仍<a href=\"http://baike.baidu.com/view/1203270.htm\" target=\"_blank\"><font color=\"#136ec2\">无解</font></a>，因此将数集再次扩充，达到复数范围。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：形如z=a+bi的数称为复数(complex number)</b>，其中规定<b>i</b>为<b>虚数单位</b>，且i^2=i*i=-1（a，b是任意<a href=\"http://baike.baidu.com/view/14749.htm\" target=\"_blank\"><font color=\"#136ec2\">实数</font></a>）</p>\n<div class=\"spctrl\"></div>\n<p>　　我们将复数z=a+bi中的实数a称为复数z的实部（real part)记作Rez=a</p>\n<div class=\"spctrl\"></div>\n<p>　　实数b称为复数z的<a href=\"http://baike.baidu.com/view/2441262.htm\" target=\"_blank\"><font color=\"#136ec2\">虚部</font></a>（imaginary part)记作 Imz=b.</p>\n<div class=\"spctrl\"></div>\n<p>　　已知：当b=0时，z=a，这时复数成为实数；</p>\n<div class=\"spctrl\"></div>\n<p>　　当a=0且b&ne;0时 ，z=bi，我们就将其称为<a href=\"http://baike.baidu.com/view/899964.htm\" target=\"_blank\"><b><font color=\"#136ec2\">纯虚数</font></b></a>。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义： 对于复数z=a+bi，称复数z\'=a-bi为z的</b><a href=\"http://baike.baidu.com/view/137793.htm\" target=\"_blank\"><b><font color=\"#136ec2\">共轭复数</font></b></a><b>。</b></p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：将复数的实部与虚部的平方和的正的平方根的值称为该复数的模，记作∣z∣</b></p>\n<div class=\"spctrl\"></div>\n<p>　　即对于复数z=a+bi，它的模</p>\n<div class=\"spctrl\"></div>\n<p>　　∣z∣=&radic;(a^2+b^2)</p>\n<div class=\"spctrl\"></div>\n<p>　　复数的集合用C表示，显然，R是C的真子集</p>\n<div class=\"spctrl\"></div>\n<p>　　复数集是无序集，不能建立大小顺序。</p>\n<div class=\"spctrl\"></div>\n<p>　　共轭复数有些有趣的性质: ︱x+yi︱=︱x-yi︱ (x+yi)*(x-yi)=x^2+y^2=︱x+yi︱^2=︱x-yi︱^2</p>','<p>两个复数分两行，每行两个数，代表复数的实部和虚部。</p>','<p>两个复数的和。</p>','1 2\n3 4','4 6','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1057,'复数乘积','<p>数集拓展到实数范围内，仍有些运算无法进行。比如判别式小于0的<a href=\"http://baike.baidu.com/view/397767.htm\" target=\"_blank\"><font color=\"#136ec2\">一元二次方程</font></a>仍<a href=\"http://baike.baidu.com/view/1203270.htm\" target=\"_blank\"><font color=\"#136ec2\">无解</font></a>，因此将数集再次扩充，达到复数范围。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：形如z=a+bi的数称为复数(complex number)</b>，其中规定<b>i</b>为<b>虚数单位</b>，且i^2=i*i=-1（a，b是任意<a href=\"http://baike.baidu.com/view/14749.htm\" target=\"_blank\"><font color=\"#136ec2\">实数</font></a>）</p>\n<div class=\"spctrl\"></div>\n<p>　　我们将复数z=a+bi中的实数a称为复数z的实部（real part)记作Rez=a</p>\n<div class=\"spctrl\"></div>\n<p>　　实数b称为复数z的<a href=\"http://baike.baidu.com/view/2441262.htm\" target=\"_blank\"><font color=\"#136ec2\">虚部</font></a>（imaginary part)记作 Imz=b.</p>\n<div class=\"spctrl\"></div>\n<p>　　已知：当b=0时，z=a，这时复数成为实数；</p>\n<div class=\"spctrl\"></div>\n<p>　　当a=0且b&ne;0时 ，z=bi，我们就将其称为<a href=\"http://baike.baidu.com/view/899964.htm\" target=\"_blank\"><b><font color=\"#136ec2\">纯虚数</font></b></a>。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义： 对于复数z=a+bi，称复数z\'=a-bi为z的</b><a href=\"http://baike.baidu.com/view/137793.htm\" target=\"_blank\"><b><font color=\"#136ec2\">共轭复数</font></b></a><b>。</b></p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：将复数的实部与虚部的平方和的正的平方根的值称为该复数的模，记作∣z∣</b></p>\n<div class=\"spctrl\"></div>\n<p>　　规定复数的乘法按照以下的法则进行：</p>\n<div class=\"spctrl\"></div>\n<p>　　设z1=a+bi，z2=c+di(a、b、c、d&isin;R)是任意两个复数，那么它们的积(a+bi)(c+di)=(ac－bd)+(bc+ad)i.</p>\n<div class=\"spctrl\"></div>\n<p>　　其实就是把两个复数相乘，类似两个多项式相乘，在所得的结果中把i2换成－1，并且把实部与虚部分别合并.两个复数的积仍然是一个复数.</p>','<p>两个复数分两行，每行两个数，代表复数的实部和虚部。</p>','<p>两个复数的乘积。</p>','1 1\n1 1','0 2','0','','数据结构Java版\n\n数据结构Java版\n\n数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1058,'多项式相加','<p>一条单链表可以表示一个一元多项式，每个节点包含三个域：指数、系数和后继节点（指针或引用）。</p>\n<p>表示多项式3X<sup>4</sup>-6X<sup>2</sup>+5X-10的单链表如图所示。给定两个多项式，实现两个多项式相加算法。</p>\n<p></p>\n<p><img alt=\"\" width=\"600\" height=\"103\" src=\"/admin/../upload/pimg1058_1.png\" /></p>','<p>第一行输入包含两个整数m,n</p>\n<p>后续为m行和n行数据</p>\n<p>m，n分别代表两个多项式的项数</p>\n<p>后续每一行代表多项式的项，包含a,b两个数据，表示该项的系数和指数。</p>\n<p></p>','<p>从较高指数到较低指数，依次输出求得的和。</p>\n<p>每行一项，格式与输入相同，但无需输出项数，系数为0的项也不输出。</p>','2 3\n1 2\n1 1\n2 2\n1 1\n2 0\n','3 2\n2 1\n2 0','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1059,'VIJOS-P1000','输入两个自然数，输出他们的和\n','两个自然数x和y(0&lt; =x,y&lt; =32767)\n','一个数，即x和y的和\n','123 500\n','623\n','0','[b]Free&nbsp Pascal&nbsp Code:[/b]\n-------------------\nprogram&nbsp Plus;\nvar&nbsp a,b:longint;\nbegin\n&nbsp &nbsp readln(a,b);\n&nbsp &nbsp writeln(a+b);\nend.\n\n[b]C++&nbsp Code:[/b]\n-------------------\n#include&nbsp &lt; iostream&gt; \nusing&nbsp namespace&nbsp std;\nint&nbsp main(){\n&nbsp &nbsp int&nbsp a,b;\n&nbsp &nbsp cin&gt; &gt; a&gt; &gt; b;\n&nbsp &nbsp cout&lt; &lt; a+b&lt; &lt; endl;\n&nbsp &nbsp return&nbsp 0;\n}\n','','2017-04-30 04:23:46',0,128,'N',0,0,0),(1060,'VIJOS-P1001','&nbsp &nbsp &nbsp &nbsp 某校的惯例是在每学期的期末考试之后发放奖学金。发放的奖学金共有五种，获取的条件各自不同：\n\n&nbsp &nbsp &nbsp &nbsp 1)&nbsp &nbsp 院士奖学金，每人8000元，期末平均成绩高于80分（&gt; 80），并且在本学期内发表1篇或1篇以上论文的学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 2)&nbsp &nbsp 五四奖学金，每人4000元，期末平均成绩高于85分（&gt; 85），并且班级评议成绩高于80分（&gt; 80）的学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 3)&nbsp &nbsp 成绩优秀奖，每人2000元，期末平均成绩高于90分（&gt; 90）的学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 4)&nbsp &nbsp 西部奖学金，每人1000元，期末平均成绩高于85分（&gt; 85）的西部省份学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 5)&nbsp &nbsp 班级贡献奖，每人850元，班级评议成绩高于80分（&gt; 80）的学生干部均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 只要符合条件就可以得奖，每项奖学金的获奖人数没有限制，每名学生也可以同时获得多项奖学金。例如姚林的期末平均成绩是87分，班级评议成绩82分，同时他还是一位学生干部，那么他可以同时获得五四奖学金和班级贡献奖，奖金总数是4850元。\n\n&nbsp &nbsp &nbsp &nbsp 现在给出若干学生的相关数据，请计算哪些同学获得的奖金总数最高（假设总有同学能满足获得奖学金的条件）。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行是一个整数N（1&nbsp &lt; =&nbsp N&nbsp &lt; =&nbsp 100），表示学生的总数。接下来的N行每行是一位学生的数据，从左向右依次是姓名，期末平均成绩，班级评议成绩，是否是学生干部，是否是西部省份学生，以及发表的论文数。姓名是由大小写英文字母组成的长度不超过20的字符串（不含空格）；期末平均成绩和班级评议成绩都是0到100之间的整数（包括0和100）；是否是学生干部和是否是西部省份学生分别用一个字符表示，Y表示是，N表示不是；发表的论文数是0到10的整数（包括0和10）。每两个相邻数据项之间用一个空格分隔。\n','&nbsp &nbsp &nbsp &nbsp 输出包括三行，第一行是获得最多奖金的学生的姓名，第二行是这名学生获得的奖金总数。如果有两位或两位以上的学生获得的奖金最多，输出他们之中在输入文件中出现最早的学生的姓名。第三行是这N个学生获得的奖学金的总数。\n','4\nYaoLin 87 82 Y N 0\nChenRuiyi 88 78 N Y 1\nLiXin 92 88 N N 0\nZhangQin 83 87 Y N 1\n','ChenRuiyi\n9000\n28700\n','0','','NOIp2005&nbsp 第一题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1061,'VIJOS-P1002','&nbsp &nbsp &nbsp &nbsp 在河上有一座独木桥，一只青蛙想沿着独木桥从河的一侧跳到另一侧。在桥上有一些石子，青蛙很讨厌踩在这些石子上。由于桥的长度和青蛙一次跳过的距离都是正整数，我们可以把独木桥上青蛙可能到达的点看成数轴上的一串整点：0，1，……，L（其中L是桥的长度）。坐标为0的点表示桥的起点，坐标为L的点表示桥的终点。青蛙从桥的起点开始，不停的向终点方向跳跃。一次跳跃的距离是S到T之间的任意正整数（包括S,T）。当青蛙跳到或跳过坐标为L的点时，就算青蛙已经跳出了独木桥。\n\n&nbsp &nbsp &nbsp &nbsp 题目给出独木桥的长度L，青蛙跳跃的距离范围S,T，桥上石子的位置。你的任务是确定青蛙要想过河，最少需要踩到的石子数。\n\n&nbsp &nbsp &nbsp &nbsp 对于30%的数据，L&nbsp &lt; =&nbsp 10000；\n&nbsp &nbsp &nbsp &nbsp 对于全部的数据，L&nbsp &lt; =&nbsp 10^9。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行有一个正整数L（1&nbsp &lt; =&nbsp L&nbsp &lt; =&nbsp 10^9），表示独木桥的长度。第二行有三个正整数S，T，M，分别表示青蛙一次跳跃的最小距离，最大距离，及桥上石子的个数，其中1&nbsp &lt; =&nbsp S&nbsp &lt; =&nbsp T&nbsp &lt; =&nbsp 10，1&nbsp &lt; =&nbsp M&nbsp &lt; =&nbsp 100。第三行有M个不同的正整数分别表示这M个石子在数轴上的位置（数据保证桥的起点和终点处没有石子）。所有相邻的整数之间用一个空格隔开。\n','&nbsp &nbsp &nbsp &nbsp 输出只包括一个整数，表示青蛙过河最少需要踩到的石子数。\n','10\n2 3 5\n2 3 5 6 7\n','2\n','0','','NOIp2005&nbsp 第二题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1062,'VIJOS-P1003','&nbsp &nbsp &nbsp &nbsp 明明进了中学之后，学到了代数表达式。有一天，他碰到一个很麻烦的选择题。这个题目的题干中首先给出了一个代数表达式，然后列出了若干选项，每个选项也是一个代数表达式，题目的要求是判断选项中哪些代数表达式是和题干中的表达式等价的。\n\n&nbsp &nbsp &nbsp &nbsp 这个题目手算很麻烦，因为明明对计算机编程很感兴趣，所以他想是不是可以用计算机来解决这个问题。假设你是明明，能完成这个任务吗？\n\n&nbsp \n\n&nbsp &nbsp &nbsp &nbsp 这个选择题中的每个表达式都满足下面的性质：\n\n&nbsp &nbsp &nbsp &nbsp 1．&nbsp &nbsp 表达式只可能包含一个变量‘a’。\n\n&nbsp &nbsp &nbsp &nbsp 2．&nbsp &nbsp 表达式中出现的数都是正整数，而且都小于10000。\n\n&nbsp &nbsp &nbsp &nbsp 3．&nbsp &nbsp 表达式中可以包括四种运算‘+’（加），‘-’（减），‘*’（乘），‘^’（乘幂），以及小括号‘(’，‘)’。小括号的优先级最高，其次是‘^’，然后是‘*’，最后是‘+’和‘-’。‘+’和‘-’的优先级是相同的。相同优先级的运算从左到右进行。（注意：运算符‘+’，‘-’，‘*’，‘^’以及小括号‘(’，‘)’都是英文字符）\n\n&nbsp &nbsp &nbsp &nbsp 4．&nbsp &nbsp 幂指数只可能是1到10之间的正整数（包括1和10）。\n\n&nbsp &nbsp &nbsp &nbsp 5．&nbsp &nbsp 表达式内部，头部或者尾部都可能有一些多余的空格。\n\n&nbsp &nbsp &nbsp &nbsp 下面是一些合理的表达式的例子：\n\n((a^1)&nbsp ^&nbsp 2)^3，a*a+a-a，((a+a))，9999+(a-a)*a，1&nbsp +&nbsp (a&nbsp -1)^3，1^10^9……\n\n\n对于30%的数据，表达式中只可能出现两种运算符‘+’和‘-’；\n\n对于其它的数据，四种运算符‘+’，‘-’，‘*’，‘^’在表达式中都可能出现。\n\n对于全部的数据，表达式中都可能出现小括号‘(’和‘)’。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行给出的是题干中的表达式。第二行是一个整数n（2&nbsp &lt; =&nbsp n&nbsp &lt; =&nbsp 26），表示选项的个数。后面n行，每行包括一个选项中的表达式。这n个选项的标号分别是A，B，C，D……\n\n&nbsp &nbsp &nbsp &nbsp 输入中的表达式的长度都不超过50个字符，而且保证选项中总有表达式和题干中的表达式是等价的。\n','&nbsp &nbsp &nbsp &nbsp 输出包括一行，这一行包括一系列选项的标号，表示哪些选项是和题干中的表达式等价的。选项的标号按照字母顺序排列，而且之间没有空格。\n','( a + 1) ^2\n3\n(a-1)^2+4*a\na  + 1+ a\na^2 + 2 * a * 1 + 1^2 + 10 -10 +a -a\n','AC\n','0','','NOIp2005&nbsp 第四题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1063,'VIJOS-P1004','&nbsp &nbsp &nbsp Adam和Eve玩一个游戏，他们先从1900.1.1到2001.11.4这个日期之间随意抽取一个日期出来。然后他们轮流对这个日期进行操作：\n\n&nbsp &nbsp &nbsp 1&nbsp ：&nbsp 把日期的天数加1，例如1900.1.1变到1900.1.2\n\n&nbsp &nbsp &nbsp 2&nbsp ：&nbsp 把月份加1，例如：1900.1.1变到1900.2.1\n\n&nbsp &nbsp &nbsp 其中如果天数超过应有天数则日期变更到下个月的第1天。月份超过12则变到下一年的1月。而且进行操作二的时候，如果有这样的日期：1900.1.31，则变成了1900.2.31，这样的操作是非法的，我们不允许这样做。而且所有的操作均要考虑历法和闰年的规定。\n\n&nbsp &nbsp &nbsp 谁先将日期变到2001.11.4谁就赢了。\n\n&nbsp &nbsp &nbsp 每次游戏都是Adam先操作，问他有没有必胜策略？\n','&nbsp &nbsp 一个测试点。多组数据。\n&nbsp &nbsp 第一行为数据组数。\n&nbsp &nbsp 接下来一行X&nbsp Y&nbsp Z表示X年Y月Z日\n','&nbsp &nbsp 输出“YES”or“NO”表示亚当是否有必胜策略。&nbsp \n','3\n2001 11 3\n2001 11 2\n2001 10 3\n','YES\nNO\nNO\n','0','&nbsp &nbsp 建议先把所有情况都算出来^_^\n','From&nbsp ZJU\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1064,'VIJOS-P1005','他最喜欢的是数字的无穷序列，结果是把所有的自然数按升序排列。这个序列开始是：&nbsp 1234567891011121314...&nbsp 我们叫序列&nbsp S。然后&nbsp S[1]&nbsp =&nbsp 1,&nbsp S[2]&nbsp =&nbsp 2,&nbsp ...&nbsp ,&nbsp S[10]&nbsp =&nbsp 1,&nbsp S[11]&nbsp =&nbsp 0,&nbsp ...&nbsp ,&nbsp 以此类推。&nbsp \nGeorge&nbsp 现有一个数字系列&nbsp A&nbsp ，他想知道在S中最早出现的位置。帮助他解决这个难题。\n','输入文件包含&nbsp A&nbsp -&nbsp 给出的数字系列。位数不超过&nbsp 200。没有空格。\n','输出一个整数。-&nbsp 最小的&nbsp k&nbsp ，使&nbsp A[1]&nbsp =&nbsp S[k],&nbsp A[2]&nbsp =&nbsp S[k+1],&nbsp ...&nbsp A[len(A)]&nbsp =&nbsp S[k&nbsp +&nbsp len(A)&nbsp －1],&nbsp len(A)&nbsp 表示&nbsp A&nbsp 的长度。\n','101\n','10\n','0','','Ural&nbsp State&nbsp University&nbsp Problem&nbsp Archive\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1065,'VIJOS-P1006','&nbsp &nbsp &nbsp &nbsp 这一天，他来到了一座深山的山脚下，因为只有这座深山中的一位隐者才知道这种药草的所在。但是上山的路错综复杂，由于小小猪的病情，晴天小猪想找一条需时最少的路到达山顶，但现在它一头雾水，所以向你求助。\n&nbsp &nbsp &nbsp &nbsp 山用一个三角形表示，从山顶依次向下有1段、2段、3段等山路，每一段用一个数字T（1&lt; =T&lt; =100）表示，代表晴天小猪在这一段山路上需要爬的时间，每一次它都可以朝左、右、左上、右上四个方向走（**注意**：在任意一层的第一段也可以走到本层的最后一段或上一层的最后一段）。\n&nbsp &nbsp &nbsp &nbsp 晴天小猪从山的左下角出发，目的地为山顶，即隐者的小屋。\n','&nbsp &nbsp &nbsp &nbsp 第一行有一个数n（2&lt; =n&lt; =1000），表示山的高度。\n&nbsp &nbsp &nbsp &nbsp 从第二行至第n+1行，第i+1行有i个数，每个数表示晴天小猪在这一段山路上需要爬的时间。\n','&nbsp &nbsp &nbsp &nbsp 一个数，即晴天小猪所需要的最短时间。\n','5\n1\n2 3\n4 5 6\n10 1 7 8\n1 1 4 5 6\n','10\n','0','在山的两侧的走法略有特殊，请自己模拟一下，开始我自己都弄错了……\n','Sunnypig\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1066,'VIJOS-P1007','求出绳子的长度\n','第1行两个数：整数N(1&lt; =N&lt; =100)和实数R。\n接下来N行按逆时针顺序给出N个钉子中心的坐标\n坐标的绝对值不超过100。\n','一个数，绳子的长度，精确到小数点后2位。\n','4 1\n0.0 0.0\n2.0 0.0\n2.0 2.0\n0.0 2.0\n','14.28\n','0','如果你用比较复杂的方法AC了，请想一想有没有更加简便的方法。\n','Ural\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1067,'VIJOS-P1008','&nbsp &nbsp &nbsp &nbsp 佳佳刚进高中，在军训的时候，由于佳佳吃苦耐劳，很快得到了教官的赏识，成为了“小教官”。在军训结束的那天晚上，佳佳被命令组织同学们进行篝火晚会。一共有n个同学，编号从1到n。一开始，同学们按照1，2，……，n的顺序坐成一圈，而实际上每个人都有两个最希望相邻的同学。如何下命令调整同学的次序，形成新的一个圈，使之符合同学们的意愿，成为摆在佳佳面前的一大难题。\n\n&nbsp &nbsp &nbsp &nbsp 佳佳可向同学们下达命令，每一个命令的形式如下：\n\n&nbsp &nbsp &nbsp &nbsp (b1,&nbsp b2,...&nbsp bm&nbsp -1,&nbsp bm)\n\n&nbsp &nbsp &nbsp &nbsp 这里m的值是由佳佳决定的，每次命令m的值都可以不同。这个命令的作用是移动编号是b1，b2，……&nbsp bm&nbsp –1，bm的这m个同学的位置。要求b1换到b2的位置上，b2换到b3的位置上，……，要求bm换到b1的位置上。\n\n&nbsp &nbsp &nbsp &nbsp 执行每个命令都需要一些代价。我们假定如果一个命令要移动m个人的位置，那么这个命令的代价就是m。我们需要佳佳用最少的总代价实现同学们的意愿，你能帮助佳佳吗?\n\n&nbsp &nbsp &nbsp &nbsp 对于30%的数据，n&nbsp &lt; =&nbsp 1000；\n\n&nbsp &nbsp &nbsp &nbsp 对于全部的数据，n&nbsp &lt; =&nbsp 50000。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行是一个整数n（3&nbsp &lt; =&nbsp n&nbsp &lt; =&nbsp 50000），表示一共有n个同学。其后n行每行包括两个不同的正整数，以一个空格隔开，分别表示编号是1的同学最希望相邻的两个同学的编号，编号是2的同学最希望相邻的两个同学的编号，……，编号是n的同学最希望相邻的两个同学的编号。\n','&nbsp &nbsp &nbsp &nbsp 输出包括一行，这一行只包含一个整数，为最小的总代价。如果无论怎么调整都不能符合每个同学的愿望，则输出-1。\n','4\n3 4\n4 3\n1 2\n1 2\n','2\n','0','','NOIp2005&nbsp 第三题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1068,'VIJOS-P1009','&nbsp &nbsp &nbsp &nbsp 话说西汉时期，汉武帝刘彻派遣张骞出使西域，欲同月氏国结交而共驱匈奴。同时，月氏国也欲同大汉结交，也派出使者康破伦出使大汉，可是因为月氏国对于大汉的认知甚少，康破伦同样向西出使大汉。一开始，张骞从大汉出发，康破伦从月氏国出发，两人都在同一纬度线上，张骞所处的经度为x，康破伦所处的经度为y；接下来，两人同时向西走，而且只能向西走，张骞每天走m公里，康破伦每天走n公里，且每天走路的速度不变，也不停下来休息；这样两人就在这一条长为L的纬度线上一直向西走。问：过了多少天之后张骞和康破伦会碰面，并磋商两国结交之事（所谓碰面，是指两人处在同一经度上）。\n&nbsp &nbsp &nbsp &nbsp 这下，康熙犯难了，他还是个不大的青年，怎么可能做得出这么难的题目；但是，他又是统领全国的帝皇，怎么能在老师面前丢这么大一个面子。康熙想：不行！一定得把这个题做出来！（然后就有了下面这段记录）\n&nbsp &nbsp &nbsp &nbsp 第一天，……\n&nbsp &nbsp &nbsp &nbsp 第二天，…………\n&nbsp &nbsp &nbsp &nbsp 第三天，………………\n&nbsp &nbsp &nbsp &nbsp 第四天，……………………\n&nbsp &nbsp &nbsp &nbsp 第五天，…………………………\n&nbsp &nbsp &nbsp &nbsp 第六天，………………………………\n&nbsp &nbsp &nbsp &nbsp 第七天，……………………………………！！！！！！！\n&nbsp &nbsp &nbsp &nbsp 啊！第七天，康熙终于打了7个感叹号，得出了一个重要的结论！！！！！那就是——做不出来。（汗），没办法，他只有请教你，他的挚友，帮他解决这一难题。康熙答应你，如果你把这一题做出来了，你将得到御赐赏银一万万两！$$$$$$$$-$$$$$$$$。为了改变你生活的现状——衣衫褴褛、闻鼠起舞、蟑螂为伴，你下定了决心——我一定得把这题解决！\n','&nbsp &nbsp &nbsp &nbsp 输入只包括一行5个整数x，y，m，n，L\n&nbsp &nbsp &nbsp &nbsp 其中0&lt; x≠y&nbsp &lt; &nbsp =2000000000，0&nbsp &lt; &nbsp m、n&nbsp &lt; &nbsp =2000000000，0&nbsp &lt; &nbsp L&nbsp &lt; &nbsp =2100000000。\n','&nbsp &nbsp &nbsp &nbsp 输出碰面所需要的天数，如果永远不可能碰面则输出一行&quot; Impossible&quot; 。\n','1 2 3 4 5\n','4\n','0','','From&nbsp PKU&nbsp 1061\n','2017-04-30 04:26:32',0,128,'N',0,0,0),(1069,'VIJOS-P1010','&nbsp &nbsp &nbsp &nbsp 话说乾隆带着他的宰相刘罗锅和你出巡江南，被杭州城府邀请去听戏，至于什么戏，那就不知了。乾隆很高兴，撒酒与君臣共享。三更欲回住处，可是乾隆这人挺怪，他首先要到西湖边散散步，而且命令不准有人跟着他。\n&nbsp &nbsp &nbsp &nbsp 小醉，步于西湖岸，停于断桥前，突闻琴声悠悠，歌儿婉婉。这乐曲不哀伤不愁怅，少了一分怨女的羁绊，多了一分少女的期盼。乾隆走上前去，视其背影，为一女子手抚古琴，悠悠而唱。可是这么晚了，小女怎么还不回家呢，莫非是她起早床？乾隆走上前去，小声问道：“伊为何未宿？”，小女沉默片刻，转身而来。顿时，顿时，顿时！！！！！乾隆惊呆了！！！！哇！！！！噻！！！！！！这人，这伊！！！！原来！！！！！！！不是一个美女（狂汗ing）。小女并未回答她的话，只是与乾隆侃了侃诗。乾隆兴哉，问其曰：“不知偶能助伊否？”，小女曰：“偶无所以助，且有一事相求，愿君能解之。”\n&nbsp &nbsp &nbsp &nbsp 乾隆一看，立刻晕到在地，片刻而起，曰：“明日必解之”，且去。\n&nbsp &nbsp &nbsp &nbsp 回到家中，乾隆夜召你“入寝”，曰：“如此姑娘，如此情调，如此罗曼蒂克，竟然丢一个如此煞风景之问”，一边发气，一边把这个问题交给你。你一看，顿然发现，原来是用蝌蚪文写的：\n&nbsp &nbsp &nbsp &nbsp Problems&nbsp involving&nbsp the&nbsp computation&nbsp of&nbsp exact&nbsp values&nbsp of&nbsp very&nbsp large&nbsp magnitude&nbsp and&nbsp precision&nbsp are&nbsp common.&nbsp For&nbsp example,&nbsp the&nbsp computation&nbsp of&nbsp the&nbsp national&nbsp debt&nbsp is&nbsp a&nbsp taxing&nbsp experience&nbsp for&nbsp many&nbsp computer&nbsp systems.&nbsp \n&nbsp &nbsp &nbsp &nbsp This&nbsp problem&nbsp requires&nbsp that&nbsp you&nbsp write&nbsp a&nbsp program&nbsp to&nbsp compute&nbsp the&nbsp exact&nbsp value&nbsp of&nbsp Rn&nbsp where&nbsp R&nbsp is&nbsp a&nbsp real&nbsp number&nbsp (&nbsp 0.0&nbsp &lt; &nbsp R&nbsp &lt; =&nbsp 9999.9)&nbsp and&nbsp n&nbsp is&nbsp an&nbsp integer&nbsp such&nbsp that&nbsp 0&nbsp &lt; &nbsp n&nbsp &lt; =&nbsp 200.&nbsp \n&nbsp &nbsp &nbsp &nbsp 此时的你，已经是皇帝身边的小太监，自然有必要为皇上解决此题。\n','&nbsp &nbsp &nbsp &nbsp The&nbsp input&nbsp will&nbsp consist&nbsp of&nbsp a&nbsp set&nbsp (less&nbsp than&nbsp 11)&nbsp of&nbsp pairs&nbsp of&nbsp values&nbsp for&nbsp R&nbsp and&nbsp n.&nbsp The&nbsp R&nbsp value&nbsp will&nbsp occupy&nbsp columns&nbsp 1&nbsp through&nbsp 6,&nbsp and&nbsp the&nbsp n&nbsp value&nbsp will&nbsp be&nbsp in&nbsp columns&nbsp 8&nbsp and&nbsp 9.\n','&nbsp &nbsp &nbsp &nbsp The&nbsp output&nbsp will&nbsp consist&nbsp of&nbsp one&nbsp line&nbsp for&nbsp each&nbsp line&nbsp of&nbsp input&nbsp giving&nbsp the&nbsp exact&nbsp value&nbsp of&nbsp R^n.&nbsp Leading&nbsp zeros&nbsp should&nbsp be&nbsp suppressed&nbsp in&nbsp the&nbsp output.&nbsp Insignificant&nbsp trailing&nbsp zeros&nbsp must&nbsp not&nbsp be&nbsp printed.&nbsp Don\'t&nbsp print&nbsp the&nbsp decimal&nbsp point&nbsp if&nbsp the&nbsp result&nbsp is&nbsp an&nbsp integer.\n','95.123  2\n0.4321  5\n5.1234  7\n6.7592  3\n98.999  5\n1.0100 10\n','9048.385129\n.01506334182914325601\n92663.3181348508776705891407804544\n308.806114738688\n9509420210.697891990494999\n1.10462212541120451001\n','0','','Vivian&nbsp Snow\n','2017-04-30 04:26:32',0,128,'N',0,0,0),(1070,'VIJOS-P1011','&nbsp &nbsp &nbsp &nbsp 顺治喜欢滑雪，这并不奇怪，&nbsp 因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待太监们来载你。顺治想知道载一个区域中最长的滑坡。\n&nbsp &nbsp &nbsp &nbsp 区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子：\n\n\n&nbsp &nbsp &nbsp &nbsp &nbsp 1&nbsp &nbsp 2&nbsp &nbsp 3&nbsp &nbsp 4&nbsp 5\n&nbsp &nbsp &nbsp &nbsp 16&nbsp 17&nbsp 18&nbsp 19&nbsp 6\n&nbsp &nbsp &nbsp &nbsp 15&nbsp 24&nbsp 25&nbsp 20&nbsp 7\n&nbsp &nbsp &nbsp &nbsp 14&nbsp 23&nbsp 22&nbsp 21&nbsp 8\n&nbsp &nbsp &nbsp &nbsp 13&nbsp 12&nbsp 11&nbsp 10&nbsp 9\n\n&nbsp &nbsp &nbsp &nbsp 顺治可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。在上面的例子中，一条可滑行的滑坡为24-17-16-1。当然25-24-23-...-3-2-1更长。事实上，这是最长的一条。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行表示区域的行数R和列数C(1&nbsp &lt; =&nbsp R,C&nbsp &lt; =&nbsp 500)。下面是R行，每行有C个整数，代表高度h，0&lt; =h&lt; =10000。\n','&nbsp &nbsp &nbsp &nbsp 输出最长区域的长度。\n','5 5\n1 2 3 4 5\n16 17 18 19 6\n15 24 25 20 7\n14 23 22 21 8\n13 12 11 10 9\n','25\n','0','','Vivian&nbsp Snow\n','2017-04-30 04:26:32',0,128,'N',0,0,0),(1071,'VIJOS-P1012','&nbsp &nbsp &nbsp &nbsp 话说雍正为了实施促进城市间沟通的政策，他计划在所有的大城市里挑选两个城市，在两个城市之间修建一条运河，这条运河要求是笔直的，以加强这两个城市的经济往来。但雍正希望这条运河长度越短越好，他请来了宰相和大学士帮他解决这个问题——到底挑哪两个大城市，在其间建造运河，使得其长度最小，最小为多少？可是经过长时间的计算和判断，仍然没有得出结果。此时，雍正想到了当初为康熙解决难题的你，是如此的智慧，如此的聪明绝顶。他亲自来到茅厕，找到了你（你当时已然是一个扫厕所的了），希望你能帮他解决这个问题，必定“厚”谢。你欣然答应了。\n&nbsp &nbsp &nbsp &nbsp 雍正将大致的情况告诉了你，并且说：大清一共有n个大城市，所有的大城市都不在同一个地点，同时我们对这n个城市从1到n进行编号；对于一个城市k，他有两个属性，一个是Xk，一个是Yk，分别表示这个城市所处的经度和纬度。请你告诉他问题的结果：L，即运河长度。（你可以假定地球是平面的）\n','&nbsp &nbsp &nbsp &nbsp 第1行，一个整数n。\n&nbsp &nbsp &nbsp &nbsp 从第2行到n+1行，按照i从小到大顺序，每行两个整数Xi，Yi，代表编号为i的城市的经度和纬度。\n&nbsp &nbsp &nbsp &nbsp 其中2&lt; =n&nbsp &lt; =100000，1&lt; =Xi,Yi&lt; 2^31。\n','&nbsp &nbsp &nbsp &nbsp 一个实数L（保留三位小数）。\n','2\n1 1\n2 2\n','1.414\n','0','','Vivian&nbsp Snow\n','2017-04-30 04:27:14',0,128,'N',0,0,0),(1072,'A MST Problem','<p>It is just a mining spanning tree ( 最小生成树 ) problem, what makes you a little difficult is that you are in a 3D space.</p>','<div>The first line of the input contains the number of test cases in the file. And t he first line of each case</div>\n<div>contains one integer numbers n(0&lt;n&lt;30) specifying the number of the point . The n next n line s, each line</div>\n<div>contain s Three Integer Numbers xi,yi and zi, indicating the position of point i.</div>','<p>For each test case, output a line with the answer, which should accurately rounded to two decimals .</p>\n<p></p>','2\n2\n1 1 0\n2 2 0\n3\n1 2 3\n0 0 0\n1 1 1','1.41\n3.97','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1073,'Border ','<div>You are to write a program that draws a border around a closed path into a bitmap, as displayed in the</div>\n<div>following figure:</div>\n<div><img width=\"303\" height=\"306\" alt=\"\" src=\"/admin/../upload/pimg1073_1.png\" /></div>\n<div>The path is closed and runs along the grid lines, i.e. between the squares of the grid. The path runs</div>\n<div>counter-clockwise, so if following the path is considered as going &rdquo; forward &rdquo; , the border pixels are always</div>\n<div>to the &rdquo; right &rdquo; of the path. The bitmap always covers 32 by 32 squares and has its lower left corner at (0,0).</div>\n<div>You can safely assume that the path never touches the bounding rectangle of the bitmap and never</div>\n<div>touches or crosses itself. Note that a bit gets set if it is on the outside of the area surrounded by the path</div>\n<div>and if at least one of its edges belongs to the path, but not if only one of its corners is in the path. (A look</div>\n<div>at the convex corners in the figure should clarify that statement.)</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. Each test case that follows</div>\n<div>consists of two lines. The first line of each case contains two integer numbers x and y specifying the</div>\n<div>starting point of the path. The second line contains a string of variable length. Every letter in the string</div>\n<div>symbolizes a move of length one along the grid. Only the letters `W\' (``west\'\'), `E\' (``east\'\'), `N\' (``north\'\'),</div>\n<div>`S\' (``south\'\'), and `.\' (``end of path\'\', no move) appear in the string. The end-of-path character (`.\') is&nbsp;immediately followed by the end of the line.</div>\n<div></div>\n<p></p>','<div>For each test case, output a line with the number of the case (`Bitmap #1\', `Bitmap #2\', etc.). For each</div>\n<div>row of the bitmap from top to bottom, print a line where you print a character for every bit in that row</div>\n<div>from left to right. Print an uppercase `X\' for set bits and a period `.\' for unset bits. Output a blank line</div>\n<div>after each bitmap.</div>\n<p></p>','1\n2 1\nEENNWNENWWWSSSES.','Bitmap #1\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n.XXX............................\nX...X...........................\nX..X............................\nX...X...........................\n.X..X...........................\n..XX............................\n','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1074,'C hicken and rabbit s','<div>Chicken and rabbits are in a same cage. As we all know, chicken has two legs but rabbit has four. Now</div>\n<div>we know the number of legs in the cage is A, please tell me how many animals may in the cage at least</div>\n<div>and at most.</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. Each test case that follows</div>\n<div>consists of one lines. each case contains only one integer numbers A specifying the total legs in the</div>\n<div>cage .</div>\n<p></p>','<p>For each test case, print a line contains the answer</p>\n<p></p>','2\n3\n20','0 0\n5 10','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1075,'Diamond ','<div>Diamond mine is a mini-game which is played on an 8 * 8 board as you can see below.</div>\n<div><img width=\"219\" height=\"213\" alt=\"\" src=\"/admin/../upload/pimg1075_1.png\" /></div>\n<div><img width=\"0\" height=\"0\" alt=\"\" src=\"/admin/../upload/pimg1075_2.png\" /></div>\n<div>The board is filled with different colors of diamonds. The player can make one move at a time. A move is</div>\n<div>legal if it swaps two adjacent diamonds(not diagonally) and after that, there are three or more adjacent</div>\n<div>diamonds in a row or column with the same color. Those diamonds will be taken away and new</div>\n<div>diamonds will be put in their positions. The game continues until no legal moves exist.</div>\n<div>Given the board description. You are going to determine whether a move is legal.</div>\n<p></p>','<div>The input contains several cases. Each case has exactly 9 lines. The first 8 lines each contains a string</div>\n<div>of 8 characters. The characters are \'R\'(Red), \'O\'(Orange), \'G\'(Green), \'P\'(Purple), \'W\'(White), \'Y\'(Yellow)</div>\n<div>or \'B\'(Blue). All characters are uppercase. No 3 diamonds of the same color are initially in adjacent</div>\n<div>positions in a row or column. The last line has 4 integers in the form &quot; row1 column1 row2 column2&quot;</div>\n<div>describing the postions of the 2 diamonds that the player wants to swap. Rows are marked 1 to 8</div>\n<div>increasingly from top to bottom while columns from left to right. Input is terminated by EOF.</div>\n<p></p>','<p>For each case, output &quot;Ok!&quot; if the move is legal or &quot;Illegal move!&quot; if it is not.</p>\n<p></p>','PBPOWBGW\nRRPRYWWP\nYGBYYGPP\nOWYGGRWB\nGBBGBGGR\nGBWPPORG\nPPGORWOG\nWYWGYWBY\n4 3 3 3\nPBPOWBGW\nRRPRYWWP\nYGBYYGPP\nOWYGGRWB\nGBBGBGGR\nGBWPPORG\nPPGORWOG\nWYWGYWBY\n5 5 6 5','Ok!\nIllegal move!','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1076,'Easy List Operations','<div>A list is a sequence of or more elements, expressed in this form: [a 1 , a 2 , a 3 , ... , a n ], where each a i</div>\n<div>is or more consecutive digits or lowercase letters. i.e. each list begins with a left square bracket,</div>\n<div>then zero or more elements separated by a single comma, followed by a right square bracket. There will</div>\n<div>be no whitespace characters (spaces, TABs etc) within a list.</div>\n<div>In this problem, we use two list operations: append (++) and remove (--).</div>\n<div>1. A ++ B: append elements in B to the end of A.</div>\n<div>2. A -- B: remove all the elements in B, from A. If something appears more than once in B, remove it that</div>\n<div>many times in A. If there are many equal elements in A to choose from, remove them from left to right</div>\n<div>(until all occurrences are removed, or there is no need to remove more elements).</div>\n<div>Your task is to write a calculator, evaluating simple expressions or the form &quot;list1 ++ list2&quot; or &quot;list1 --</div>\n<div>list2&quot;.</div>\n<p></p>','<div>There will be at most 10 expressions, one in each line, each having the form &quot;list1 ++ list2&quot; or &quot;list1 --</div>\n<div>list2&quot;, with no more than 80 characters in total (not counting the newline character). There will be exactly</div>\n<div>two spaces in each line: one before and one after the operator. Input ends with a single <strong>dot</strong>. The input is</div>\n<div>guaranteed to satisfy the restrictions stated above.</div>\n<p></p>','<p>For each expression, print its result on a single line.</p>\n<p></p>','[1,2,3] ++ [1,2,3]\n[a,b,c,t,d,e,t,x,y,t] -- [t]\n[a,b,c,t,d,e,t,x,y,t] -- [t,t,t,t]\n[123] ++ [456]\n.','[1,2,3,1,2,3]\n[a,b,c,d,e,t,x,y,t]\n[a,b,c,d,e,x,y]\n[123,456]','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1077,'Fortun e Test','<div>A lot of people have played fortune Test(or called RP Test) before. Let &rsquo; s create a new Test below.</div>\n<div>Suppose the worth of a=1, b=4,c=9 &hellip; and z=26^2. Then abc can describe as 149,and abd describe as</div>\n<div>1416. As it is too large ,we take it mod 101 as ours fortune worth. S o abd has only 2 RP. Now I give you</div>\n<div>a name, please tell me the worth of it.</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. Each test case that follows</div>\n<div>consists of one lines. each case contains only one string s specifying a person &rsquo; s name, which only</div>\n<div>contains lower-case .</div>\n<p></p>','<p>For each test case, print a line contains the answer.</p>\n<p></p>','1\na','1','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1078,'Give me the answer','<div>Farmer John commanded his cows to search for different sets of numbers that sum to a given number.</div>\n<div>The cows use only numbers that are an integer power of 2. Here are the possible sets of numbers that</div>\n<div>sum to 7:</div>\n<div>1) 1+1+1+1+1+1+1</div>\n<div>2) 1+1+1+1+1+2</div>\n<div>3) 1+1+1+2+2</div>\n<div>4) 1+1+1+4</div>\n<div>5) 1+2+2+2</div>\n<div>6) 1+2+4</div>\n<div>Help FJ count all possible representations for a given integer N (1 &lt;= N &lt;= 1 ,000,000)</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. And t he first line of each case</div>\n<div>contains one integer numbers n</div>\n<p></p>','<p>For each test case, output a line with the ans % 1000000000.</p>\n<p></p>','1\n7','6','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1079,'Hidden Number','<p>Your job is to find out the secret number hidden in a matrix, each of whose element is a digit (\'0\'-\'9\') or a letter (\'A\'-\'Z\'). You can see an example matrix in Figure 1.&nbsp;</p>\n<p>&nbsp;<img width=\"497\" height=\"337\" alt=\"\" src=\"/admin/../upload/pimg1079_1.png\" /></p>\n<p></p>\n<div><span style=\"font-size:12.0pt;\">The hidden number and other non-secret ones are coded in a matrix as sequences of digits in a decimal format. You should only consider sequences of digits D1 D2 ... Dn such that Dk+1 (1 &lt;= k &lt; n) is either right next to or immediately below Dk in the matrix. The secret you are seeking is the largest number coded in this manner. </span></div>\n<div><span style=\"font-size:12.0pt;\">Four coded numbers in the matrix in Figure 1, i.e., 908820, 23140037, 23900037, and 9930, are depicted in Figure 2. As you may see, in general, two or more coded numbers may share a common subsequence. In this case, the secret number is 23900037, which is the largest among the set of all coded numbers in the matrix.&nbsp;</span></div>\n<div></div>\n<div><img width=\"542\" height=\"419\" alt=\"\" src=\"/admin/../upload/pimg1079_2.png\" /></div>\n<div>In contrast, the sequences illustrated in Figure 3 should be excluded: 908A2 includes a letter; the fifth digit of 23149930 is above the fourth; the third digit of 90037 is below right of the second.</div>\n<div></div>\n<div><img width=\"563\" height=\"346\" alt=\"\" src=\"/admin/../upload/pimg1079_3.png\" /></div>\n<div>Write a program to figure out the secret number from a given matrix.</div>\n<p class=\"MsoNormal\"><span lang=\"EN-US\" style=\"font-size:12.0pt;font-family:宋体;mso-bidi-font-family:宋体\"><o:p></o:p></span></p>\n<div></div>\n<p class=\"MsoNormal\"><span lang=\"EN-US\" style=\"font-size:12.0pt;font-family:宋体;mso-bidi-font-family:宋体\"><o:p></o:p></span></p>\n<div></div>\n<p></p>','<div>The input consists of multiple data sets, each data set representing a matrix. The format of each data</div>\n<div>set is as follows.</div>\n<div>W H</div>\n<div>C11C12 ... C1W</div>\n<div>C21C22 ... C2W</div>\n<div>...</div>\n<div>CH1CH2 ... CHW</div>\n<div>In the first line of a data set, two positive integers W and H are given. W indicates the width (the number</div>\n<div>of columns) of the matrix, and H indicates the height (the number of rows) of the matrix. W+H is less</div>\n<div>than or equal to 70.</div>\n<div>H lines follow the first line, each of which corresponds to a row of the matrix in top to bottom order. The</div>\n<div>i-th row consists of W characters Ci1Ci2 ... CiW in left to right order. You may assume that the matrix</div>\n<div>includes at least one non-zero digit.</div>\n<div>Following the last data set, two zeros in a line indicate the end of the input.</div>\n<p></p>','<p>For each data set, print the hidden number on a line. Leading zeros should be suppressed.</p>\n<p></p>','7 4\n9R2A993\n0E314A0\n8A900DE\n820R037\n6 7\nJH03HE\nID7722\n0DA1AH\n30C9G5\n99971A\nCA7EAI\nAHLBEM\n20 2\nA1234567891234CBDEGH\nBDEDF908034265091499\n0 0\n','23900037\n771971\n12345908034265091499','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1080,'I think it\'s hard','<div>Xiao Ming is only seven years old, Now I give him some numbers, and ask him what is the second</div>\n<div>largest sum if he can choose a part of them. For example, if I give him 1 、 2 、 3 ， then he should tell</div>\n<div>me 5 as 6 is the largest and 5 is the second. I think it is too hard for him, isn &rsquo; t it?</div>\n<p></p>','<div>Standard input will contain multiple test cases. The first line of the input is a single integer T (1 &lt;= T &lt;=</div>\n<div>10) which is the number of test cases. And it will be followed by T consecutive test cases.</div>\n<div>Each test case starts with a line containing an integer N (1&lt;N&lt;10) , the number I give Xiao Ming . The</div>\n<div>second line contains N Integer numbers ai (-10&lt;ai&lt;10),</div>\n<p></p>','<p>For each test case, output the answer.</p>\n<p></p>','2\n3\n1 2 3\n4\n0 1 2 3','5\n5','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1081,'Just Pour the Water','<div>Shirly is a very clever girl. Now she has two containers (A and B), each with some water. Every minute,</div>\n<div>she pours half of the water in A into B, and simultaneous pours half of the water in B into A. As the</div>\n<div>pouring continues, she finds it is very easy to calculate the amount of water in A and B at any time. It is</div>\n<div>really an easy job :).</div>\n<div>But now Shirly wants to know how to calculate the amount of water in each container if there are more</div>\n<div>than two containers. Then the problem becomes challenging.</div>\n<div>Now Shirly has N (2 &lt;= N &lt;= 20) containers (numbered from 1 to N ). Every minute, each container is</div>\n<div>supposed to pour water into another K containers ( K may vary for different containers). Then the water</div>\n<div>will be evenly divided into K portions and accordingly poured into anther K containers. Now the question</div>\n<div>is: how much water exists in each container at some specified time?</div>\n<div>For example, container 1 is specified to pour its water into container 1, 2, 3. Then in every minute,</div>\n<div>container 1 will pour its 1/3 of its water into container 1, 2, 3 separately (actually, 1/3 is poured back to</div>\n<div>itself, this is allowed by the rule of the game).</div>\n<p></p>','<div>Standard input will contain multiple test cases. The first line of the input is a single integer T (1 &lt;= T &lt;=</div>\n<div>10) which is the number of test cases. And it will be followed by T consecutive test cases.</div>\n<div>Each test case starts with a line containing an integer N , the number of containers. The second line</div>\n<div>contains N floating numbers, denoting the initial water in each container. The following N lines describe</div>\n<div>the relations that one container(from 1 to N ) will pour water into the others. Each line starts with an</div>\n<div>integer K (0 &lt;= K &lt;= N ) followed by K integers. Each integer ([1, N ]) represents a container that should</div>\n<div>pour water into by the current container. The last line is an integer M (1&lt;= M &lt;= 1,000,000,000) denoting</div>\n<div>the pouring will continue for M minutes.</div>\n<p></p>','<div>For each test case, output contains N floating numbers to two decimal places, the amount of water</div>\n<div>remaining in each container after the pouring in one line separated by one space. There is no space at</div>\n<div>the end of the line.</div>\n<p></p>','1\n2\n100.00 100.00\n1 2\n2 1 2\n2','75.00 125.00','0','<div>the capacity of the container is not limited and all the pouring at every minute is processed at the</div>\n<div>same time.</div>\n<p></p>','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1082,'2^k进制数','<p><font face=\"Times New Roman\">设r是个2^k 进制数，并满足以下条件： <br />\n（1）r至少是个2位的2^k 进制数。 <br />\n（2）作为2^k 进制数，除最后一位外，r的每一位严格小于它右边相邻的那一位。 <br />\n（3）将r转换为2进制数q后，则q的总位数不超过w。 <br />\n在这里，正整数k（1&le;k&le;9）和w（k〈w&le;30000）是事先给定的。 <br />\n<br />\n问：满足上述条件的不同的r共有多少个？ <br />\n我们再从另一角度作些解释：设S是长度为w 的01字符串（即字符串S由w个&ldquo;0&rdquo;或&ldquo;1&rdquo;组成），S对应于上述条件（3）中的q。将S从右起划分为若干个长度为k 的段，每段对应一位2^k进制的数，如果S至少可分成2段，则S所对应的二进制数又可以转换为上述的2^k 进制数r。 <br />\n例：设k=3，w=7。则r是个八进制数（2^3=8）。由于w=7，长度为7的01字符串按3位一段分，可分为3段（即1，3，3，左边第一段只有一个二进制位），则满足条件的八进制数有： <br />\n2位数：高位为1：6个（即12，13，14，15，16，17），高位为2：5个，&hellip;，高位为6：1个（即67）。共6+5+&hellip;+1=21个。 <br />\n3位数：高位只能是1，第2位为2：5个（即123，124，125，126，127），第2位为3：4个，&hellip;，第2位为6：1个（即167）。共5+4+&hellip;+1=15个。 <br />\n所以，满足要求的r共有36个。 </font></p>','<p><font face=\"Times New Roman\">只有1行，为两个正整数，用一个空格隔开： <br />\nk w </font></p>','<p><font face=\"Times New Roman\">1行，是一个正整数，为所求的计算结果，即满足条件的不同的r的个数（用十进制数表示），要求最高位不得为0，各数字之间不得插入数字以外的其他字符（例如空格、换行符、逗号等）。 <br />\n（提示：作为结果的正整数可能很大，但不会超过200位） </font></p>','3  7','36','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1083,'Cylinder','<p><font face=\"Times New Roman\">Using a sheet of paper and scissors, you can cut out two faces to form a cylinder in the following way: <br />\n<br />\n<br />\nCut the paper horizontally (parallel to the shorter side) to get two rectangular parts. <br />\n<br />\nFrom the first part, cut out a circle of maximum radius. The circle will form the bottom of the cylinder. <br />\n<br />\nRoll the second part up in such a way that it has a perimeter of equal length with the circle\'s circumference, and attach one end of the roll to the circle. Note that the roll may have some overlapping parts in order to get the required length of the perimeter. <br />\n<br />\nGiven the dimensions of the sheet of paper, can you calculate the biggest possible volume of a cylinder which can be constructed using the procedure described above? </font><br />\n<br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">The input consists of several test cases. Each test case consists of two numbers w and h (1 &le; w &le; h &le; 100), which indicate the width and height of the sheet of paper. <br />\n<br />\nThe last test case is followed by a line containing two zeros. <br />\n</font></p>','<p><font face=\"Times New Roman\">For each test case, print one line with the biggest possible volume of the cylinder. Round this number to 3 places after the decimal point. </font><br />\n<br />\n</p>','10 10\n10 50\n10 30\n0 0\n\n','54.247\n785.398\n412.095\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1084,'C语言考试练习题_一元二次方程','<p><font size=\"3\" face=\"Times New Roman\">解一元二次方程ax^2+bx+c=0的解。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">\n<p><font size=\"3\" face=\"Times New Roman\">a,b,c的值。</font></p>\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">两个根X1和X2，其中X1&gt;=X2。。 <br />\n结果保留两位小数</font></p>','1 5 -2\n','0.37 -5.37\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1085,'C语言考试练习题_保留字母','<p><font size=\"3\" face=\"Times New Roman\">编一个程序，输入一个字符串，将组成字符串的所有非英文字母的字符删除后输出。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个字符串，长度不超过80个字符</font></p>','<p><font size=\"3\" face=\"Times New Roman\">删掉非英文字母后的字符串。</font></p>','abc123+xyz.5\n','abcxyz\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1086,'C语言考试练习题_排列','<p><font size=\"3\" face=\"Times New Roman\">有4个互不相同的数字，输出由其中三个不重复数字组成的排列。 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">4个整数。</font></p>','<pre><p><font size=\"3\" face=\"Times New Roman\">所有排列。</font></p></pre>','1 2 3 4\n','1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1\n1 2 4\n1 4 2\n2 1 4\n2 4 1\n4 1 2\n4 2 1\n1 3 4\n1 4 3\n3 1 4\n3 4 1\n4 1 3\n4 3 1\n2 3 4\n2 4 3\n3 2 4\n3 4 2\n4 2 3\n4 3 2\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1087,'DNA','<p><font face=\"Times New Roman\">小强从小就喜欢生命科学，他总是好奇花草鸟兽从哪里来的。终于， 小强上中学了，接触到了神圣的名词--DNA.它有一个双螺旋的结构。这让一根筋的小强抓破头皮，&ldquo;要是能画出来就好了&rdquo; 小强喊道。现在就请你帮助他吧</font></p>','<p><font face=\"Times New Roman\">输入包含多组测试数据。第一个整数N（N&lt;=15）,N表示组数，每组数据包含两个整数a,b。a表示一个单位的DNA串的行数，a为奇数且 3&lt;=a&lt;=39。b表示重复度(1&lt;=b&lt;=20)。</font></p>','<p><font face=\"Times New Roman\">输出DNA的形状，每组输出间有一空行。 </font></p>','2\n3 1\n5 4','X X\n X\nX X\n\nX   X\n X X\n  X\n X X\nX   X\n X X\n  X\n X X\nX   X\n X X\n  X\n X X\nX   X\n X X\n  X\n X X\nX   X\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1088,'IP判断','<p><font size=\"3\" face=\"Times New Roman\">在基于Internet的程序中，我们常常需要判断一个IP字符串的合法性。  <br />\n合法的IP是这样的形式：  <br />\nA.B.C.D  <br />\n其中A、B、C、D均为位于[0, 255]中的整数。为了简单起见，我们规定这四个整数中不允许有前导零存在，如001这种情况。  <br />\n现在，请你来完成这个判断程序吧^_^ </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入由多行组成，每行是一个字符串，输入由&ldquo;End of file&rdquo;结束。  <br />\n字符串长度最大为30，且不含空格和不可见字符</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每一个输入，单独输出一行  <br />\n如果该字符串是合法的IP，输出Y，否则，输出N</font></p>','1.2.3.4\na.b.c.d\n267.43.64.12\n12.34.56.bb\n210.43.64.129\n-123.4.5.6','Y\nN\nN\nN\nY\nN','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1089,'Jam的计数法','<p><font size=\"3\" face=\"Times New Roman\">Jam是个喜欢标新立异的科学怪人。他不使用阿拉伯数字计数，而是使用小 写英文字母计数，他觉得这样做，会使世界更加丰富多彩。在他的计数法中，每个数字的位数都是相同的（使用相同个数的字母），英文字母按原先的顺序，排在前 面的字母小于排在它后面的字母。我们把这样的&ldquo;数字&rdquo;称为Jam数字。在Jam数字中，每个字母互不相同，而且从左到右是严格递增的。每次，Jam还指定 使用字母的范围，例如，从2到10，表示只能使用{b,c,d,e,f,g,h,i,j}这些字母。如果再规定位数为5，那么，紧接在Jam数字 &ldquo;bdfij&rdquo;之后的数字应该是&ldquo;bdghi&rdquo;。（如果我们用U、V依次表示Jam数字&ldquo;bdfij&rdquo;与&ldquo;bdghi&rdquo;，则U〈V，且不存在Jam数字 P，使U〈P〈V）。你的任务是：对于从文件读入的一个Jam数字，按顺序输出紧接在后面的5个Jam数字，如果后面没有那么多Jam数字，那么有几个就 输出几个。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">有2行，第1行为3个正整数，用一个空格隔开：  <br />\ns t w  <br />\n（其中s为所使用的最小的字母的序号，t为所使用的最大的字母的序号。w为数字的位数，这3个数满足：1&le;s〈t&le;26, 2&le;w&le;t-s ）  <br />\n第2行为具有w个小写字母的字符串，为一个符合要求的Jam数字。  <br />\n所给的数据都是正确的，不必验证。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">最多为5行，为紧接在输入的Jam数字后面的5个Jam数字，如果后面没有那么多Jam数字，那么有几个就输出几个。每行只输出一个Jam数字，是由w个小写字母组成的字符串，不要有多余的空格。</font></p>','2 10 5\nbdfij','bdghi\nbdghj\nbdgij\nbdhij','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1090,'K-进制数','<p><font size=\"3\" face=\"Times New Roman\">考虑包含N位数字的K-进制数. 定义一个数有效, 如果其K-进制表示不包含两连续的0.</font></p>\n<p><font size=\"3\" face=\"Times New Roman\">考虑包含N位数字的K-进制数. 定义一个数有效, 如果其K-进制表示不包含两连续的0.  <br />\n<br />\n例:  <br />\n1010230 是有效的7位数  <br />\n1000198 无效  <br />\n0001235 不是7位数, 而是4位数.  <br />\n<br />\n给定两个数N和K, 要求计算包含N位数字的有效K-进制数的总数.  <br />\n<br />\n假设2 &lt;= K &lt;= 10; 2 &lt;= N; 4 &lt;= N+K &lt;= 18.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">两个十进制整数N和K</font></p>','<p>十进制表示的结果</p>','2\n10','90','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1091,'Tom数','<p><font face=\"Times New Roman\">正整数的各位数字之和被Tom称为Tom数。求输入数（&lt;2^32）的Tom数!</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行一个整数(&lt;2^32).</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行一个输出,对应该数的各位数之和.</font></p>','12345\n56123\n82\n','15\n17\n10\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1092,'【C语言训练】\"水仙花数\"问题1','<p><font size=\"3\" face=\"Times New Roman\">判断一个数是否为&quot;水仙花数&quot;，所谓&quot;水仙花数&quot;是指这样的一人数：其各位数字的立方和等于该数本身。例如：371是一个&quot;水仙花数&quot;，371=3^3+7^3+1^3. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个三位数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1或者0(1代表此数为水仙花数,0代表此数不是水仙花数)</font></p>','371','1','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1093,'【C语言训练】\"水仙花数\"问题2','<p><font size=\"3\" face=\"Times New Roman\">输出所有的&quot;水仙花数&quot;.所谓&quot;水仙花数&quot;是指这样的一个三位数：其各位数字的立方和等于该数本身。例如：371是一个&quot;水仙花数&quot;，371=3^3+7^3+1^3.</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">输出所有的&quot;水仙花数&quot;(从小到大的顺序输出)</font></p>','','','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1094,'【C语言训练】8除不尽的数','<p><font size=\"3\" face=\"Times New Roman\">一个自然数被8除余1,所得的商被8除也余1, <br />\n再将第二次的商被8除后余7,最后得到一个商为a. <br />\n又知这上自然数被17除余4.所得的商被17除余15, <br />\n最的得到一个商是a的2倍. <br />\n<br />\n求这个自然数.</font></p>','','<p>1993</p>','','','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1095,'【C语言训练】亲密数','<p><font size=\"3\" face=\"Times New Roman\">两个不同的自然数A和B，如果整数A的全部因子(包括1，不包括A本身)之和等于B；且整数B的全部因子(包括1，不包括B本身)之和等于A，则将整数A和B称为亲密数。求3000以内的全部亲密数。</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">3000以内的全部亲密数(输出格式:(A,B)，不加换行，不加分隔符号) <br />\n一对亲密数只输出一次, 小的在前</font></p>','','(220,284)(1184,1210)(2620,2924)','0','<p><font size=\"3\" face=\"Times New Roman\">按照亲密数定义，要判断数a是否有亲密数，只要计算出a的全部因子的累加和为b，再计算b的全部因子的累加和为n，若n等于a则可判定a和b是亲密数。计算数a的各因子的算法： <br />\n用a依次对i(i=1~a/2)进行模运算，若模运算结果等于0，则i为a的一个因子；否则i就不是a的因子。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1096,'【C语言训练】列出最简真分数序列*','<p><font size=\"3\" face=\"Times New Roman\">按递增顺序依次列出所有分母为40，分子小于40的最简分数。</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">分数之间用逗号分开(含最末逗号)</font></p>','','1/40,3/40,7/40,9/40,11/40,13/40,17/40,19/40,21/40,23/40,27/40,29/40,31/40,33/40,37/40,39/40,','0','<p><font size=\"3\" face=\"Times New Roman\">对分子采用穷举法，利用最大公约数的方法，判断分子与40是否构成真分数。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1097,'【C语言训练】大、小写问题','<p><font size=\"3\" face=\"Times New Roman\">输入一串字符,将其中的大写变成小写，若不为大写则原样输出</font></p>','<p><font size=\"3\" face=\"Times New Roman\">任意字符串(长度在100以内)以回车表示输入结束</font></p>','<p><font size=\"3\" face=\"Times New Roman\">将其中的大写 输出相应的小写，若不为大写则原样输出</font></p>','A123b','a123b','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1098,'【C语言训练】委派任务*','<p><font face=\"Times New Roman\">某侦察队接到一项紧急任务，要求在A、B、C、D、E、F六个队员中尽可能多地挑若干人，但有以下限制条件： <br />\n1)A和B两人中至少去一人； <br />\n2)A和D不能一起去； <br />\n3)A、E和F三人中要派两人去； <br />\n4)B和C都去或都不去； <br />\n5)C和D两人中去一个； <br />\n6)若D不去，则E也不去。 <br />\n问应当让哪几个人去？ </font><br />\n</p>','','<p><font size=\"3\" face=\"Times New Roman\">要派出的人 <br />\n若有多个，按字母递增顺序排列，用逗号分开（含末尾逗号） <br />\n<br />\n</font></p>','','A,B,C,F,','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1099,'【C语言训练】字符串正反连接','<p><font size=\"3\" face=\"Times New Roman\">所给字符串正序和反序连接，形成新串并输出</font></p>','<p><font size=\"3\" face=\"Times New Roman\">任意字符串（长度&lt;=50）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">字符串正序和反序连接所成的新字符串</font></p>','123abc','123abccba321','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1100,'【C语言训练】尼科彻斯定理','<p><font size=\"3\" face=\"Times New Roman\">验证尼科彻斯定理，即：任何一个正整数的立方都可以写成一串连续奇数的和。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">任一正整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">该数的立方分解为一串连续奇数的和</font></p>','13','13*13*13=219=157+159+161+163+165+167+169+171+173+175+177+179+181','0','<p><font size=\"3\" face=\"Times New Roman\">本题是一个定理，我们先来证明它是成立的。  <br />\n对于任一正整数a,不论a是奇数还是偶数，整数(a&times;a-a+1)必然为奇数。  <br />\n构造一个等差数列，数列的首项为(a&times;a-a+1),等差数列的差值为2(奇数数列)，则前a项的和为：  <br />\na&times;((a&times;a-a+1))+2&times;a(a-1)/2  <br />\n=a&times;a&times;a-a&times;a+a+a&times;a-a  <br />\n=a&times;a&times;a  <br />\n定理成立。证毕。  <br />\n通过定理的证明过程可知L所要求的奇数数列的首项为(a&times;a-a+1)，长度为a。编程的算法不需要特殊设计，可按照定理的证明过直接进行验证。  </font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1101,'【C语言训练】排序问题<1>','<p><font size=\"3\" face=\"Times New Roman\">将四个整数进行从小到大的顺序排列,</font></p>','<p><font size=\"3\" face=\"Times New Roman\">四个整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">从小到大输出这四个数</font></p>','5 3 4 2\n','2 3 4 5\n\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1102,'【C语言训练】排序问题<2>','<p><font size=\"3\" face=\"Times New Roman\">将十个数进行从大到小的顺序进行排列</font></p>','<p><font size=\"3\" face=\"Times New Roman\">十个整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">以从大到小的顺序输出这个十个数</font></p>','1 2 3 4 5 6 7 8 9 10\n','10 9 8 7 6 5 4 3 2 1\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1103,'【C语言训练】数字母','<p><font size=\"3\" face=\"Times New Roman\">输入一个字符串,数出其中的字母的个数.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个字符串，不包含空格（长度小于100）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">字符串中的字母的个数</font></p>','124lfdk54AIEJ92854&%$GJ','10','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1104,'【C语言训练】斐波纳契数列','<p><font size=\"3\" face=\"Times New Roman\">斐波纳契数列  <br />\n1，1，2，3，5，8，13，21，34，55，89&hellip;&hellip;这个数列则称为&ldquo;斐波纳契数列&rdquo;，其中每个数字都是&ldquo;斐波纳契数&rdquo;。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个整数N(N不能大于40)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">由N个&ldquo;斐波纳契数&rdquo;组成的&ldquo;斐波纳契数列&rdquo;。</font></p>','6','1 1 2 3 5 8','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1105,'【C语言训练】最大数问题','<p><font size=\"3\" face=\"Times New Roman\">输入若干个整数,以-1标记输入结束。输出其中的最大数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">若干个整数。（以-1标记输入结束）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">其中的最大数</font></p>','1 2 5 7 8 6 1 -6 -1','8','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1106,'【C语言训练】求1+2!+3!+...+N!的和','<p><font size=\"3\" face=\"Times New Roman\">求1+2!+3!+...+N!的和 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">正整数N（N〈=20）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1+2!+3!+...+N!的和 (结果为整数形式)</font></p>','3','9','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1107,'【C语言训练】求PI*','','','','','','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1108,'【C语言训练】求s=a+aa+aaa+aaaa+aa...a的值','<p><font size=\"3\" face=\"Times New Roman\">求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个一位的整数。  <br />\n例如2+22+222+2222+22222(此时共有5个数相加)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数a和n（n个数相加，1&lt;= n, a&lt;=9）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">s的值</font></p>','2 2','24','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1109,'【C语言训练】求具有abcd=(ab+cd)2性质的四位数','<p><font size=\"3\" face=\"Times New Roman\">3025这个数具有一种独特的性质：将它平分为二段，即30和25，使之相加后求平方，即(30+25)2，恰好等于3025本身。请求出具有这样性质的全部四位数</font></p>','','<p><font face=\"Times New Roman\">满足题意的数全部四位数(从小到大输出,且数之间用两个空格分开) </font><br />\n<br />\n</p>','','2025  3025  9801  ','0','<p><font size=\"3\" face=\"Times New Roman\">根据题意可以采用穷举法，对所有四位数进行判断，从而筛选出符合这种性质的四位数。具体算法实现，可任取一个四位数，将其截为两部分，前两位为a，后两位为b，然后套用公式计算并判断。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1110,'【C语言训练】求函数值','<p><font size=\"3\" face=\"Times New Roman\">按如下递归公式求函数值。  <br />\nx=1时 f(x)=10；x&gt;1时 f(x)=f(x-1)+2</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整型变量x</font></p>','<p><font size=\"3\" face=\"Times New Roman\">f(x)</font></p>','10','28','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1111,'【C语言训练】求矩阵的两对角线上的元素之和','<p><font size=\"3\" face=\"Times New Roman\">求矩阵的两对角线上的元素之和</font></p>','<p><font size=\"3\" face=\"Times New Roman\">矩阵的行数N  <br />\n和一个N*N的整数矩阵a[N][N](N&lt;=10) </font></p>','<p><font size=\"3\" face=\"Times New Roman\">所输矩阵的两对角线上的元素之和</font></p>','3\n1 2 3 \n4 5 6 \n7 8 9','25','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1112,'【C语言训练】求素数问题','<p><font size=\"3\" face=\"Times New Roman\">求出1-N中的所有素数 <br />\n<br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">大于1的正整数N</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1-N中的所有素数,(以从小到大的格式输出)</font></p>','9\n','2 3 5 7 \n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1113,'【C语言训练】求车速','<p><font size=\"3\" face=\"Times New Roman\">一辆以固定速度行驶的汽车，司机在上午10点看到里程表上的读数是一个对称数(即这个数从左向右读和从右向左读是完全一样的)，为95859。两小时后里程表上出现了一个新的对称数。问该车的速度是多少？新的对称数是多少？</font></p>','','','','95959','0','<p><font size=\"3\" face=\"Times New Roman\">根据题意，设所求对称数为i，其初值为95589，对其依次递增取值，将i值的每一位分解后与其对称位置上的数进行比较，若每个对称位置上的数皆相等，则可判定i即为所求的对称数。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1114,'【C语言训练】百钱百鸡问题','<p><font size=\"3\" face=\"Times New Roman\">中国古代数学家张丘建在他的《算经》中提出了著名的&ldquo;百钱买百鸡问题&rdquo;：鸡翁一，值钱五，鸡母一，值钱三，鸡雏三，值钱一，百钱买百鸡，问翁、母、雏各几何？</font></p>','<p><font size=\"3\" face=\"Times New Roman\"><br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">给出所有的解，每组解占一行  <br />\n解的顺序：按&ldquo;字典序&rdquo;排列，即公鸡数少的在前；公鸡数相同，母鸡数少的在前  <br />\n格式:  <br />\ncock=%d,hen=%d,chicken=%d\\n</font></p>','13 14.1\n12.2 12.3\n15 18\n22.2 23.5\n33.45 33.56\n67.73 67.92','cock=0,hen=25,chicken=75\ncock=4,hen=18,chicken=78\ncock=8,hen=11,chicken=81\ncock=12,hen=4,chicken=84','0','<p><font size=\"3\" face=\"Times New Roman\">设鸡翁、鸡母、鸡雏的个数分别为x,y,z，题意给定共100钱要买百鸡，若全买公鸡最多买20只，显然x的值在0~20之间；同理，y的取值范围在0~33之间，可得到下面的不定方程：  <br />\n5x+3y+z/3=100  <br />\nx+y+z=100  <br />\n所以此问题可归结为求这个不定方程的整数解。  <br />\n由程序设计实现不定方程的求解与手工计算不同。在分析确定方程中未知数变化范围的前提下，可通过对未知数可变范围的穷举，验证方程在什么情况下成立，从而得到相应的解。  <br />\n<br />\n注意：浮点数的比较不准确  <br />\n</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1115,'【C语言训练】立方和不等式','<p><font size=\"3\" face=\"Times New Roman\">试求满足下述立方和不等式的m的整数解。  <br />\n1^3+2^3+...+m^3〈=n  <br />\n本题算法如下：  <br />\n对指定的n，设置求和循环，从i=1开始，i递增1取值，把i3(或i*i*i)累加到s，直至s&gt;=n，脱离循环作相应的打印输出。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">正整数n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">不等式的整数解 </font></p>','10','2','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1116,'【C语言训练】素数问题','<p><font size=\"3\" face=\"Times New Roman\">编写一个程序判断一个数是否为素数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数</font></p>','<p><font face=\"Times New Roman\">1或0(其中1表示此数为素数,0为表示为不是素数) </font><br />\n<br />\n</p>','5\n','1\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1117,'【C语言训练】自守数问题','<p><font size=\"3\" face=\"Times New Roman\">自守数是指一个数的平方的尾数等于该数自身的自然数。 <br />\n例如： <br />\n25^2=625 <br />\n76^2=5776 <br />\n9376^2=87909376 <br />\n请求出200000以内的自守数?</font></p>','','<p><font face=\"Times New Roman\">200000以内的自守数(包括0, 数之间用两个空格分开) </font><br />\n<br />\n</p>','','0  1  5  6  25  76  376  625  9376  90625  109376  ','0','<p><font face=\"Times New Roman\">若采用&ldquo;求出一个数的平方后再截取最后相应位数&rdquo;的方法显然是不可取的，因为计算机无法表示过大的整数。 <br />\n分析手工方式下整数平方(乘法)的计算过程，以376为例： <br />\n376 被乘数 <br />\nX 376 乘数 <br />\n---------- <br />\n2256 第一个部分积=被乘数*乘数的倒数第一位 <br />\n2632 第二个部分积=被乘数*乘数的倒数第二位 <br />\n1128 第三个部分积=被乘数*乘数的倒数第三位 <br />\n---------- <br />\n141376 积 <br />\n本问题所关心的是积的最后三位。分析产生积的后三位的过程，可以看出，在每一次的部分积中，并不是它的每一位都会对积的后三位产生影响。总结规律可以得到：在三位数乘法中，对积的后三位产生影响的部分积分别为： <br />\n第一个部分积中：被乘数最后三位*乘数的倒数第一位 <br />\n第二个部分积中：被乘数最后二位*乘数的倒数第二位 <br />\n第三个部分积中：被乘数最后一位*乘数的倒数第三位 <br />\n将以上的部分积的后三位求和后截取后三位就是三位数乘积的后三位。这样的规律可以推广到同样问题的不同位数乘积。 <br />\n按照手工计算的过程可以设计算法编写程序。 </font><br />\n<br />\n</p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1118,'【C语言训练】自由落体问题','<p><font size=\"3\" face=\"Times New Roman\">一个球从100m高度自由落下,每次落地后反跳回原来高度的一半,再落下,再反弹.求它在第N次落地时共经过多少米? <br />\n</font></p>','<p><b> </b></p>\n<p><font size=\"3\" face=\"Times New Roman\"> 反弹的次数N</font></p>','<p><font size=\"3\" face=\"Times New Roman\">小球经过的路程(保留四位小数)</font></p>','2','200.0000','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1119,'【C语言训练】舍罕王的失算','<p><font size=\"3\" face=\"Times New Roman\">相传国际象棋是古印度舍罕王的宰相达依尔发明的.舍罕王十分喜爱象棋,决定让宰相自己选择何种赏赐.这位聪明的宰相指着8*8共64格的象棋说:陛下,请您赏给我一些麦子吧.就在棋盘的第1格放1粒,第2格放2粒,第三格放4粒,以后每一格都比前一格增加一位,依此放完棋盘一64格,我就感激不尽了.舍罕王让人扛了一袋麦子,他要兑现他的许诺. <br />\n请问,国王要兑现他的许诺共要多少粒麦子赏赐他的宰相?</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">以整数形式输出,不要其它符号</font></p>','','18446744073709552000','0','<p><font size=\"3\" face=\"Times New Roman\">应该是个很大的数,要考虑数的精度问题! 用double类型，输出尽可能精确的结果。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1120,'【C语言训练】角谷猜想','<p><font size=\"3\" face=\"Times New Roman\">角谷猜想:  <br />\n日本一位中学生发现一个奇妙的&ldquo;定理&rdquo;，请角谷教授证明，而教授无能为力，于是产生角谷猜想。猜想的内容是：任给一个自然数，若为偶数除以2，若为奇数则乘3加1，得到一个新的自然数后按照上面的法则继续演算，若干次后得到的结果必然为1。请编程验证。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">任一正整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">演算的过程</font></p>','10','10/2=5\n5*3+1=16\n16/2=8\n8/2=4\n4/2=2\n2/2=1','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1121,'【C语言训练】计算1977！*','<p><font size=\"3\" face=\"Times New Roman\">编写一个程序，计算1977！的值，</font></p>','','','','','0','<p><font size=\"3\" face=\"Times New Roman\">1977！的值超过计算机所能表示的整数范围，请考虑其他技巧，假设 1977！之值不超过10000位用一个含有10000个元素的整型数组num表示其结果，每个元素存放一位，num[0]存入个位数，num[]存入十 位数，依次类推&hellip;&hellip;8！=40320，当前最高位len=4，求9！与各位依次相乘rum保存当前的进位数字。（0&lt;=rem&lt;9）.  <br />\n1)rem置初始值0.  <br />\n2）i=0:rem=rem+num[0]*9=0+0=0。num[0]=rem%10=0，rem=rem/10=0。  <br />\n3）i=1:rem=rem+num[1]*9=0+18=18。num[1]=rem%10=8，rem=rem/10=1。  <br />\n4）i=2:rem=rem+num[2]*9=1+27=28。num[2]=rem%10=8，rem=rem/10=2。  <br />\n5）i=3:rem=rem+num[3]*9=2+0=2。num[3]=rem%10=2，rem=rem/10=0。  <br />\n6）i=4:rem=rem+num[4]*9=0+36=36。num[4]=rem%10=6，rem=rem/10=3。  <br />\n7）rem=3，说明有进位，数组最高位增加1，len=len+1=5，num[5]=rem%10=3，rem=rem/10=0，结束。  <br />\nnum各位结果为：3、6、2、8、8、0。即9！=362880 </font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1122,'【C语言训练】计算1~N之间所有奇数之和','<p><font size=\"3\" face=\"Times New Roman\">计算1~N之间所有奇数之和</font></p>','<p><font size=\"3\" face=\"Times New Roman\">正整数N</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1~N之间所有奇数之和</font></p>','10','25','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1123,'【C语言训练】计算t=1+1/2+1/3+...+1/n','<p><font size=\"3\" face=\"Times New Roman\">计算t=1+1/2+1/3+...+1/n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整型变量n </font></p>','<p><font size=\"3\" face=\"Times New Roman\">t(保留六位小数)</font></p>','10','2.928968 ','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1124,'【C语言训练】计算一个整数N的阶乘','<p><font size=\"3\" face=\"Times New Roman\">计算一个整数N的阶乘</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个整数N, (0〈=N〈=12)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数N的阶乘.</font></p>','5','120','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1125,'【C语言训练】计算：t=1-1/(2*2)-1/(3*3)-...-1/(m*m)','<p><font size=\"3\" face=\"Times New Roman\">计算：t=1-1/(2*2)-1/(3*3)-...-1/(m*m)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整型变量m</font></p>','<p><font size=\"3\" face=\"Times New Roman\">t(保留六位小数)</font></p>','10','0.450232','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1126,'【C语言训练】谁家孩子跑最慢* ','<p><font size=\"3\" face=\"Times New Roman\">张王李三家各有三个小孩。一天，三家的九个孩子在一起比赛短跑，规定不分年龄大小，跑第一得9分，跑第2得8分，依此类推。比赛结果各家的总分相同，且这些孩子没有同时到达终点的，也没有一家的两个或三个孩子获得相连的名次。已知获第一名的是李家的孩子，获得第二的是王家的孩子。问获得最后一名的是谁家的孩子？</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">输出最后一名的那家的姓的一个字母且以大写输出(若为张家,则输出Z)</font></p>','','W','0','<p><font size=\"3\" face=\"Times New Roman\">按题目的条件，共有1+2+3+...+9=45分，每家的孩子的得分应为15分。根据题意可知：获第一名的是李家的孩子，获第二名的是王家的孩子，则可推出：获第三名的一定是张家的孩子。由&ldquo;这些孩子没有同时到达终点的&rdquo;可知：名次不能并列，由&ldquo;没有一家的两个或三个孩子获得相连的名次&rdquo;可知：第四名不能是张家的孩子。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1127,'【C语言训练】邮票组合问题*','<p><font size=\"3\" face=\"Times New Roman\">某人有四张3分的邮票和三张5分的邮票，用这些邮票中的一张或若干张可以得到多少种不同的邮资？</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">可得到多少种 <br />\n</font></p>','','19','0','<p><font size=\"3\" face=\"Times New Roman\">将问题进行数学分析，不同张数和面值的邮票组成的邮资可用下列公式计算：  <br />\nS=3*i+5*j  <br />\n其中i为3分邮柰的张数，j为5分的张数  <br />\n按题目的要求，3分的邮票可以取0、1、2、3、4张，5分的邮票可以取0、1、2、3张。采用穷举方法进行组合，可以求出这些不同面值不同张数的邮标组合后的邮资。  </font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1128,'【C语言训练】阶乘和数*','<p><font size=\"3\" face=\"Times New Roman\">一个正整数如果等于组成它的各位数字的阶乘之和，该整数称为阶乘和数。 <br />\n例如，145=1!+4!+5!，则145是一个三位阶详细和数。 <br />\n请问:共有多少个阶乘和数？</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">所有的阶乘和数(按字典序，即1打头的在前，2打头的次之,..., 空格分隔)</font></p>','','1 145 2 40585 ','0','<p><font size=\"3\" face=\"Times New Roman\">提示：8*9!=8*362880&lt;10000000</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1129,'【C语言训练】阿姆斯特朗数','<p><font size=\"3\" face=\"Times New Roman\">如果一个正整数等于其各个数字的立方和，则称该数为阿姆斯特朗数(亦称为自恋性数)。 <br />\n如 407=4^3+0^3+7^3就是一个阿姆斯特朗数。试编程求大于1小于1000的所有阿姆斯特朗数。</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">从小到大输出,数之间用两个空格分开</font></p>','','153  370  371  407  ','0','<p><font size=\"3\" face=\"Times New Roman\">可采用穷举法，依次取1000以内的各数(设为i)，将i的各位数字分解后，据阿姆斯特朗数的性质进行计算和判断。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1130,'【亲和数】','<p><font size=\"3\" face=\"Times New Roman\">古希腊数学家毕达哥拉斯在自然数研究中发现，220的所有真约数(即不是自身的约数)之和为：  <br />\n<br />\n1+2+4+5+10+11+20+22+44+55+110＝284。  <br />\n<br />\n而284的所有真约数为1、2、4、71、 142，加起来恰好为220。人们对这样的数感到很惊奇，并称之为亲和数。一般地讲，如果两个数中任何一个数都是另一个数的真约数之和，则这两个数就是亲和数。  <br />\n你的任务就编写一个程序，判断给定的两个数是否是亲和数  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据第一行包含一个数M，接下有M行，每行一个实例,包含两个整数A,B； 其中 0 ＜＝A,B ＜＝600000 ; </font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，如果A和B是亲和数的话输出YES，否则输出NO。</font></p>','2\n220 284\n100 200','YES\nNO','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1131,'【作业调度方案】','<p><font size=\"3\" face=\"Times New Roman\">我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。  <br />\n每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。  <br />\n例如，当n=3，m=2时，&ldquo;1-1，1-2，2-1，3-1，3-2，2-2&rdquo;就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。  <br />\n一方面，每个操作的安排都要满足以下的两个约束条件。  <br />\n(1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；  <br />\n(2) 同一时刻每一台机器至多只能加工一个工件。  <br />\n另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。  <br />\n由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为&ldquo;1 1 2 3 3 2&rdquo;。  <br />\n还要注意，&ldquo;安排顺序&rdquo;只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。  <br />\n例如，取n=3,m=2，已知数据如下：  <br />\n<br />\n则对于安排顺序&ldquo;1 1 2 3 3 2&rdquo;，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。 <br />\n<br />\n当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题 简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条 件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。  <br />\n显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行为两个正整数，用一个空格隔开：  <br />\nm n  <br />\n（其中m（〈20）表示机器数，n（〈20）表示工件数）  <br />\n第2行： 2n个用空格隔开的数，为给定的安排顺序。  <br />\n接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。  <br />\n其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。  <br />\n后n行依次表示每个工件的每个工序的加工时间。  <br />\n可以保证，以上各数据都是正确的，不必检验。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为最少的加工时间。</font></p>','2 3\n1 1 2 3 3 2\n1 2 \n1 2 \n2 1\n3 2 \n2 5 \n2 4\n','10','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1132,'【偶数求和】','<p><font size=\"3\" face=\"Times New Roman\">有一个长度为n(n&lt;=100)的数列，该数列定义为从2开始的递增有序偶数（公差为2的等差数列），现在要求你按照顺序每m个数求出一个平均值，如果最后不足m个，则以实际数量求平均值。编程输出该平均值序列。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，包含两个正整数n和m，n和m的含义如上所述。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一个平均值序列，每组输出占一行</font></p>','3 2\n4 2','3 6\n3 7','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1133,'【出圈】','<p><font size=\"3\" face=\"Times New Roman\">设有n个人围坐一圈并按顺时针方向从1到n编号，从第1个人开始进行1到m的报数，报数到第个m人，此人出圈，再从他的下一个人重新开始1到m的报数，如此进行下去直到所剩下一人为止。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入多行，每行２个数，分别表示n和m.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">计算每一行中最后剩下这个人的编号．</font></p>','10 3','4','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1134,'【回文数(二)】','<p><font size=\"3\" face=\"Times New Roman\">若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。  <br />\n例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。  <br />\n又如：对于10进制数87：  <br />\nSTEP1：87+78 = 165　　　　　　　　 STEP2：165+561 = 726  <br />\nSTEP3：726+627 = 1353　　　　　　　　STEP4：1353+3531 = 4884  <br />\n在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。  <br />\n写一个程序，给定一个N（2&lt;=N&lt;=16）进制数M，求最少经过几步可以得到回文数。如果在30步以内（包含30步）不可能得到回文数，则输出&ldquo;Impossible!&rdquo;  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">共两行  <br />\n第一行为进制数N（2&lt;=N&lt;=16）  <br />\n第二行为N进制数M（0&lt;=M&lt;=maxlongint）  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">共一行，为&ldquo;STEP=经过的步数&rdquo;或&ldquo;Impossible!&rdquo;</font></p>','9\n87','STEP=6','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1135,'【密码】','<p><font size=\"3\" face=\"Times New Roman\">网上流传一句话:&quot;常在网上飘啊，哪能不挨刀啊～&quot;。其实要想能安安心心地上网其实也不难，学点安全知识就可以。  <br />\n首先，我们就要设置一个安全的密码。那什么样的密码才叫安全的呢？一般来说一个比较安全的密码至少应该满足下面两个条件：  <br />\n(1).密码长度大于等于8，且不要超过16。  <br />\n(2).密码中的字符应该来自下面&ldquo;字符类别&rdquo;中四组中的至少三组。  <br />\n这四个字符类别分别为：  <br />\n1.大写字母：A,B,C...Z;  <br />\n2.小写字母：a,b,c...z;  <br />\n3.数字：0,1,2...9;  <br />\n4.特殊符号：~,!,@,#,$,%,^;  <br />\n给你一个密码，你的任务就是判断它是不是一个安全的密码。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据第一行包含一个数M，接下有M行，每行一个密码（长度最大可能为50），密码仅包括上面的四类字符。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，判断这个密码是不是一个安全的密码，是的话输出YES，否则输出NO。</font></p>','3\na1b2c3d4\nLinle@ACM\n^~^@^@!%','NO\nYES\nNO','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1136,'【排队买票】','<p><font size=\"3\" face=\"Times New Roman\">有M个小孩到公园玩，门票是1元。其中N个小孩带的钱为1元，K个小孩带的钱为2元。售票员没有零钱，问这些小孩共有多少种排队方法，使得售票员总能找得开零钱。注意：两个拿一元零钱的小孩，他们的位置互换，也算是一种新的排法。（M&lt;=10） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入一行，M,N,K(其中M=N+K,M&lt;=10).</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出一行，总的排队方案。</font></p>','4 2 2','8','0','','吉首大学软件学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1137,'【数组的距离】','<p><font size=\"3\" face=\"Times New Roman\">已知元素从小到大排列的两个数组x[]和y[]，请写出一个程序算出两个数组彼此之间差的绝对值中最小的一个，这叫做数组的距离</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行为两个整数m, n(1&le;m, n&le;1000)，分别代表数组f[], g[]的长度。 <br />\n第二行有m个元素，为数组f[]。 <br />\n第三行有n个元素，为数组g[]。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">数组的最短距离</font></p>','5 5\n1 2 3 4 5\n6 7 8 9 10\n','1','0','','吉首大学软件服务外包学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1138,'【明明的随机数】','<p><font size=\"3\" face=\"Times New Roman\">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用 计算机生成了N个1到1000之间的随机整数（N&le;100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然 后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">有2行，第1行为1个正整数，表示所生成的随机数的个数：  <br />\nN  <br />\n第2行有N个用空格隔开的正整数，为所产生的随机数。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">也是2行，第1行为1个正整数M，表示不相同的随机数的个数。第2行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</font></p>','10\n20 40 32 67 40 20 89 300 400 15','8\n15 20 32 40 67 89 300 400','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1139,'【求[X,Y]内被除3余1并且被除5余3的整数的和】','<p><font face=\"Times New Roman\" size=\"3\">输入两个正整数X,Y,求出[X,Y]内被除3余1并且被除5余3的整数的和</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入两个正整数X,Y</font></p>','<p><font face=\"Times New Roman\" size=\"3\">求所有满足条件的数的和</font></p>','200 800\n','20020\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1140,'【矩阵】','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">给一个n*n的矩阵A，它的每一个元素Ai,j都是整数( 0 &lt;= i &lt; n, 0 &lt;= j &lt; n )。在每一行i( 0 &lt;= i &lt; n )给一个右移操作，使第i行的整数整体向右移动一个位置，最右边的整数将会移动到最左端的那一列。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n你可以在任意行做右移操作，这样你会得到一个新的矩阵，对于新的矩阵你当然也可以做右移操作。你的任务就是求列最小值ColMin,它是每个矩阵的列最大值，但同时又是所有矩阵中的列最小值。<span class=\"Apple-converted-space\">&nbsp;</span><br />\nmax(0 &lt;= j &lt; n){Cj|Cj=&Sigma;0&lt;=i &lt; nAi,j}<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">可能包含多次输入。第一行是一个整数n，接下来n行每行包含n个整数，这些数据就是n*n的矩阵A的元素。如果输入仅含有-1的一行，就表示输入终止。其中1 &lt;= n &lt;= 7 而且 |Ai,j| &lt; 104 。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">对于每组测试，打印一行包含一个数值，它在一个矩阵中是列最大值，但是在所有的变换矩阵中又是列最小值。</span></p>','2 \n4 6 \n3 7 \n3 \n1 2 3 \n4 5 6 \n7 8 9 \n-1\n','11 \n15','0','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">例如：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n2<span class=\"Apple-converted-space\">&nbsp;</span><br />\n4 6<span class=\"Apple-converted-space\">&nbsp;</span><br />\n3 7<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是：13<span class=\"Apple-converted-space\">&nbsp;</span><br />\n右移操作：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n6 4<span class=\"Apple-converted-space\">&nbsp;</span><br />\n3 7<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是：11<span class=\"Apple-converted-space\">&nbsp;</span><br />\n右移操作：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n4 6<span class=\"Apple-converted-space\">&nbsp;</span><br />\n7 3<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是：11<span class=\"Apple-converted-space\">&nbsp;</span><br />\n右移操作：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n6 4<span class=\"Apple-converted-space\">&nbsp;</span><br />\n7 3<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是13<span class=\"Apple-converted-space\">&nbsp;</span><br />\n显然在所有的变换矩阵中列最大值是小是11<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1141,'【简单计算】','<p><font face=\"Times New Roman\">有一个n+2个元素a[0], a[1], ..., a[n+1] (n &lt;= 3000, -1000 &lt;= a[i] &lt;=1000)构成的数列. <br />\n已知对i=1, 2, ..., n有a[i] = (a[i-1] + a[i+1])/2 - c[i]. <br />\n<br />\n给定a0, a[n+1], c[1], ... , c[n]. 写一个程序计算a[1]. </font><br />\n</p>','<p><font face=\"Times New Roman\" size=\"3\">第一行是整数n. 接下来两行是a[0]和a[n+1], 其小数点后有两位数字. 其后的n行为c[i](同样是两位小数), 每行一个数.</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输出为a[1], 格式与a[0], a[n+1]相同.</font></p>','1\n50.50\n25.50\n10.15\n','27.85\n','0','','吉首大学软件学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1142,'【绝对值排序】','<p><font size=\"3\" face=\"Times New Roman\">输入n(n&lt;=100)个整数，按照绝对值从大到小排序后输出。题目保证对于每一个测试实例，所有的数的绝对值都不相等。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，每行的第一个数字为n,接着是n个整数，n=0表示输入数据的结束，不做处理。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，输出排序后的结果，两个数之间用一个空格隔开。每个测试实例占一行</font></p>','3 3 -4 2\n4 0 1 2 -3\n0','-4 3 2\n-3 2 1 0','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1143,'【能量项链】','<p><font face=\"Times New Roman\">在Mars星球上，每个Mars人都随身佩带着一串能量项链。在项链上有N颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标记。因为只有这样，通过吸盘（吸盘是Mars人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗能量珠的头标记为m，尾标记为r，后一颗能量珠的头标记为r，尾标记为n，则聚合后释放的能量为m*r*n（Mars单位），新产生的珠子的头标记为m，尾标记为n。 <br />\n需要时，Mars人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。 <br />\n例如：设N=4，4颗珠子的头标记与尾标记依次为(2，3) (3，5) (5，10) (10，2)。我们用记号◎表示两颗珠子的聚合操作，(j◎k)表示第j，k两颗珠子聚合后所释放的能量。则第4、1两颗珠子聚合后释放的能量为： <br />\n(4◎1)=10*2*3=60。 <br />\n这一串项链可以得到最优值的一个聚合顺序所释放的总能量为 <br />\n((4◎1)◎2)◎3）=10*2*3+10*3*5+10*5*10=710。</font></p>','<p><font face=\"Times New Roman\">第一行是一个正整数N（4&le;N&le;100），表示项链上珠子的个数。第二行是N个用空格隔开的正整数，所有的数均不超过1000。第i个数为第i颗珠子的头标记（1&le;i&le;N），当i〈N时，第i颗珠子的尾标记应该等于第i+1颗珠子的头标记。第N颗珠子的尾标记应该等于第1颗珠子的头标记。 <br />\n至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">只有一行，是一个正整数E（E&le;2.1*10^9），为一个最优聚合顺序所释放的总能量。</font></p>','4\n2  3  5  10\n\n','710\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1144,'【蟠桃记】','<p><font size=\"3\" face=\"Times New Roman\">喜欢西游记的同学肯定都知道悟空偷吃蟠桃的故事，你们一定都觉得这猴子太闹腾了，其实你们是有所不知：悟空是在研究一个数学问题！  <br />\n什么问题？他研究的问题是蟠桃一共有多少个！  <br />\n不过，到最后，他还是没能解决这个难题，呵呵^-^  <br />\n当时的情况是这样的：  <br />\n第一天悟空吃掉桃子总数一半多一个，第二天又将剩下的桃子吃掉一半多一个，以后每天吃掉前一天剩下的一半多一个，到第n天准备吃的时候只剩下一个桃子。聪明的你，请帮悟空算一下，他第一天开始吃的时候桃子一共有多少个呢？  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，包含一个正整数n（1＜n＜30），表示只剩下一个桃子的时候是在第n天发生的</font></p>','<p><font size=\"3\" face=\"Times New Roman\"> 对于每组输入数据，输出第一天开始吃的时候桃子的总数，每个测试实例占一行。</font></p>\n<p align=\"left\"><b><font size=\"5\" color=\"#333399\"><br />\n</font> </b></p>','2\n4','4\n22','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1145,'【计算两点间的距离】','<p><font size=\"3\" face=\"Times New Roman\">输入两点坐标（X1,Y1）,（X2,Y2）,计算并输出两点间的距离。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，由4个实数组成，分别表示x1,y1,x2,y2,数据之间用空格隔开。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行，结果保留两位小数。</font></p>','0 0 0 1\n0 1 1 0','1.00\n1.41','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1146,'【计算球体积】','<p><font size=\"3\" face=\"Times New Roman\">根据输入的半径值，计算球的体积。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，每行包括一个实数，表示球的半径。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出对应的球的体积，对于每组输入数据，输出一行，计算结果保留三位小数。</font></p>','1\n1.5','4.189\n14.137','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1147,'【计算直线的交点数】','<p><font size=\"3\" face=\"Times New Roman\">平面上有n条直线，且无三线共点，问这些直线能有多少种不同交点数。  <br />\n比如,如果n=2,则可能的交点数量为0(平行)或者1(不平行)。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个测试实例,每个测试实例占一行,每行包含一个正整数n（n&lt;=20）,n表示直线的数量.</font></p>','<p align=\"left\"><b><font size=\"5\" color=\"#333399\">Output</font> </b></p>\n<p><font size=\"3\" face=\"Times New Roman\"> 每个测试实例对应一行输出，从小到大列出所有相交方案，其中每个数为可能的交点数,每行的整数之间用一个空格隔开。 </font></p>','2\n3','0 1\n0 2 3','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1148,'【金明的预算方案】','<p><font size=\"3\" face=\"Times New Roman\">金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专用 的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早，金明就开始做预 算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子： <br />\n<br />\n主件 	附件  <br />\n电脑 	打印机，扫描仪  <br />\n书柜 	图书  <br />\n书桌 	台灯，文具  <br />\n工作椅 	无  <br />\n<br />\n如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有0个、1个或2个附件。附件不再有从属于自己的附件。金明想买的东西很 多，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格 （都是10元的整数倍）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />\n设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />\nv[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />\n请你帮助金明设计一个满足要求的购物单。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行，为两个正整数，用一个空格隔开：  <br />\nN m  <br />\n（其中N（&lt;32000）表示总钱数，m（&lt;60）为希望购买物品的个数。）  <br />\n从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数  <br />\nv p q  <br />\n（其中v表示该物品的价格（v&lt;10000），p表示该物品的重要度（1~5），q表示该物品是主件还是附件。如果q=0，表示该物品为主件，如果q&gt;0，表示该物品为附件，q是所属主件的编号）  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;200000）。</font></p>','1000 5\n800 2 0\n400 5 1\n300 5 1\n400 3 0\n500 2 0\n','2200','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1149,'【魔板】','<p><font size=\"3\" face=\"Times New Roman\">在魔方风靡全球之后不久，Rubik先生发明了它的简化版――魔板。魔板 由8个同样大小的方块组成，每个方块颜色均不相同，可用数字1-8分别表示。任一时刻魔板的状态可用方块的颜色序列表示：从魔板的左上角开始，按顺时针方 向依次写下各方块的颜色代号，所得到的数字序列即可表示此时魔板的状态。例如，序列(1,2,3,4,5,6,7,8)表示魔板状态为：  <br />\n1 2 3 4  <br />\n8 7 6 5  <br />\n对于魔板，可施加三种不同的操作，具体操作方法如下：  <br />\nA: 上下两行互换,如上图可变换为状态87654321  <br />\nB: 每行同时循环右移一格,如上图可变换为41236785  <br />\nC: 中间4个方块顺时针旋转一格,如上图可变换为17245368  <br />\n给你魔板的初始状态与目标状态，请给出由初态到目态变换数最少的变换步骤，若有多种变换方案则取字典序最小的那种。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">每组测试数据包括两行，分别代表魔板的初态与目态。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对每组测试数据输出满足题意的变换步骤。</font></p>','12345678\n17245368\n12345678\n82754631','C\nAC','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1150,'三角形','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">7<span class=\"Apple-converted-space\">&nbsp;</span><br />\n3 8<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n8 1 0<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n2 7 4 4<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n4 5 2 6 5<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n(图一)<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n图一表示一个5行的数字三角形。假设给定一个n行数字三角形,计算出从三角形顶至底的一条路径，使该路径经过的数字总和最大。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n每一步只能由当前位置向左下或右下。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">你的程序要能接受标准输入。第一行包含一个整数T，表示总的测试次数。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n对于每一种情况：第一行包含一个整数N,其中1 &lt; N &lt; 100,表示三角形的行数。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n接下来的N行输入表示三角形的每一行的元素Ai,j，其中0 &lt; Ai,j &lt; 100。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输出每次测试的最大值并且占一行。</span></p>','1 \n5 \n7 \n3 8 \n8 1 0  \n2 7 4 4 \n4 5 2 6 5','30','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1151,'三进制小数','<p><font face=\"Times New Roman\">你的任务呢，是将一个有理数转换成三进制小数。&ldquo;什么是三进制小数呢？&rdquo;你一定会问，这很明白，就是以三为基（二进制数以2为基，而十进制数则以10为基）的小数。 </font><br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">有理数的值都是在0与1之间的，每个有理数都由一个分子和一个分母表示，分子与分母之间隔着一个斜杠。有理数的个数不会超过1000个。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出格式见样本输出，它是以小数点开头的具有10位精度的3进制数。 <br />\n<br />\n</font></p>','1/3\n1/4\n1/6\n7/8','.1000000000\n.0202020202\n.0111111111\n.2121212122\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1152,'上车人数','<p><font size=\"3\" face=\"Times New Roman\">公共汽车从始发站(称为第1站)开出,在始发站上车的人数为a,然后到达 第2站,在第2站有人上、下车,但上、下车的人数相同，因此在第2站开出时（即在到达第3站之前）车上的人数保持为a人。从第3站起（包括第3站）上、下 车的人数有一定的规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站（第n-1站），都满足此规律。现给出的 条件是：共有n个车站，始发站上车的人数为a,最后一站下车的人数是m（全部下车）。试问从x站开出时车上的人数是多少？</font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一行，四个整数a,n,m和x </font></p>','<p><font size=\"3\" face=\"Times New Roman\">x站开出时车上的人数</font></p>','5 7 32 4','13','0','','吉首大学软件学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1153,'不容易系列','<p><font face=\"Times New Roman\">你活的不容易，我活的不容易，他活的也不容易。不过，如果你看了下面的故事，就会知道，有位老汉比你还不容易。 <br />\n重庆市郊黄泥板村的徐老汉（大号徐东海，简称XDH）这两年辛辛苦苦养了不少羊，到了今年夏天，由于众所周知的高温干旱，实在没办法解决牲畜的饮水问题，就决定把这些羊都赶到集市去卖。从黄泥板村到交易地点要经过N个收费站，按说这收费站和徐老汉没什么关系，但是事实却令徐老汉欲哭无泪： <br />\n（镜头回放） <br />\n近景：老汉，一群羊 <br />\n远景：公路，收费站 <br />\n...... <br />\n收费员（彬彬有礼+职业微笑）：&ldquo;老同志，请交过路费！&rdquo; <br />\n徐老汉（愕然，反应迟钝状）：&ldquo;锅，锅，锅，锅-炉-费？我家不烧锅炉呀？&rdquo; <br />\n收费员（职业微笑依然）：&ldquo;老同志，我说的是过-路-费，就是你的羊要过这个路口必须交费，understand?&rdquo; <br />\n徐老汉（近镜头10秒，嘴巴张开）：&ldquo;我-我-我知道汽车过路要收费，这羊也要收费呀？&rdquo; <br />\n收费员（居高临下+不解状）：&ldquo;老同志，你怎么就不明白呢，那么我问你，汽车几个轮子？&rdquo; <br />\n徐老汉（稍放松）：&ldquo;这个我知道，今天在家里我孙子还问我这个问题，4个！&rdquo; <br />\n收费员（生气，站起）：&ldquo;嘿！老头，你还骂人不带脏字，既然知道汽车四个轮子，难道就不知道这羊有几条腿吗？！&rdquo; <br />\n徐老汉（尴尬，依然不解状）：&ldquo;也，也，也是4个呀，这有关系吗？&rdquo; <br />\n收费员（生气，站起）：&ldquo;怎么没关系！我们头说了，只要是4条腿的都要收费！&rdquo; <br />\n...... <br />\n(画外音) <br />\n由于徐老汉没钱，收费员就将他的羊拿走一半，看到老汉泪水涟涟，犹豫了一下，又还给老汉一只。巧合的是，后面每过一个收费站，都是拿走当时羊的一半，然后退还一只，等到老汉到达市场，就只剩下3只羊了。 <br />\n你,当代有良知的青年，能帮忙算一下老汉最初有多少只羊吗？ </font><br />\n</p>','<p><font face=\"Times New Roman\">输入数据第一行是一个整数N，下面由N行组成， <br />\n每行包含一个整数a(0＜a＜=30),表示收费站的数量。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，请输出最初的羊的数量,每个测试实例的输出占一行。</font></p>','2\n1\n2\n\n','4\n6\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1154,'不容易系列2','<p><font size=\"3\" face=\"Times New Roman\">大家常常感慨，要做好一件事情真的不容易，确实，失败比成功容易多了！ <br />\n做好&ldquo;一件&rdquo;事情尚且不易，若想永远成功而总从不失败，那更是难上加难了，就像花钱总是比挣钱容易的道理一样。 <br />\n话虽这样说，我还是要告诉大家，要想失败到一定程度也是不容易的。比如，我高中的时候，就有一个神奇的女生，在英语考试的时候，竟然把40个单项选择题全部做错了！大家都学过概率论，应该知道出现这种情况的概率，所以至今我都觉得这是一件神奇的事情。如果套用一句经典的评语，我们可以这样总结：一个人做错一道选择题并不难，难的是全部做错，一个不对。 <br />\n不幸的是，这种小概率事件又发生了，而且就在我们身边： <br />\n事情是这样的――HDU有个网名叫做8006的男性同学，结交网友无数，最近该同学玩起了浪漫，同时给n个网友每人写了一封信，这都没什么，要命的是，他竟然把所有的信都装错了信封！注意了，是全部装错哟！ <br />\n现在的问题是：请大家帮可怜的8006同学计算一下，一共有多少种可能的错误方式呢？ <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个多个测试实例，每个测试实例占用一行，每行包含一个正整数n（２＜n＜=20），n表示8006的网友的人数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每行输入请输出可能的错误方式的数量，每个实例的输出占用一行。</font></p>','2\n3\n\n','1\n2\n\n','0','<p><font face=\"Times New Roman\">装错信封问题 <br />\n这个问题是由 18 世纪初的法国数学家蒙摩提出来的。 <br />\n<br />\n某人给五个朋友写信，邀请他们来家中聚会。请柬和信封交由助手去处理。粗心的助手却把请柬全装错了信封。请问：助手会有多少种装错的可能呢？ <br />\n<br />\n<br />\n-------------------------------------------------------------------------------- <br />\n<br />\n<br />\n瑞士数学家欧拉按一般情况给出了一个递推公式： <br />\n<br />\n用Ａ、Ｂ、Ｃ&hellip;&hellip;表示写着ｎ位友人名字的信封，ａ、ｂ、ｃ&hellip;&hellip;表示ｎ份相应的写好的信纸。把错装的总数为记作 f(n) 。假设把ａ错装进Ｂ里了，包含着这个错误的一切错装法分两类： <br />\n<br />\n（１）ｂ装入Ａ里，这时每种错装的其余部分都与Ａ、Ｂ、ａ、ｂ无关，应有 f(n-2) 种错装法。　　　　 <br />\n<br />\n（２）ｂ装入Ａ、Ｂ之外的一个信封，这时的装信工作实际是把（除ａ之外的）　　份信纸ｂ、ｃ&hellip;&hellip;装入（除Ｂ以外的）ｎ－１个信封Ａ、Ｃ&hellip;&hellip;，显然这时装错的方法有 f(n-1) 种。 <br />\n<br />\n总之在ａ装入Ｂ的错误之下，共有错装法 f(n-2)+f(n-1) 种。ａ装入Ｃ，装入Ｄ&hellip;&hellip;的ｎ－２种错误之下，同样都有 f(n-2)+f(n-1) 种错装法，因此 : <br />\n<br />\nf(n)=(n-1) {f(n-1)+f(n-2)} <br />\n<br />\n这是递推公式，令ｎ＝１、２、３、４、５逐个推算就能解答蒙摩的问题。 <br />\n<br />\nf(1)= 0， f (2)= 1， f (3)= 2， f (4)= 9， f (5)=44。 </font><br />\n<br />\n</p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1155,'人民币问题','<p><font face=\"Times New Roman\" size=\"3\">给出任意的人民币(&gt;10元)的整币兑换成5元、2元和1元币值（要求三种币值均有）的方法有多少种。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入任意的人民币(&gt;10元)的整币100,50,20,10</font></p>','<p><font face=\"Times New Roman\" size=\"3\">计算出兑换成5元、2元和1元币值（要求三种币值均有）的方法有多少种</font></p>','50\n','106\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1156,'人见人爱A+B','<p><font size=\"3\" face=\"Times New Roman\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 北大的acm上面已经有10来道A+B的题目了，相信这些题目曾经是大家的最爱，希望今天的这个A+B能给大家带来好运，也希望这个题目能唤起大家对ACM曾经的热爱。 <br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个题目的A和B不是简单的整数，而是两个时间，A和B 都是由3个整数组成，分别表示时分秒，比如，假设A为34 45 56，就表示A所表示的时间是34小时 45分钟 56秒。 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多行组成，首先是一个整数N，表示测试实例的个数，然后是N行数据，每行有6个整数AH,AM,AS,BH,BM,BS，分别表示时间A和B所对应的时分秒。题目保证所有的数据合法。 </font></p>','<p>对于每个测试实例，输出A+B，每个输出结果也是由时分秒3部分组成，同时也要满足时间的规则（即：分和秒的取值范围在0~59），每个输出占一行，并且所有的部分都可以用32位整数表示。</p>','1\n1 2 3 4 5 6\n','5 7 9\n','0','','软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1157,'众数问题','<p><font face=\"Times New Roman\">问题描述： <br />\n给定含有n个元素的多重集合S，每个元素在S中出现的次数称为该元素的重数。多重集S中重数最大的元素称为众数。 <br />\n例如，S={1，2，2，2，3，5}。多重集S的众数是2，其重数为3。 <br />\n编程任务： <br />\n对于给定的由n 个自然数组成的多重集S，编程计算S 的众数及其重数。 </font></p>','<p><font face=\"Times New Roman\">第1行多重集S中元素个数n(n&lt;=50000)；接下来的n 行中，每行有一个自然数。</font></p>','<p><font face=\"Times New Roman\">输出文件有2 行，第1 行给出众数，第2 行是重数。(如果有多个众数，只输出最小的)</font></p>','6\n1\n2\n2\n2\n3\n5\n','2\n3','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1158,'作业调度方案','<p><font size=\"3\" face=\"Times New Roman\">我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。  <br />\n每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。  <br />\n例如，当n=3，m=2时，&ldquo;1-1，1-2，2-1，3-1，3-2，2-2&rdquo;就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。  <br />\n一方面，每个操作的安排都要满足以下的两个约束条件。  <br />\n(1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；  <br />\n(2) 同一时刻每一台机器至多只能加工一个工件。  <br />\n另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。  <br />\n由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为&ldquo;1 1 2 3 3 2&rdquo;。  <br />\n还要注意，&ldquo;安排顺序&rdquo;只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。  <br />\n例如，取n=3,m=2，已知数据如下：  <br />\n<br />\n则对于安排顺序&ldquo;1 1 2 3 3 2&rdquo;，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。 <br />\n<br />\n当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题 简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条 件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。  <br />\n显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行为两个正整数，用一个空格隔开：  <br />\nm n  <br />\n（其中m（〈20）表示机器数，n（〈20）表示工件数）  <br />\n第2行： 2n个用空格隔开的数，为给定的安排顺序。  <br />\n接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。  <br />\n其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。  <br />\n后n行依次表示每个工件的每个工序的加工时间。  <br />\n可以保证，以上各数据都是正确的，不必检验。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为最少的加工时间。</font></p>','2 3\n1 1 2 3 3 2\n1 2 \n1 2 \n2 1\n3 2 \n2 5 \n2 4','10','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1159,'倒杨辉三角形','<p><font size=\"3\" face=\"Times New Roman\">Fans喜欢图形，而且喜欢把图形倒过来欣赏。有一次，他看见杨辉三角形 了，觉得很新鲜，于是就把它们大大小小地摆布出来。输入一些整数n（1&le;n&le;10），读入其每个整数，以该整数为行数，其画出来的倒杨辉三角形（每个数据 占三个字符）就是fans所喜欢欣赏的。Fans是手工做的，你却可以用编程更快捷地做出来，多爽啊! </font></p>','','','5\n3','1 4 6 4 1\n 1 3 3 1\n  1 2 1\n   1 1\n    1\n\n1 2 1\n 1 1\n  1','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1160,'假币问题','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">居然有假币！！！<span class=\"Apple-converted-space\">&nbsp;</span><br />\n事情是这样的，现在猪肉涨了，但是农民的工资却不见涨啊，没钱怎么买猪肉啊。老王这就去买猪肉，结果找来的零钱中有假币！！！可惜老王一不小心把它混进了一堆真币里面去了。现在知道假币的重量比真币的质量要轻。给你一个天平，请用最快的时间把那个可恶的假币找出来。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入有多行,每一行的值为硬币的数目n,1&le;n&le;2^30,输入0结束程序</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">最少要称多少次一定能把那个假币找出来。输出对应输入行数.</span></p>','3\n12\n0\n','1\n3','0','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">示例1中共有3枚硬币，所以任意取2个放天平上称量一下。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n因为假币的重量比较轻。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n如果天平不平衡，则较轻的那枚就是假币。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n如果天平平衡，则说明这两枚硬币都是真的，而剩下那枚是假币。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1161,'做幻方','<p><font size=\"3\" face=\"Times New Roman\">Apple最近迷上了做幻方，Apple还是个中高手，只要你说个奇数N就能把N*N的幻方做出来。其实你可以比他做得更好的。Apple总是画得很乱，而你可以利用程序排得很整齐^_^ 幻方的要求：每一行，每一列，还有两条斜线上数字的和都相等. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行一个奇数N(0&lt; N &lt; 30),输入0结束  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入一个奇数，输出一个幻方，顺序参照样板输出；同一列的数右对齐，数与数用一个空格分开；输出完以后加一个回车。</font></p>','5\n1\n0','11 18 25  2  9\n10 12 19 21  3\n 4  6 13 20 22\n23  5  7 14 16\n17 24  1  8 15\n\n1','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1162,'内码对称','<p><font size=\"3\" face=\"Times New Roman\">C++中int型整数内码是一个32位的01序列，该01序列有些是对称的，有些是不对称的。对于给定的一个整数，在一些场合，需要判断其整数内码的对称性。这个事情要做好还非你不行呢。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入中含有一些整数n（0&le;n〈2^32）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">统计其中一共有多少个其内码对称的整数，输出之。</font></p>','0\n1\n2147483649\n2\n3','2','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1163,'剔除相关数','<p><font face=\"Times New Roman\">一个数与另一个数如果含有相同数字和个数的字符，则称两数相关。现有一堆乱七八糟的整数，里面可能充满了彼此相关的数，请你用一下手段，自动地将其剔除。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每组数据前有一个N(&lt;1000)，表示跟随的整数P(0</font>\n<p></p>\n</p>','<p>按从小到大的顺序输出非相关数，若没有非相关数，则输出None</p>','8\n213 667 3 213 43 34 677 2\n3\n322 232 232\n0\n\n','2 3 667 677\nNone\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1164,'化学品问题','<p><font size=\"3\" face=\"Times New Roman\">一个实验室有N个放化学品的试管，排列在一条直线上。如果连续M个试管中放入药品，则会发生爆炸，于是，在某些试管中可能不放药品。 <br />\n任务：对于给定的N和M，求不发生爆炸的放置药品的方案总数 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行是一个正整数L，代表输入数据的组数 <br />\n接下来L行，每行有两个正整数N，M( 1＜N＜32，2&le;M&le;5) <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出L行，每行只有一个正整数S，表示对应输入数据的方案总数。</font></p>','2\n4 3\n3 2\n\n','13\n5\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1165,'十->二进制转换','<p><font face=\"Times New Roman\">将十进制整数转换成二进制数</font></p>','<p><font face=\"Times New Roman\">输入数据中含有不多于50个整数n（-2^16＜n＜2^16）。</font></p>','<p><font face=\"Times New Roman\">对于每个n，以11位的宽度右对齐输出n值，然后输出&ldquo;--&gt;&rdquo;，再然后输出二进制数。每个整数n的输出，独立占一行。</font></p>','2\n0\n-12\n1\n','2―->10\n0-->0\n-12-->-1100\n1-->1\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1166,'半数集问题','<p><font face=\"Times New Roman\">问题描述： <br />\n给定一个自然数n，由n开始可以依次产生半数集set(n)中的数如下。 <br />\n(1) n&isin;set(n)； <br />\n(2) 在n的左边加上一个自然数，但该自然数不能超过最近添加的数的一半； <br />\n(3) 按此规则进行处理，直到不能再添加自然数为止。 <br />\n例如，set(6)={6,16,26,126,36,136}。半数集set(6)中有6 个元素。 <br />\n注意半数集是多重集。 <br />\n<br />\n编程任务： <br />\n对于给定的自然数n，编程计算半数集set(n)中的元素个数。 </font></p>','<p><font face=\"Times New Roman\">输入数据m行，每行给出一个整数n。(0〈n〈1000)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出只有m行，每行给出半数集set(n)中的元素个数。</font></p>','6\n99\n','6\n9042\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1167,'去括号','<p><font size=\"3\" face=\"Times New Roman\">当老师不容易，尤其是当小学的老师更难:现在的小朋友做作业喜欢滥用括号。 <br />\n虽然不影响计算结果，但不够美观，容易出错，而且可读性差。但又不能一棒子打死，也许他们就是将来的&ldquo;陈景润&rdquo;呢！ <br />\n为了减轻老师的工作，不至于他们工作到深夜，我们来写个程序把小朋友的作业做一下简单地处理，去掉那些多余的括号。 <br />\n为了简化问题，所有式子里只存在小括号，运算符号包括+(加)、-(减)、*(乘)、/(除)、^(幂)。 <br />\n注意：去掉多余的小括号不是指运算结果一样就可以。 <br />\n比如：(1+2)^1 = 3。虽然把括号去掉1+2^1也等于3，但我们说这个括号不能去。 <br />\n但如：1+(2+3) = 1+2+3只要是允许的，因为加法是满足交换律和结合律的。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入包括多组测试数据。 <br />\n每组测试数据为一行算术表达式，只包括数字和运算符号，长度小于16。 <br />\n输入以#行结束，该行不做处理。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对应每组数据输入都有一行输出。 <br />\n输出去掉多余的括号后的表达式。</font></p>','((((1))))+((((1))))\n1\n1+1+1+1\n((1+2)+3)*4\n(1+(2+3))*4\n((1*2)*3)*4\n(1*(2*3))*4\n((1*2)*(3*4))\n1*((2*3)*4)\n1*(2*(3*4))\n((1*2)*4)*3\n(1*(2*4))*3\n((1*2)*(4*3))\n1*((2*4)*3)\n1*(2*(4*3))\n((1+3)+2)*4\n(1+(3+2))*4\n((1+3)*(2+4))\n((1*3)*2)*4\n(1*(3*2))*4\n((1*3)*(2*4))\n1*((3*2)*4)\n1*(3*(2*4))\n((1+3)*(4+2))\n((1*3)*4)*2\n(1*(3*4))*2\n((1*3)*(4*2))\n1*((3*4)*2)\n1*(3*(4*2))\n((1*4)*3)*2\n(1*(4*3))*2\n((1*4)*(3*2))\n1*((4*3)*2)\n1*(4*(3*2))\n((1*4)*2)*3\n(1*(4*2))*3\n((1*4)*(2*3))\n1*((4*2)*3)\n1*(4*(2*3))\n((2+1)+3)*4\n(2+(1+3))*4\n((2*1)*3)*4\n(2*(1*3))*4\n((2*1)*(3*4))\n2*((1*3)*4)\n2*(1*(3*4))\n((2/1)*3)*4\n((2/1)*(3*4))\n(2/(1/3))*4\n2/(1/(3*4))\n2/((1/3)/4)\n((2^1)*3)*4\n((2^1)*(3*4))\n((2*1)*4)*3\n(2*(1*4))*3\n((2*1)*(4*3))\n2*((1*4)*3)\n2*(1*(4*3))\n((2/1)*4)*3\n((2/1)*(4*3))\n(2/(1/4))*3\n2/(1/(4*3))\n2/((1/4)/3)\n((2^1)*4)*3\n((2^1)*(4*3))\n((2+3)+1)*4\n(2+(3+1))*4\n((2*3)*1)*4\n(2*(3*1))*4\n((2*3)*(1*4))\n2*((3*1)*4)\n2*(3*(1*4))\n((2*3)/1)*4\n(2*(3/1))*4\n2*((3/1)*4)\n((2*3)/(1/4))\n2*(3/(1/4))\n((2*3)^1)*4\n(2*(3^1))*4\n2*((3^1)*4)\n((2*3)*4)*1\n(2*(3*4))*1\n((2*3)*(4*1))\n2*((3*4)*1)\n2*(3*(4*1))\n((2*3)*4)/1\n(2*(3*4))/1\n((2*3)*(4/1))\n2*((3*4)/1)\n2*(3*(4/1))\n((2*3)*4)^1\n(2*(3*4))^1\n((2*3)*(4^1))\n2*((3*4)^1)\n2*(3*(4^1))\n((2^3)*(4-1))\n((2+4)*(3+1))\n((2*4)*3)*1\n(2*(4*3))*1\n((2*4)*(3*1))\n2*((4*3)*1)\n2*(4*(3*1))\n((2*4)*3)/1\n(2*(4*3))/1\n((2*4)*(3/1))\n2*((4*3)/1)\n2*(4*(3/1))\n((2*4)*3)^1\n(2*(4*3))^1\n((2*4)*(3^1))\n2*((4*3)^1)\n2*(4*(3^1))\n((2+4)*(1+3))\n((2*4)*1)*3\n(2*(4*1))*3\n((2*4)*(1*3))\n2*((4*1)*3)\n2*(4*(1*3))\n((2*4)/1)*3\n(2*(4/1))*3\n2*((4/1)*3)\n((2*4)/(1/3))\n2*(4/(1/3))\n((2*4)^1)*3\n(2*(4^1))*3\n2*((4^1)*3)\n(2^(4-1))*3\n((3+2)+1)*4\n(3+(2+1))*4\n((3*2)*1)*4\n(3*(2*1))*4\n((3*2)*(1*4))\n3*((2*1)*4)\n3*(2*(1*4))\n((3*2)/1)*4\n(3*(2/1))*4\n3*((2/1)*4)\n((3*2)/(1/4))\n3*(2/(1/4))\n((3*2)^1)*4\n(3*(2^1))*4\n3*((2^1)*4)\n3/(2^(1-4))\n((3*2)*4)*1\n(3*(2*4))*1\n((3*2)*(4*1))\n3*((2*4)*1)\n3*(2*(4*1))\n((3*2)*4)/1\n(3*(2*4))/1\n((3*2)*(4/1))\n3*((2*4)/1)\n3*(2*(4/1))\n((3*2)*4)^1\n(3*(2*4))^1\n((3*2)*(4^1))\n3*((2*4)^1)\n3*(2*(4^1))\n3*(2^(4-1))\n((3+1)+2)*4\n(3+(1+2))*4\n((3+1)*(2+4))\n((3*1)*2)*4\n(3*(1*2))*4\n((3*1)*(2*4))\n3*((1*2)*4)\n3*(1*(2*4))\n((3/1)*2)*4\n((3/1)*(2*4))\n(3/(1/2))*4\n3/(1/(2*4))\n3/((1/2)/4)\n((3^1)*2)*4\n((3^1)*(2*4))\n((3+1)*(4+2))\n((3*1)*4)*2\n(3*(1*4))*2\n((3*1)*(4*2))\n3*((1*4)*2)\n3*(1*(4*2))\n((3/1)*4)*2\n((3/1)*(4*2))\n(3/(1/4))*2\n3/(1/(4*2))\n3/((1/4)/2)\n((3^1)*4)*2\n((3^1)*(4*2))\n((3*4)*1)*2\n(3*(4*1))*2\n((3*4)*(1*2))\n3*((4*1)*2)\n3*(4*(1*2))\n((3*4)/1)*2\n(3*(4/1))*2\n3*((4/1)*2)\n((3*4)/(1/2))\n3*(4/(1/2))\n((3*4)^1)*2\n(3*(4^1))*2\n3*((4^1)*2)\n((3*4)*2)*1\n(3*(4*2))*1\n((3*4)*(2*1))\n3*((4*2)*1)\n3*(4*(2*1))\n((3*4)*2)/1\n(3*(4*2))/1\n((3*4)*(2/1))\n3*((4*2)/1)\n3*(4*(2/1))\n((3*4)*2)^1\n(3*(4*2))^1\n((3*4)*(2^1))\n3*((4*2)^1)\n3*(4*(2^1))\n((4+2)*(3+1))\n4*((2+3)+1)\n4*(2+(3+1))\n((4*2)*3)*1\n(4*(2*3))*1\n((4*2)*(3*1))\n4*((2*3)*1)\n4*(2*(3*1))\n((4*2)*3)/1\n(4*(2*3))/1\n((4*2)*(3/1))\n4*((2*3)/1)\n4*(2*(3/1))\n((4*2)*3)^1\n(4*(2*3))^1\n((4*2)*(3^1))\n4*((2*3)^1)\n4*(2*(3^1))\n((4+2)*(1+3))\n4*((2+1)+3)\n4*(2+(1+3))\n((4*2)*1)*3\n(4*(2*1))*3\n((4*2)*(1*3))\n4*((2*1)*3)\n4*(2*(1*3))\n((4*2)/1)*3\n(4*(2/1))*3\n4*((2/1)*3)\n((4*2)/(1/3))\n4*(2/(1/3))\n((4*2)^1)*3\n(4*(2^1))*3\n4*((2^1)*3)\n4*((3+2)+1)\n4*(3+(2+1))\n((4*3)*2)*1\n(4*(3*2))*1\n((4*3)*(2*1))\n4*((3*2)*1)\n4*(3*(2*1))\n((4*3)*2)/1\n(4*(3*2))/1\n((4*3)*(2/1))\n4*((3*2)/1)\n4*(3*(2/1))\n((4*3)*2)^1\n(4*(3*2))^1\n((4*3)*(2^1))\n4*((3*2)^1)\n4*(3*(2^1))\n4*((3+1)+2)\n4*(3+(1+2))\n((4*3)*1)*2\n(4*(3*1))*2\n((4*3)*(1*2))\n4*((3*1)*2)\n4*(3*(1*2))\n((4*3)/1)*2\n(4*(3/1))*2\n4*((3/1)*2)\n((4*3)/(1/2))\n4*(3/(1/2))\n((4*3)^1)*2\n(4*(3^1))*2\n4*((3^1)*2)\n4*((1+3)+2)\n4*(1+(3+2))\n((4*1)*3)*2\n(4*(1*3))*2\n((4*1)*(3*2))\n4*((1*3)*2)\n4*(1*(3*2))\n((4/1)*3)*2\n((4/1)*(3*2))\n(4/(1/3))*2\n4/(1/(3*2))\n4/((1/3)/2)\n((4^1)*3)*2\n((4^1)*(3*2))\n((4-1)*(2^3))\n4*((1+2)+3)\n4*(1+(2+3))\n((4*1)*2)*3\n(4*(1*2))*3\n((4*1)*(2*3))\n4*((1*2)*3)\n4*(1*(2*3))\n((4/1)*2)*3\n((4/1)*(2*3))\n(4/(1/2))*3\n4/(1/(2*3))\n4/((1/2)/3)\n((4^1)*2)*3\n((4^1)*(2*3))\n#\n','1+1\n1\n1+1+1+1\n(1+2+3)*4\n(1+2+3)*4\n1*2*3*4\n1*2*3*4\n1*2*3*4\n1*2*3*4\n1*2*3*4\n1*2*4*3\n1*2*4*3\n1*2*4*3\n1*2*4*3\n1*2*4*3\n(1+3+2)*4\n(1+3+2)*4\n(1+3)*(2+4)\n1*3*2*4\n1*3*2*4\n1*3*2*4\n1*3*2*4\n1*3*2*4\n(1+3)*(4+2)\n1*3*4*2\n1*3*4*2\n1*3*4*2\n1*3*4*2\n1*3*4*2\n1*4*3*2\n1*4*3*2\n1*4*3*2\n1*4*3*2\n1*4*3*2\n1*4*2*3\n1*4*2*3\n1*4*2*3\n1*4*2*3\n1*4*2*3\n(2+1+3)*4\n(2+1+3)*4\n2*1*3*4\n2*1*3*4\n2*1*3*4\n2*1*3*4\n2*1*3*4\n2/1*3*4\n2/1*3*4\n2/(1/3)*4\n2/(1/(3*4))\n2/(1/3/4)\n2^1*3*4\n2^1*3*4\n2*1*4*3\n2*1*4*3\n2*1*4*3\n2*1*4*3\n2*1*4*3\n2/1*4*3\n2/1*4*3\n2/(1/4)*3\n2/(1/(4*3))\n2/(1/4/3)\n2^1*4*3\n2^1*4*3\n(2+3+1)*4\n(2+3+1)*4\n2*3*1*4\n2*3*1*4\n2*3*1*4\n2*3*1*4\n2*3*1*4\n2*3/1*4\n2*3/1*4\n2*3/1*4\n2*3/(1/4)\n2*3/(1/4)\n(2*3)^1*4\n2*3^1*4\n2*3^1*4\n2*3*4*1\n2*3*4*1\n2*3*4*1\n2*3*4*1\n2*3*4*1\n2*3*4/1\n2*3*4/1\n2*3*4/1\n2*3*4/1\n2*3*4/1\n(2*3*4)^1\n(2*3*4)^1\n2*3*4^1\n2*(3*4)^1\n2*3*4^1\n2^3*(4-1)\n(2+4)*(3+1)\n2*4*3*1\n2*4*3*1\n2*4*3*1\n2*4*3*1\n2*4*3*1\n2*4*3/1\n2*4*3/1\n2*4*3/1\n2*4*3/1\n2*4*3/1\n(2*4*3)^1\n(2*4*3)^1\n2*4*3^1\n2*(4*3)^1\n2*4*3^1\n(2+4)*(1+3)\n2*4*1*3\n2*4*1*3\n2*4*1*3\n2*4*1*3\n2*4*1*3\n2*4/1*3\n2*4/1*3\n2*4/1*3\n2*4/(1/3)\n2*4/(1/3)\n(2*4)^1*3\n2*4^1*3\n2*4^1*3\n2^(4-1)*3\n(3+2+1)*4\n(3+2+1)*4\n3*2*1*4\n3*2*1*4\n3*2*1*4\n3*2*1*4\n3*2*1*4\n3*2/1*4\n3*2/1*4\n3*2/1*4\n3*2/(1/4)\n3*2/(1/4)\n(3*2)^1*4\n3*2^1*4\n3*2^1*4\n3/2^(1-4)\n3*2*4*1\n3*2*4*1\n3*2*4*1\n3*2*4*1\n3*2*4*1\n3*2*4/1\n3*2*4/1\n3*2*4/1\n3*2*4/1\n3*2*4/1\n(3*2*4)^1\n(3*2*4)^1\n3*2*4^1\n3*(2*4)^1\n3*2*4^1\n3*2^(4-1)\n(3+1+2)*4\n(3+1+2)*4\n(3+1)*(2+4)\n3*1*2*4\n3*1*2*4\n3*1*2*4\n3*1*2*4\n3*1*2*4\n3/1*2*4\n3/1*2*4\n3/(1/2)*4\n3/(1/(2*4))\n3/(1/2/4)\n3^1*2*4\n3^1*2*4\n(3+1)*(4+2)\n3*1*4*2\n3*1*4*2\n3*1*4*2\n3*1*4*2\n3*1*4*2\n3/1*4*2\n3/1*4*2\n3/(1/4)*2\n3/(1/(4*2))\n3/(1/4/2)\n3^1*4*2\n3^1*4*2\n3*4*1*2\n3*4*1*2\n3*4*1*2\n3*4*1*2\n3*4*1*2\n3*4/1*2\n3*4/1*2\n3*4/1*2\n3*4/(1/2)\n3*4/(1/2)\n(3*4)^1*2\n3*4^1*2\n3*4^1*2\n3*4*2*1\n3*4*2*1\n3*4*2*1\n3*4*2*1\n3*4*2*1\n3*4*2/1\n3*4*2/1\n3*4*2/1\n3*4*2/1\n3*4*2/1\n(3*4*2)^1\n(3*4*2)^1\n3*4*2^1\n3*(4*2)^1\n3*4*2^1\n(4+2)*(3+1)\n4*(2+3+1)\n4*(2+3+1)\n4*2*3*1\n4*2*3*1\n4*2*3*1\n4*2*3*1\n4*2*3*1\n4*2*3/1\n4*2*3/1\n4*2*3/1\n4*2*3/1\n4*2*3/1\n(4*2*3)^1\n(4*2*3)^1\n4*2*3^1\n4*(2*3)^1\n4*2*3^1\n(4+2)*(1+3)\n4*(2+1+3)\n4*(2+1+3)\n4*2*1*3\n4*2*1*3\n4*2*1*3\n4*2*1*3\n4*2*1*3\n4*2/1*3\n4*2/1*3\n4*2/1*3\n4*2/(1/3)\n4*2/(1/3)\n(4*2)^1*3\n4*2^1*3\n4*2^1*3\n4*(3+2+1)\n4*(3+2+1)\n4*3*2*1\n4*3*2*1\n4*3*2*1\n4*3*2*1\n4*3*2*1\n4*3*2/1\n4*3*2/1\n4*3*2/1\n4*3*2/1\n4*3*2/1\n(4*3*2)^1\n(4*3*2)^1\n4*3*2^1\n4*(3*2)^1\n4*3*2^1\n4*(3+1+2)\n4*(3+1+2)\n4*3*1*2\n4*3*1*2\n4*3*1*2\n4*3*1*2\n4*3*1*2\n4*3/1*2\n4*3/1*2\n4*3/1*2\n4*3/(1/2)\n4*3/(1/2)\n(4*3)^1*2\n4*3^1*2\n4*3^1*2\n4*(1+3+2)\n4*(1+3+2)\n4*1*3*2\n4*1*3*2\n4*1*3*2\n4*1*3*2\n4*1*3*2\n4/1*3*2\n4/1*3*2\n4/(1/3)*2\n4/(1/(3*2))\n4/(1/3/2)\n4^1*3*2\n4^1*3*2\n(4-1)*2^3\n4*(1+2+3)\n4*(1+2+3)\n4*1*2*3\n4*1*2*3\n4*1*2*3\n4*1*2*3\n4*1*2*3\n4/1*2*3\n4/1*2*3\n4/(1/2)*3\n4/(1/(2*3))\n4/(1/2/3)\n4^1*2*3\n4^1*2*3\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1168,'去掉双斜杠注释','<p>\n<table border=\"0\" width=\"100%\" background=\"images/table_back.jpg\">\n    <tbody>\n        <tr>\n            <td>\n            <p><font size=\"3\" face=\"Times New Roman\">将C程序代码中的双斜杠注释去掉。</font></p>\n            </td>\n        </tr>\n    </tbody>\n</table>\n</p>','<p><font face=\"Times New Roman\">输入数据中含有一些符合C++语法的代码行。需要说明的是，为了方便编程，规定双斜杠注释内容不含有双引号,源程序中没空行。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出不含有双斜杠注释的C++代码，除了注释代码之外，原语句行格式不变。 </font></p>','//======================\n// simplest program\n//======================\n#include\nusing namespace std;\n//----------------------\nint main(){\n  cout<<”hello world!\\n”;\n}//---------------------\n\n','#include\nusing namespace std;\nint main(){\n  cout<<”hello world!\\n”;\n}\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1169,'去掉空格','<p><font size=\"3\" face=\"Times New Roman\">读入一些字符串，将其中的空格去掉。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入为多行，每行为一个字符串，字符串只由字母、数字和空格组成，长度不超过80。输入以&ldquo;End of file&rdquo;结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每行输入，输出转换后的字符串。</font></p>','\nHello World\n1 2 3\nNice to meet you\nabc\n','HelloWorld\n123\nNicetomeetyou\nabc\n\n','0','<p><font face=\"Times New Roman\">用scanf是不能读入一行有空格的字符串的，用gets吧。 用&ldquo;gets(str) != NULL&rdquo;可以判断输入是否结束，如果此条件为假（即gets(str) == NULL），则表示输入结束（对于本题）。</font></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1170,'发工资咯','<p><font face=\"Times New Roman\">作为吉大的老师，最盼望的日子就是每月的9号了，因为这一天是发工资的日子，养家糊口就靠它了，呵呵 <br />\n但是对于学校财务处的工作人员来说，这一天则是很忙碌的一天，财务处的小胡老师最近就在考虑一个问题：如果每个老师的工资额都知道，最少需要准备多少张人民币，才能在给每位老师发工资的时候都不用老师找零呢？ <br />\n这里假设老师的工资都是正整数，单位元，人民币一共有100元、50元、10元、5元、2元和1元六种。</font></p>','<p><font face=\"Times New Roman\">输入数据包含多个测试实例，每个测试实例的第一行是一个整数n（n&lt;100），表示老师的人数，然后是n个老师的工资。 <br />\nn=0表示输入的结束，不做处理。</font></p>','<p><font face=\"Times New Roman\">对于每个测试实例输出一个整数x,表示至少需要准备的人民币张数。每个输出占一行。</font></p>','3 1 2 3\n0','4','0','','吉首大学软件学院','2017-04-30 15:05:04',1000,65536,'N',0,0,0),(1171,'取石子游戏','<p><font size=\"3\" face=\"Times New Roman\">有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。 </font></p>','2	1\n','0\n','0','','软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1172,'哥德巴赫曾猜测','<p><font face=\"Times New Roman\" size=\"3\">德国数学家哥德巴赫曾猜测：任何大于6的偶数都可以分解成两个素数（素数对）的和。但有些偶数可以分解成多种素数对的和，如：  10=3+7，10=5+5，即10可以分解成两种不同的素数对</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入任意的&gt;6的正偶数(&lt;32767)</font></p>','<p><font face=\"Times New Roman\" size=\"3\">试求给出的偶数可以分解成多少种不同的素数对（注：  A+B与B+A认为是相同素数对）</font></p>','1234\n','25\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1173,'回文串','<p><font face=\"Times New Roman\" size=\"3\">回文串是从左到右或者从右到左读起来都一样的字符串，试编程判别一个字符串是否为回文串。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入一个字符串。串长度&lt;255.</font></p>','<p><font face=\"Times New Roman\" size=\"3\">判别输入的字符串是否为回文串，是输出&quot;Y&quot;,否则输出&quot;N&quot;。</font></p>','abcba\n','Y\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1174,'回文数(一)','<p>若一个数（首位不为0）从左到右读与从右到左读都是一样，这个数就叫做回文数，例如12521就是一个回文数。 <br />\n给定一个正整数，把它的每一个位上的数字倒过来排列组成一个新数，然后与原数相加，如果是回文数则停止，如果不是，则重复这个操作，直到和为回文数为止。给定的数本身不为回文数。 <br />\n例如：87则有： <br />\nSTEP1: 87+78=165 <br />\nSTEP2: 165+561=726 <br />\nSTEP3: 726+627=1353 <br />\nSTEP4: 1353+3531=4884 <br />\n编写一个程序，输入M（12&lt;=M&lt;=100）,输出最少经过几步可以得到回文数。如果在8步以内（含8步）不可能得到回文数，则输出0。 <br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">第1行一个正整数L,代表测试数据的组数。 <br />\n接下来L行每行一个整数M（12&lt;=M&lt;=100），M本身不为回文数； <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出L行，第i行对应输入数据的第i+1行，输出最少需要的步数；如果步数大于8，则输出0。</font></p>','3\n12\n87\n89\n\n','1\n4\n0\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1175,'多输入输出练习1','<p><font size=\"3\" face=\"Times New Roman\">给定很多行数据,要求输出每一行的最大值.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">程序有多行输入,每一行以0结束. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">有多行输出,对应输入的行数.</font></p>','23 -456 33 78 0\n43 23 987 66 -137 324 0\n544 27 7 9 102 234 -44 -732 723 0','78\n987\n723','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1176,'多输入输出练习2','<p><font size=\"3\" face=\"Times New Roman\">已之一个圆的半径,求面积.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入有多行,第一行是一个整数n(对应总行数),以下每一行只有一个浮点数(对应一个圆的半径).</font></p>','<font size=\"3\" face=\"Times New Roman\"> 输出有多行,每一行是跟输入对应面积.  <br />\n输出保留6位小数</font>','4\n3.14\n2.13\n6\n5.3','30.973933\n14.252671\n113.094000\n88.244735','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1177,'大小写转换','<p><font size=\"3\" face=\"Times New Roman\">读入一些字符串，将其中的小写字母转成大写字母（其他字符不变）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入为多行，每行为一个字符串，字符串只由字母和数字组成，长度不超过80。输入以&ldquo;End of file&rdquo;结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每行输入，输出转换后的字符串。</font></p>','Hello\nICPC2004\n12345abcde','HELLO\nICPC2004\n12345ABCDE','0','','吉首大学软件学院','2017-04-30 15:05:04',1000,65536,'N',0,0,0),(1178,'字符串的修改','<p>设A和B是两个字符串。我们要用最少的字符操作次数，将字符串A转换为字符串B。这里所说的字符操作共有三种： <br />\n<br />\n1. 删除一个字符； <br />\n2. 插入一个字符； <br />\n3. 将一个字符改为另一个字符。 <br />\n对任给的两个字符串A和B，计算出将字符串A变换为字符串B所用的最少字符操作次数。</p>','<p><font size=\"3\" face=\"Times New Roman\">第一行为字符串A；第二行为字符串B；字符串A和B的长度均小于200。 </font></p>','<p>只有一个正整数，为最少字符操作次数。</p>','sfdxbqw\ngfdgw\n\n','4\n','0','','吉首大学软件学院\n吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1179,'字符串问题','<p><font face=\"Times New Roman\" size=\"3\">字符串处理在计算机中有很多复杂的操作，但是这些复杂的操作都是由基本的字符串操作复合而成，要求编写一字符串颠倒的程序，把字符串中的字符颠倒位置。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入一字符串（&lt;255）</font></p>','<p><font face=\"Times New Roman\" size=\"3\">按位进行颠倒的结果。</font></p>','COMPUTER\n','RETUPMOC','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1180,'字符排列问题','<p><font size=\"3\" face=\"Times New Roman\">有n个字母，列出由该字母组成的字符串的全排列（相同的排列只计一次）。</font></p>','<p><font face=\"Times New Roman\">第一行输入是字母个数n，1&lt;=n&lt;=20。接下来一行输入的是待排列的n个字母。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">计算出的n 个字母的所有不同排列总数</font></p>','4\naacc\n\n','6','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1181,'孤独的骑士','<p><font face=\"Times New Roman\" size=\"3\">任务很简单. 确定国际象棋棋盘上处于骑士攻击之下的格子个数. 棋盘上没有其它棋子. 骑士的走法: 横(纵)向走两个格, 再纵(横)向走一个格(类似于中国象棋中的马).</font></p>','<p><font face=\"Times New Roman\" size=\"3\">第一行为测试次数N, 1 &le; N &le; 100. <br />\n后面N行每行包含一个坐标表示骑士的位置. <br />\n字母表示横向位置, 数字表示纵向位置. <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输出N行. 每行一个整数, 表示骑士可攻击的格子个数.</font></p>','3\na1\nd4\ng6\n\n','2\n8\n6\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1182,'密码截获','<p><font size=\"3\" face=\"Times New Roman\">Catcher是MCA国的情报员，他工作时发现敌国会用一些对称的密码 进行通信，比如像这些ABBA，ABA，A，123321，但是他们有时会在开始或结束时加入一些无关的字符以防止别国破解。比如进行下列变化 ABBA-&gt;12ABBA,ABA-&gt;ABAKK,123321-&gt;51233214　。因为截获的串太长了，而且存在多种可能的情况 （abaaab可看作是aba,或baaab的加密形式），Cathcer的工作量实在是太大了，他只能向电脑高手求助，你能帮Catcher找出最长的 有效密码串吗？ </font></p>','<p><font size=\"3\" face=\"Times New Roman\">测试数据有若干行字符串，包括字母，数字，符号。（字母区分大小写） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">与输入相对应每一行输出一个整数，代表最长有效密码串的长度。</font></p>','ABBA\n12ABBA\nA\nABAKK\n51233214\nabaaab','4\n4\n1\n3\n6\n5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1183,'小明A+B','<p><font size=\"3\" face=\"Times New Roman\">小明今年3岁了, 现在他已经能够认识100以内的非负整数,  并且能够进行100以内的非负整数的加法计算. 对于大于等于100的整数, 小明仅保留该数的最后两位进行计算, 如果计算结果大于等于100,  那么小明也仅保留计算结果的最后两位. 例如, 对于小明来说: 1) 1234和34是相等的 2) 35+80=15 给定非负整数A和B,  你的任务是代表小明计算出A+B的值.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据的第一行为一个正整数T, 表示测试数据的组数. 然后是T组测试数据. 每组测试数据包含两个非负整数A和B(A和B均在int型可表示的范围内). </font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组测试数据, 输出小明A+B的结果.</font></p>','2\n35 80\n15 1152','15\n67','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1184,'平方和与立方和','<p><font size=\"3\" face=\"Times New Roman\">给定一段连续的整数，求出他们中所有偶数的平方和以及所有奇数的立方和。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多组测试实例，每组测试实例包含一行，由两个整数m和n组成。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行，应包括两个整数x和y，分别表示该段连续的整数中所有偶数的平方和以及所有奇数的立方和。 <br />\n你可以认为32位整数足以保存结果。</font></p>','1 3\n2 5\n\n','4 28\n20 152\n\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1185,'年会','<p><font size=\"3\" face=\"Times New Roman\">背景  <br />\n某大学校长准备开一次年会. 该校的员工具有等级结构, 即师生关系构成一棵树, 以校长为树根. 员工号是1到N之间的整数. 人事部门把所有员工按活跃度排序. 为了让年会使所有参加者都玩的高兴, 校长不想让任何一个员工和他/她的直接导师同时被邀请.  <br />\n<br />\n你的任务是列一张客人名单, 以使客人活跃度最大. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行是一个整数N. 1 &le; N &le; 6000.  <br />\n接着的N行包含相应员工的活跃度.活跃度是一个-128到127之间的整数.  <br />\n其后是师生关系表. 每行有如下形式:  <br />\nL K  <br />\n表示第K个员工是第L个的直接导师.  <br />\n输入以  <br />\n0 0  <br />\n结束.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出是客人最大总活跃度.</font></p>','7\n1\n1\n1\n1\n1\n1\n1\n1 3\n2 3\n6 4\n7 4\n4 5\n3 5\n0 0','5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1186,'幸运儿','<p><font size=\"3\" face=\"Times New Roman\">n 个人围成一圈, 并依次编号1～n，。从编号为1 的人开始，按顺时针方向每隔一人选出一个，剩下的人重新围成一圈，如此循环直到剩下两人，这剩下的两人就是幸运儿。如果你想成为最后两个幸运儿，请问开始时应该站在什么位置？（设3&lt;=n&lt;=50） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">有多个测试序列。每行是开始时的人数n </font></p>','<p>第1 行是选出顺序，第2 行是两名幸运儿的开始位置（按升序排列），位置编号之间用一个空格分开。</p>','12\n20\n45\n\n','2 4 6 8 10 12 3 7 11 5 \n1 9\n2 4 6 8 10 12 14 16 18 20 3 7 11 15 19 5 13 9 \n1 17\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 3 7 11 15 19 23 27 31 35 39 43 5 13 21 29 37 45 9 25 41 17 \n1 33 \n\n','0','','吉首大学软件学院\n吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1187,'开心的金明','<p><font size=\"3\" face=\"Times New Roman\">金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的 很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早金明就开始做预算， 但是他想买的东西太多了，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查 到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />\n<br />\n设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />\nv[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />\n<br />\n请你帮助金明设计一个满足要求的购物单。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行，为两个正整数，用一个空格隔开：  <br />\nN m  <br />\n（其中N（&lt;30000）表示总钱数，m（&lt;25）为希望购买物品的个数。）  <br />\n从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有2个非负整数  <br />\nv p  <br />\n（其中v表示该物品的价格(v&lt;=10000)，p表示该物品的重要度(1~5)）  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;100000000）。</font></p>','1000 5\n800 2\n400 5\n300 5\n400 3\n200 2','3900','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1188,'恺撒密码','<p><font face=\"Times New Roman\" size=\"3\">恺撒生活在充满危险和阴谋的时代. 恺撒面对的最困难的问题是生存. 为了生存, 他决定创造一种密码. 这种密码听起来难以置信, 如果不知 <br />\n<br />\n道方法, 没有人可以破解. <br />\n<br />\n你是恺撒军队的一个上尉. 你的工作是解密消息并将之提供给将军. 密码很简单. 对明文的每个字母右移5个位置以创建密文 (如字母\'A\', 密 <br />\n<br />\n文是\'F\'). <br />\n有如下对应: <br />\n<br />\n密文 <br />\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z <br />\n<br />\n明文 <br />\nV W X Y Z A B C D E F G H I J K L M N O P Q R S T U <br />\n<br />\n只有字母需要移位, 其它字符保持不变, 所有字母均是大写. <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入为至多100组数据. 每组数据有如下格式, 中间无空行. <br />\n<br />\n一组数据有3部分: <br />\n<br />\n起始行 - 单独一行: &quot;START&quot; <br />\n密文 - 单独一行, 包含1到200个字符, 组成恺撒的消息. <br />\n结束行 - 单独一行: &quot;END&quot; <br />\n<br />\n最后一组输入是单独一行: &quot;ENDOFINPUT&quot;. </font></p>','<p><font face=\"Times New Roman\">对每组数据有一行输出. 即恺撒的原始消息. </font></p>','START\nNS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\nEND\nSTART\nN BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ\nEND\nSTART\nIFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ\nEND\nENDOFINPUT\n\n','IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\nI WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME\nDANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1189,'愚蠢的摄影师','<p><font face=\"Times New Roman\" size=\"3\">背景 <br />\n&quot;如果两个人相差一秒出生, 其中一个是小孩, 那么另一个也是小孩. 由此可以推论, 所有人均是小孩.&quot; <br />\n<br />\n问题 <br />\n数计系是一个由N个人组成的大家庭, 分别为1, 2, 3, ..., N岁. <br />\n<br />\n有一次系主任想为全系拍张合照. 需要所有学生站成一排. <br />\n起先他想按他们的岁数从小到大安排, 但后来又觉得这样不自然. <br />\n于是他建议按如下方案站排: <br />\n1岁的在最左边. <br />\n每相邻两人不得相差超过2岁. <br />\n<br />\n这样学生的岁数看起来显得很平均(25岁和27岁的人差别很难看出). <br />\n存在多种方案满足此要求. <br />\n摄影师不想违反系主任的意愿, 就为每种可能的安排分别拍了一张照片. <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">整数N, 1&lt;=N&lt;=55.</font></p>','<p><font face=\"Times New Roman\" size=\"3\">所拍照片张数.</font></p>','4','4\n','0','<p><font face=\"Times New Roman\" size=\"3\">若N=4, 则有4种可能的安排: (1,2,3,4), (1,2,4,3), (1,3,2,4) and (1,3,4,2).</font></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1190,'成绩转换','<p><font face=\"Times New Roman\">输入一个百分制的成绩t，将其转换成对应的等级，具体转换规则如下： <br />\n90~100为A; <br />\n80~89为B; <br />\n70~79为C; <br />\n60~69为D; <br />\n0~59为E; </font><br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，由一个整数组成。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行。如果输入数据不在0~100范围内，请输出一行：&ldquo;Score is error!&rdquo;。</font></p>','56\n67\n100\n123\n\n','E\nD\nA\nScore is error!\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1191,'换位置','<p><font size=\"3\" face=\"Times New Roman\">M个人围成一圈，每分钟相邻的两个人可以交换位置（只能有一对交换）。求使M个人的顺序颠倒（即每个人左边相邻的人换到右边，右边相邻的人换到左边）所需的最少时间（分钟数）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行为测试数据的组数n，以后n行中每行为一个小于32767的正整数，表示M</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组测试数据，输出一个数，表示最少需要的分钟数。</font></p>','3\n4\n5\n6\n','2\n4\n6\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1192,'排列','<p><font size=\"3\" face=\"Times New Roman\">Ray又对数字的列产生了兴趣: 现有四张卡片，用这四张卡片能排列出很多不同的4位数，要求按从小到大的顺序输出这些4位数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行是一个整数N，表示数据的组数。每组数据占一行，代表四张卡片上的数字（保证四个数字都不同，且0&lt;数字&lt;10）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对每组卡片按从小到大的顺序输出所有能由这四张卡片组成的4位数，千位数字相同的在同一行，同一行中每个四位数间用空格分隔，每组输出数据间空一行，最后一组数据后面没有空行。</font></p>','2\n1 2 3 4\n1 2 3 5','1234 1243 1324 1342 1423 1432\n2134 2143 2314 2341 2413 2431\n3124 3142 3214 3241 3412 3421\n4123 4132 4213 4231 4312 4321\n\n1235 1253 1325 1352 1523 1532\n2135 2153 2315 2351 2513 2531\n3125 3152 3215 3251 3512 3521\n5123 5132 5213 5231 5312 5321','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1193,'数列','<p><font size=\"3\" face=\"Times New Roman\">给定一个正整数k(3&le;k&le;15),把所有k的方幂及所有有限个互不相等的k的方幂之和构成一个递增的序列，例如，当k=3时，这个序列是：  <br />\n1，3，4，9，10，12，13，&hellip;  <br />\n（该序列实际上就是：3^0，3^1，3^0+3^1，3^2，3^0+3^2，3^1+3^2，3^0+3^1+3^2，&hellip;）  <br />\n请你求出这个序列的第N项的值（用10进制数表示）。  <br />\n例如，对于k=3，N=100，正确答案应该是981。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有1行，为2个正整数，用一个空格隔开：  <br />\nk N  <br />\n（k、N的含义与上述的问题描述一致，且3&le;k&le;15，10&le;N&le;1000）。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">计算结果，是一个正整数（在所有的测试数据中，结果均不超过2.1*10^9）。（整数前不要有空格和其他符号）。</font></p>','3 100','981','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1194,'数列排序','<p><font size=\"3\" face=\"Times New Roman\">将一正整数序列{K1,K2,...,K9}重新排列成一个新的序列。新序列中，比K1小的数都在K1的前面(左面)，比K1大的数都在K1的后面(右面)。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入有多行,第一行为N表示行数,每行9个整数.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出N行,按要求进行排序的结果.</font></p>','2\n6 8 9 1 2 5 4 7 3\n3 5 8 9 1 2 6 4 7\n\n','3 4 5 2 1 6 8 9 7\n2 1 3 5 8 9 6 4 7\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1195,'数列有序','<p>有n(n&lt;=100)个整数，已经按照从小到大顺序排列好，现在另外给一个整数x，请将该数插入到序列中，并使新的序列仍然有序。</p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个测试实例，每组数据由两行组成，第一行是n和m，第二行是已经有序的n个数的数列。n和m同时为0标示输入数据的结束，本行不做处理。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，输出插入新的元素后的数列。</font></p>','3 3\n1 2 4\n0 0\n\n','1 2 3 4\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1196,'数列问题','<p><font face=\"Times New Roman\" size=\"3\">已知一个数列的前3个数为3，4，5，以后每个数为前3个数的和，编程序求此数列的第N项</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入N(N&lt;=35)</font></p>','<p><font face=\"Times New Roman\" size=\"3\">求出第N项的值</font></p>','28\n','25527448\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1197,'数字统计','<p><font face=\"Times New Roman\" size=\"3\">一本书的页码从自然数1 开始顺序编码直到自然数n。书的页码按照通常的习惯编排，  <br />\n每个页码都不含多余的前导数字0。例如，第6 页用数字6 表示，而不是06 或006 等。数  <br />\n字计数问题要求对给定书的总页码n，计算出书的全部页码中分别用到多少次数字0，1， <br />\n2，&hellip;，9。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">给出表示书的总页码的整数n（1&le;n&le;2^31-1）</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输出10行，在第k行输出页码中用到数字k-1 的次数，k=1，2，&hellip;，10。</font></p>','11\n','1\n4\n1\n1\n1\n1\n1\n1\n1\n1','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1198,'敲七','<p><font face=\"Times New Roman\" size=\"3\">输出7和7的倍数，还有包含7的数字例如（17，27，37...70，71，72，73...）</font></p>','<p><font face=\"Times New Roman\" size=\"3\">一个整数N。(N不大于30000) </font></p>','<p><font face=\"Times New Roman\" size=\"3\">统计出不大于N的与7有关的数字的个数。如20以内与7有关的数为7、14、17共3个。</font></p>','20\n','3\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1199,'整除的尾数','<p><font size=\"3\" face=\"Times New Roman\">一个整数，只知道前几位，不知道末二位，被另一个整数除尽了，那么该数的末二位该是什么呢</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有若干组，每组数据包含二个整数a，b（0＜a＜10000, 10＜b＜100），若遇到0 0则处理结束</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对应每组数据，将满足条件的所有尾数在一行内输出，格式见样本输出。同组数据的输出，其每个尾数之间空一格，行末没有空格。</font></p>','200 40\n1992 95\n0 0','00 40 80\n15\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1200,'文科生的悲哀','<p><font size=\"3\" face=\"Times New Roman\">化学不及格的Matrix67无奈选择了文科。他必须硬着头皮准备一次又一次的文科考试。  <br />\n在这一学期一共有n次文科考试，考试科目有4种，分别为政治、历史、地理和综合。每次考哪一科是不定的，因此在考试前Matrix67不知道应该 去复习哪一科的功课。他希望能预测出下一次可能考的科目。于是，他收集到了以往的文科考试的资料。从以往的考试中，他发现了这样几个规律：  <br />\n1.如果这次考的是政治，那么下一次一定会考历史；  <br />\n2.如果这次考的是综合，那么下一次一定会考地理；  <br />\n3.如果这次考的是历史，那么下一次要么考政治，要么考地理；  <br />\n4.如果这次考的是地理，那么下一次要么考历史，要么考综合。  <br />\nMatrix67已经知道，本学期的第一次考试科目为政治。他打算拟定一个可以应对所有可能情况的应考复习计划。因此，他想知道，整个学期有多少种可能的考试科目安排满足以上规律。你能帮他算出来吗？</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个正整数n，代表本学期总的考试次数。（输入数据保证n&lt;=10000） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个正整数，表示符合规律的科目安排方案的总数。  <br />\n考虑到这个结果可能会很大，因此你只需要输出它mod 7654321的值即可。</font></p>','5','5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1201,'方砖问题','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">用边长小于N的正方形方砖（注意，不要求所有的方砖大小相同，请看样例说明）不重叠地铺满N*N的正方形房间，最少要几块方砖。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">第一行是一个整数T,表示测试数据的组数,接下来的T 行，每一行是一个N(2&lt;=N&lt;=100)</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">对于每一组测试数据输出一行，为最少需要的块数。</span></p>','2 \n4 \n5','4 \n8','0','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">当N＝4时<span class=\"Apple-converted-space\">&nbsp;</span><br />\n最优的铺砖方法<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAABB<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAABB<span class=\"Apple-converted-space\">&nbsp;</span><br />\nCCDD<span class=\"Apple-converted-space\">&nbsp;</span><br />\nCCDD<span class=\"Apple-converted-space\">&nbsp;</span><br />\nA，B，C，D为四块方砖的代号。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n其他的铺砖方法，例如：<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAAAB<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAAAC<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAAAD<span class=\"Apple-converted-space\">&nbsp;</span><br />\nEFGH<span class=\"Apple-converted-space\">&nbsp;</span><br />\n需要的8块方砖，不是最少的。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1202,'日期排序','<p><font size=\"3\" face=\"Times New Roman\">有一些日期，日期格式为&ldquo;MM/DD/YYYY&rdquo;。编程将其按日期大小排列。</font></p>','','','15/12/1999\n10/21/2003\n10/22/2003\n02/12/2004\n11/30/2005\n12/31/2005\n','15/12/1999\n10/21/2003\n10/22/2003\n02/12/2004\n11/30/2005\n12/31/2005\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1203,'明明的随机数','<p><font face=\"Times New Roman\" size=\"3\">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N&le;100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">有2行，第1行为1个正整数，表示所生成的随机数的个数： <br />\nN <br />\n第2行有N个用空格隔开的正整数，为所产生的随机数。 <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">也是2行，第1行为1个正整数M，表示不相同的随机数的个数。第2行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</font></p>','10\n20 40 32 67 40 20 89 300 400 15\n\n','8\n15 20 32 40 67 89 300 400\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1204,'最多约数问题','<p><font face=\"Times New Roman\" size=\"3\">正整数x 的约数是能整除x 的正整数。正整数x  的约数个数记为div(x)。例如，1，2， <br />\n5，10 都是正整数10 的约数，且div(10)=4。设a 和b 是2 个正整数，a&le;b，找出a 和b  <br />\n之间约数个数最多的数x <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入2 个正整数a&le;b，编程计算a 和b  之间约数个数最多的数。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">程序运行结束时，找到a 和b  之间约数个数最多的数是x，将div(x)输出</font></p>','1 36\n','9\n','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1205,'最小公倍数','<p><font size=\"3\" face=\"Times New Roman\">两个正整数，计算这两个数的最小公倍数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据只有一行，包括两个不大于1000的正整数.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出数据也只有一行，给出这两个数的最小公倍数。</font></p>','10 14','70','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1206,'最小重量机器设计问题','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">设某一机器由n个部件组成，每一种部件都可以从m个不同的供应商处购得。设Wij 是<span class=\"Apple-converted-space\">&nbsp;</span><br />\n从供应商j处购得的部件i的重量，Cij 是相应的价格。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n试设计一个算法，给出总价格不超过c的最小重量机器设计。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n&prime;编程任务：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n对于给定的机器部件重量和机器部件价格，编程计算总价格不超过d的最小重量机器设<span class=\"Apple-converted-space\">&nbsp;</span><br />\n计。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">第一行有 3 个正整数 n ，m和 d。接下来的 2n 行，每<span class=\"Apple-converted-space\">&nbsp;</span><br />\n行m个数。前n行是c，后n行是w。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">将计算出的最小重量，以及每个部件的供应商输出</span></p>','3 3 4 \n1 2 3 \n3 2 1 \n2 2 2 \n1 2 3 \n3 2 1 \n2 2 2','4 \n1 3 1 ','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1207,'杨辉三角','<p><font size=\"3\" face=\"Times New Roman\">还记得中学时候学过的杨辉三角吗？具体的定义这里不再描述，你可以参考以下的图形： <br />\n1 <br />\n1 1 <br />\n1 2 1 <br />\n1 3 3 1 <br />\n1 4 6 4 1 <br />\n1 5 10 10 5 1 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个测试实例，每个测试实例的输入只包含一个正整数n（1＜=n＜=30），表示将要输出的杨辉三角的层数。</font></p>','<p>对应于每一个输入，请输出相应层数的杨辉三角，每一层的整数之间用一个空格隔开，每一个杨辉三角后面加一个空行。</p>','2 3\n','1\n1 1\n\n1\n1 1\n1 2 1\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1208,'查找最大元素','<p><font size=\"3\" face=\"Times New Roman\">对于输入的每个字符串，查找其中的最大字母，在该字母后面插入字符串&ldquo;(max)&rdquo;。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包括多个测试实例，每个实例由一行长度不超过100的字符串组成，字符串仅由大小写字母及数字构成</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例输出一行字符串，输出的结果是插入字符串&ldquo;(max)&rdquo;后的结果，如果存在多个最大的字母，就在每一个最大字母后面都插入&quot;(max)&quot;。</font></p>','abcdefgfedcba\nxxxxx\n','abcdefg(max)fedcba\nx(max)x(max)x(max)x(max)x(max)\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1209,'核电站问题','<p><font size=\"3\" face=\"Times New Roman\">一个核电站有N个放核物质的坑，坑排列在一条直线上。如果连续３个坑中放入核物质，则会发生爆炸，于是，在某些坑中可能不放核物质。现在，请你计算：对于给定的N，求不发生爆炸的放置核物质的方案总数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入文件只有多行，每行对应一个正整数N＜＝４０；</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出文件有多行，每行只有一个正整数，表示方案总数</font></p>','1\n2\n3\n4\n10','2\n4\n7\n13\n504','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1210,'检查一个数是否为质数','<p><font size=\"3\" face=\"Times New Roman\">输入一个正整数，检查该数是否为质数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入一个正整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出Y或者N</font></p>','34','N','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1211,'检查金币','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">ACM公司生产金币的设备出了问题，使得最近生产的10批金币的重量出现了波动：本来金币的标准重量是10克，但现在有的可能是11克，有的可能9克，也有可能是10克。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n现在只知道同一批金币的重量是相同的，你的任务是要把每批的单枚金币的重量找出来。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n你的设备有一个电子秤，但只允许称量一次！<span class=\"Apple-converted-space\">&nbsp;</span><br />\n你从第1批中取1枚金币，第2批取3枚，...第i批取3^(i&minus;1)枚...，第10批取3^9枚，总共29524枚。将这29524枚金币放在电子秤上，得到了总重量，就交给你的程序去！<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">有多个测试序列，每个测试序列一行，包含一个6位的正整数W(265716&le;W&le;324764)，表示29524枚金币的总重量</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">每个测试序列输出一行，包含10个用空格分开的正整数，分别表示10批金币的单枚重量，注意行尾没有空格。</span></p>','265716\n324764\n295240','9 9 9 9 9 9 9 9 9 9\n11 11 11 11 11 11 11 11 11 11\n10 10 10 10 10 10 10 10 10 10','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1212,'母牛生小牛','<p><font face=\"Times New Roman\" size=\"3\">设有一头小母牛，从出生第四年起每年生一头小母牛，按此规律，第N年时有几头母牛？</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入一个整数N。(1&le;N&le;50)</font></p>','<p><font face=\"Times New Roman\" size=\"3\">第N年时母牛的数量</font></p>','5\n','3\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1213,'求组合数','<p><font face=\"Times New Roman\">组合数的计算虽说简单但也不乏有些陷阱，这主要是因为语言中的数据类型在表示范围上是有限的。更何况还有中间结果溢出的现象，所以千万要小心。</font></p>','<p><font face=\"Times New Roman\">求组合数的数据都是成对（M与N）出现的，每对整数M和N满足0＜m, n&le;20，以EOF结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出该组合数。每个组合数换行。</font></p>','5 2\n18 13\n','10\n8568\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1214,'演讲大赛评分','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">最近&quot;老王&quot;很开心.他在大一的时候参加过数计学院的&ldquo;软件小组&rdquo;。告诉你个秘密，这个小组是个好地方，不但活动精彩而且有MM。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n这不，这个小组举办了一个叫做&ldquo;计算机演讲大赛&rdquo;的节目。这个节目有好多人参加，这不，成绩出来了，&quot;老王&quot;当是很勇敢，自告奋勇接下了算出大家的总得分的任务。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n当时有7个评委，每个评委都要给选手打分，现在要求去掉一个最高分和去掉一个最低分，再算出平均分。结果精确到小数点后两位。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">测试数据包括多个实例。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n每组数据包括7个实数，代表评委们对该选手的评分。紧接着是选手的名字，名字的长度不超过30个字符。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n输入直到文件结束。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">算出每位选手名字和最终得分，结果保留两位有效数字</span></p>','10 10 10 10 10 10 9 xiaoyuanwang\n0 0 0 0 0 0 0 beast','xiaoyuanwang 10.00\nbeast 0.00','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1215,'班级人数','<p><font size=\"3\" face=\"Times New Roman\">某班学生参加程序设计大赛，最后结果及格有超过P%但不足Q%的人。现在给你P和Q，你要算出该班最少有多少人。（数据弱了一点，所以好通过）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">两个实数P，Q。用空格隔开。每个数最多有两位小数。0.00＜＝p＜q＜＝99.99 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">神风堂最少的人数。</font></p>','13    14.1\n67.73 67.92','15\n28','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1216,'生日日数','<p><font size=\"3\" face=\"Times New Roman\">CCC老师的生日是YY年MM月DD日，他想知道自己出生后第一万天纪念日的日期（出生日算第0天）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入有多行，格式为YY MM DD 其中1949&lt;=YY&lt;=2006，日期绝对合法。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出有多行。即CCC老师生日第一万天以后的日期，格式为 &ldquo;Y-M-D&rdquo;。</font></p>','1979 4 16','2006-9-1','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1217,'盐水的故事','<p><font size=\"3\" face=\"Times New Roman\">挂盐水的时候，如果滴起来有规律，先是滴一滴，停一下；然后滴二滴，停一 下；再滴三滴，停一下...，现在有一个问题：这瓶盐水一共有VUL毫升，每一滴是D毫升，每一滴的速度是一秒（假设最后一滴不到D毫升，则花费的时间也 算一秒），停一下的时间也是一秒这瓶水什么时候能挂完呢？</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据占一行,由VUL和D组成,其中0&lt; D&lt; VUL&lt; 5000。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">请输出挂完盐水需要的时间。</font></p>','10 1','13','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1218,'矩阵转置','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入N*N的矩阵，输出它的转置矩阵。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">第一行为整数N。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n接着是一个N*N的矩阵。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">转置矩阵</span></p>','2\n1 2\n1 2','1 1\n2 2','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1219,'破解平方数','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">给出m个数b1, b2,..., bm,每个数的素数因子都在前t个素数之内，任务是寻找这m个数的非空子集的个数x，使得每个子集的乘积都是一个完全平方数。例如t=3,则前3个素数为2, 3, 5。m=4，这4个数为9, 20, 500, 3， 每个数的素因子都是在前3个素数内，则有x=3个非空子集合{9}， {20， 500}， {9， 20， 500}，满足每个集合内的数的乘积是一个完全平方数，输出这样的集合的个数。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; font-size: medium;\" class=\"Apple-style-span\">每组测试数据的第一行为两个正整数t, m(1 &le; t &le; 100, 1 &le; m &le; 100) 第二行为m个数， 1 &lt;= bi &lt;= 109 处理至文件结束</span><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">每行输出一个整数x，对应每组测试数据</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: Simsun; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">\n<pre><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">每行输出一个整数x，对应每组测试数据</span></pre>\n</span></p>','3 4 \n9 20 500 3','3','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1220,'破解简单密码','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">密码是我们生活中非常重要的东东，我们的那么一点不能说的秘密就全靠它了。哇哈哈.<span class=\"Apple-converted-space\">&nbsp;</span><br />\n接下来渊子要在密码之上再加一套密码，虽然简单但也安全。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n假设老王原来一个BBS上的密码为zvbo941987,为了方便记忆，他通过一种算法把这个密码变换成YUANzi1987，这个密码是他的名字和出生年份，怎么忘都忘不了，而且可以明目张胆地放在显眼的地方而不被别人知道真正的密码。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n他是这么变换的，大家都知道手机上的字母： 1--1， abc--2, def--3, ghi--4, jkl--5, mno--6, pqrs--7, tuv--8 wxyz--9, 0--0,就这么简单，老王把密码中出现的小写字母都变成对应的数字，数字和其他的符号都不做变换，声明：密码中没有空格，而密码中出现的大写字母则边成小写之后往后移一位，如：X，先边成小写，再往后移一位，不就是y了嘛，简单吧。记住，z往后移是a哦。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入包括多个测试数据。输入是一个明文，密码长度不超过100个字符，输入直到文件结尾。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输出渊子真正的密文。</span></p>','YUANzi1987','zvbo941987','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1221,'神奇的fans','<p><font size=\"3\" face=\"Times New Roman\">传说fans是一个数学天才。在他五岁那年，从一堆数字卡片中选出了4张 卡片：5，7，6，8。这4个数字有什么神秘之处呢？如果把这4张卡片自左往右的排成：5，6，7，8。你就会发现：原来这4个数字构成了等差数列！当年 fans选出了n组卡片，据说都能够构成等差数列。但是事实真的是这样吗？fans真的有这么神奇吗？  n组数据就是fans选出的n组卡片，请你判断每一组卡片是否能构成等差数列.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一个数为数据的组数n，表示后面有n行，每行中的第一个数为该组数据的元素个数m（1&le;m&le;100），其后是m个正整数（不会超出int的表示范围）。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">如果能够构成等差数列，输出&ldquo;yes&rdquo;，否则输出&ldquo;no&rdquo;。</font></p>','2\n4 5 7 6 8\n8 1 7 3 2 8 12 78 3','yes\nno\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1222,'第几天','<p><font face=\"Times New Roman\">给定一个日期，输出这个日期是该年的第几天。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，数据格式为YYYY/MM/DD组成，具体参见sample input ,另外，可以向你确保所有的输入数据是合法的。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行，表示该日期是该年的第几天。</font></p>','1985/1/20\n2006/3/12\n\n','20\n71\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1223,'筛排处理','<p><font face=\"Times New Roman\">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N&lt;=100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每组输入数据的第一行含有一个正整数N，表示后面行中有N个随机整数。若N=0，表示处理结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对应每组输入数据，输出一组数据，该数据由单独一行开头，内含一个N，表示后面有N个排好序的整数，整数之间空一格。每组输出数据之间空一行。</font></p>','12\n2 4 6 17 20 40 43 45 60 64 85 98\n17\n35 75 40 61 56 21 85 61 50 83 52 22 44 68 51 80 38\n0\n','12\n2 4 6 17 20 40 43 45 60 64 85 98\n\n16\n21 22 35 38 40 44 50 51 52 56 61 68 75 80 83 85\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1224,'简单的事情','<p><font size=\"3\" face=\"Times New Roman\">数学天才fans曾经说过一句话：组合数的计算是一件非常简单的事情。组合数的计算真的是一件非常简单的事情吗？请你自己去尝试一下吧！ </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入中的一些整数对n，m（m&le;n&le;20）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出其组合数。</font></p>','5 2\n18 13','10\n8568','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1225,'简单编码','<p><font face=\"Times New Roman\">最近Kingly对编码很感兴趣，于是从网上找了一些编码原则来对字符串做实验。由于Kingly一直很忙，所以希望你这位编程高手来替他解决这个问题。下面是编码原则：（1） 如果访问到字符A，W，F就转化成I；（2） 如果访问到字符C，M，S就分别转化成L，o，v；（3） 如果访问到字符D，P，G，B就转化成e；（4） 如果访问到字符L，X就分别转化成Y，u；（5） 其他字符均保持不变。（6） 遇到END就结束！</font></p>','<p></p>\n<p></p>\n<p></p>','<p></p>\n<p></p>\n<p></p>','A\nCMSD\nLMX\nEND','I\nLove\nYou','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1226,'素数回文','<p><font size=\"3\" face=\"Times New Roman\">小王对既是素数又是回文的数特别感兴趣。比如说151既是素数又是个回文。现在小王想要你帮助他找出某个范围内的素数回文数，请你写个程序找出 a 跟b 之间满足条件的数。(5 &lt;= a &lt; b &lt;= 100,000,000);</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入a和b</font><font size=\"3\" face=\"Times New Roman\">(5 &lt;= a &lt; b &lt;= 100,000,000)</font></p>','<pre><font size=\"3\" face=\"Times New Roman\">按从小到大输出a，b之间所有满足条件的素数回文数</font></pre>','5 500','5\n7\n11\n101\n131\n151\n181\n191\n313\n353\n373\n383','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1227,'统计字母个数','<p><font face=\"Times New Roman\">给定一段文章，请输出每个字母出现的次数</font></p>','<p><font face=\"Times New Roman\">只有一组输入数据，该数据大小&lt;10KB。在文章中除最后一个字符外，只有小写字母、空格和换行符，没有另外的标点、数字和大写字母等。该文章以&rsquo;#&rsquo;结尾。</font></p>','<p><font face=\"Times New Roman\">输出格式为&ldquo;C A&rdquo;，C为&rsquo;a&rsquo;..&rsquo;z&rsquo;中的字母，A为出现次数，C和A之间空一格</font></p>','here is the input\nthis is the article#\n','a 1\nb 0\nc 1\nd 0\ne 5\nf 0\ng 0\nh 4\ni 5\nj 0\nk 0\nl 1\nm 0\nn 1\no 0\np 1\nq 0\nr 2\ns 3\nt 5\nu 1\nv 0\nw 0\nx 0\ny 0\nz 0\n\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1228,'统计立方数','<p><font size=\"3\" face=\"Times New Roman\">有一堆正整数，统计其中有多少立方数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有一些正整数，其每个数都小于2^32。若该数为0，则应结束统计。</font></p>','<p><font face=\"Times New Roman\">输出所统计的立方数个数</font></p>','1 3 5 7 9 11 15 17 19 21 23 25 27 0\n','2\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1229,'老王赛马','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">赛马是一古老的游戏，早在公元前四世纪的中国，处在诸侯割据的状态，历史上称为&ldquo;战国时期&rdquo;。在魏国作官的孙膑，因为受到同僚庞涓的迫害，被齐国使臣救出后，到达齐国国都。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n赛马是当时最受齐国贵族欢迎的娱乐项目。上至国王，下到大臣，常常以赛马取乐，并以重金赌输赢。田忌多次与国王及其他大臣赌输赢，屡赌屡输。一天他赛马又输了，回家后闷闷不乐。孙膑安慰他说：&ldquo;下次有机会带我到马场看看，也许我能帮你。&rdquo;<span class=\"Apple-converted-space\">&nbsp;</span><br />\n孙膑仔细观察后发现，田忌的马和其他人的马相差并不远，只是策略运用不当，以致失败。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n比赛前田忌按照孙膑的主意，用上等马鞍将下等马装饰起来，冒充上等马，与齐王的上等马比赛。第二场比赛，还是按照孙膑的安排，田忌用自己的上等马与国王的中等马比赛，在一片喝彩中，只见田忌的马竟然冲到齐王的马前面，赢了第二场。关键的第三场，田忌的中等马和国王的下等马比赛，田忌的马又一次冲到国王的马前面，结果二比一，田忌赢了国王。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n就是这么简单，现在老王也来赛一赛马。假设每匹马都有恒定的速度，所以速度大的马一定比速度小的马先到终点（没有意外！！）。不允许出现平局。最后谁赢的场数多于一半(不包括一半)，谁就是赢家(可能没有赢家)。老王有N(1&le;N&le;1000)匹马参加比赛。对手的马的数量与渊子马的数量一样，并且知道所有的马的速度。聪明的你来预测一下这场世纪之战的结果，看看老王能否赢得比赛。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入有多组测试数据。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n每组测试数据包括3行：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n第一行输入N(1&le;N&le;1000)。表示马的数量。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n第二行有N个整型数字，即渊子的N匹马的速度。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n第三行有N个整型数字，即对手的N匹马的速度。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n当N为0时退出。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">若通过聪明的你精心安排，如果渊子能赢得比赛，那么输出&ldquo;YES&rdquo;。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n否则输出&ldquo;NO&rdquo;。</span></p>','5\n2 3 3 4 5\n1 2 3 4 5\n4\n2 2 1 2\n2 2 3 1\n0','YES\nNO','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1230,'考试排名','<p><font size=\"3\" face=\"Times New Roman\">C++编程考试使用的实时提交系统，具有即时获得成绩排名的特点。它的功能是怎么实现的呢？  <br />\n我们做好了题目的解答，提交之后，要么&ldquo;AC&rdquo;，要么错误，不管怎样错法，总是给你记上一笔，表明你曾经有过一次错误提交，因而当你一旦提交该题 &ldquo;AC&rdquo;后，就要与你算一算帐了，总共该题错误提交了几回。虽然你在题数上，大步地跃上了一个台阶，但是在耗时上要摊上你共花去的时间。特别是，曾经有过 的错误提交，每次都要摊上一定的单位时间分。这样一来，你在做出的题数上，可能领先别人很多，但是，在做出同样题数的人群中，你可能会在耗时上处于排名的 劣势。  <br />\n例如：某次考试一共8题（A，B，C，D，E，F，G，H），每个人做的题都在对应的题号下有个数量标记，负数表示该学生在该题上有过的错误提交 次数，但到现在还没有AC，正数表示AC所耗的时间，如果正数a跟上一对括号，里面有个整数b，那就表示该学生提交该题AC了，耗去了时间a，同时，曾经 错误提交了b次，因此对于下述输入数据：  <br />\nname A B C D E F G H  <br />\nSmith -1 -16 8 0 0 120 39 0  <br />\nJohn 116 -2 11 0 0 82 55(1) 0  <br />\nJose 72(3) 126 10 -3 0 47 21(2) -2  <br />\nBush 0 -1 -8 0 0 0 0 0  <br />\nAlice -2 67(2) 13 -1 0 133 79(1) -1  <br />\nBob 0 0 57(5) 0 0 168 -7 0  <br />\n若每次错误提交的罚分为20分，则其排名从高到低应该是这样的：  <br />\nJose 5 376  <br />\nJohn 4 284  <br />\nAlice 4 352  <br />\nSmith 3 167  <br />\nBob 2 325  <br />\nBush 0 0 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据的第一行是考试题数n（1&le;n&le;12）以及单位罚分数 m（10&le;m&le;20），每行数据描述一个学生的用户名（不多于10个字符的字串）以及对所有n道题的答题现状，其描述采用问题描述中的数量标记的格式，见 上面的表格，提交次数总是小于100，AC所耗时间总是小于1000。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">将这些学生的考试现状，输出一个实时排名。实时排名显然先按AC题数的多 少排，多的在前，再按时间分的多少排，少的在前，如果凑巧前两者都相等，则按名字的字典序排，小的在前。每个学生占一行，输出名字（10个字符宽），做出 的题数（2个字符宽，右对齐）和时间分（4个字符宽，右对齐）。名字、题数和时间分相互之间有一个空格。</font></p>','8 20\nSmith     -1      -16     8       0      0      120     39      0\nJohn      116     -2      11      0      0      82      55(1)   0\nJosephus  72(3)   126     10      -3     0      47      21(2)   -2\nBush      0       -1      -8      0      0      0       0       0\nAlice     -2      67(2)   13      -1     0      133     79(1)   -1\nBob       0       0       57(5)   0      0      168     -7      0','Josephus    5  376\nJohn        4  284\nAlice       4  352\nSmith       3  167\nBob         2  325\nBush        0    0','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1231,'能量项链','<p><font size=\"3\" face=\"Times New Roman\">在Mars星球上，每个Mars人都随身佩带着一串能量项链。在项链上有 N颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标 记。因为只有这样，通过吸盘（吸盘是Mars人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗 能量珠的头标记为m，尾标记为r，后一颗能量珠的头标记为r，尾标记为n，则聚合后释放的能量为m*r*n（Mars单位），新产生的珠子的头标记为m， 尾标记为n。  <br />\n需要时，Mars人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。  <br />\n例如：设N=4，4颗珠子的头标记与尾标记依次为(2，3) (3，5) (5，10) (10，2)。我们用记号◎表示两颗珠子的聚合操作，(j◎k)表示第j，k两颗珠子聚合后所释放的能量。则第4、1两颗珠子聚合后释放的能量为：  <br />\n(4◎1)=10*2*3=60。  <br />\n这一串项链可以得到最优值的一个聚合顺序所释放的总能量为  <br />\n((4◎1)◎2)◎3）=10*2*3+10*3*5+10*5*10=710。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行是一个正整数N（4&le;N&le;100），表示项链上珠子的个数。第二行 是N个用空格隔开的正整数，所有的数均不超过1000。第i个数为第i颗珠子的头标记（1&le;i&le;N），当i〈N时，第i颗珠子的尾标记应该等于第i+1颗 珠子的头标记。第N颗珠子的尾标记应该等于第1颗珠子的头标记。  <br />\n至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一行，是一个正整数E（E&le;2.1*10^9），为一个最优聚合顺序所释放的总能量</font></p>','4\n2  3  5  10','710','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1232,'诡秘的余数','<p><font face=\"Times New Roman\">不可否认，小强是一名数学天才，大家都这么说。天才小强的两大最新发现如下：（1） 正整数n除3的余数，等价于，正整数n的各位数字之和除3的余数；（2） 正整数n除9的余数可以通过这样的方法来计算：计算n 的各位数之和，设为m，如果m已经是一位数，那么余数就是m；否则设n=m，重新进行计算n的各位数之和m，直到m是一个一位数。但是，正整数除1，2，4，5，6，7，8，也存在类似的性质吗？这真是一个难题啊！小强想睡觉了，不去管了。现在请你计算一下正整数n除一位数m的余数。文件中有一些数对，一为大整数（可能大到100位）n，另一为一位数m（&gt;0）。求其n除以m的余数。</font></p>','','','23 7\n123 9','2\n6','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1233,'超级楼梯','<p><font size=\"3\" face=\"Times New Roman\">有一楼梯共M级，刚开始时你在第一级，若每次只能跨上一级或二级，要走上第M级，共有多少种走法？ </font></p>','<p><font face=\"Times New Roman\">输入数据首先包含一个整数N，表示测试实例的个数，然后是N行数据，每行包含一个整数M（1&lt;=M&lt;=40）,表示楼梯的级数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，请输出不同走法的数量 </font></p>','2\n2\n3\n\n','1\n2\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1234,'连续自然数和','<p><font size=\"3\" face=\"Times New Roman\">对一个给定的自然数M，求出所有的连续的自然数段（连续个数大于1），这些连续的自然数段中的全部数之和为M。  <br />\n例子：1998+1999+2000+2001+2002 = 10000，所以从1998到2002的一个自然数段为M=10000的一个解。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">包含一个整数的单独一行给出M的值（10 &lt;= M &lt;= 2,000,000）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行两个自然数，给出一个满足条件的连续自然数段中的第一个数和最后一个数，两数之间用一个空格隔开，所有输出行的第一个按从小到大的升序排列，对于给定的输入数据，保证至少有一个解。</font></p>','10000\n\n21334\n\n2000000','18 142 \n297 328 \n388 412 \n1998 2002\n\n5332 5335\n\n923 2202\n2888 3512\n7685 7940\n15938 16062\n79988 80012\n399998 400002','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1235,'送分题素数','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输出100-&gt;200之间的素数的个数，以及所有的素数。</span></p>','','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">100-&gt;200之间的素数的个数，以及所有的素数。</span></p>','','21\n101 103 ... 197 199','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1236,'逆反的01串','<p><font size=\"3\" face=\"Times New Roman\">Fans是个ACM程序设计迷。有时侯，他表现出很强烈的逆反心理，你往东，他往西，你往南，他偏往北。这一次，不知道又是谁惹着他了，好端端的一个个01串，到了他的手里，都变成10串了。请你编个程序来模仿他的行为，将01串（长度&le;200），全变成10串吧。</font></p>','<pre><font><font size=\"3\" face=\"Times New Roman\">0110100100100 1000000010000000000</font></font></pre>','<pre><font><font size=\"3\" face=\"Times New Roman\">1001011011011 0111111101111111111</font></font></pre>','0110100100100\n1000000010000000000','1001011011011\n0111111101111111111','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1237,'速算24点','<p><font size=\"3\" face=\"Times New Roman\">速算24点相信绝大多数人都玩过。就是随机给你四张牌，包括 A(1),2,3,4,5,6,7,8,9,10,J(11),Q(12),K(13)。要求只用\'+\',\'-\',\'*\',\'/\'运算符以及括号改变运算 顺序，使得最终运算结果为24(每个数必须且仅能用一次)。游戏很简单，但遇到无解的情况往往让人很郁闷。你的任务就是针对每一组随机产生的四张牌，判断 是否有解。我们另外规定，整个计算过程中都不能出现小数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据占一行，给定四张牌。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">如果有解则输出&quot;Y&quot;，无解则输出&quot;N&quot;。</font></p>','A 2 3 6','Y','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1238,'邮局选址问题','<p><font face=\"Times New Roman\">问题描述： <br />\n在一个按照东西和南北方向划分成规整街区的城市里，n个居民点散乱地分布在不同的街区中。用x 坐标表示东西向，用y坐标表示南北向。各居民点的位置可以由坐标(x,y)表示。街区中任意2 点(x1,y1)和(x2,y2)之间的距离可以用数值|x1-x2|+|y1-y2|度量。 <br />\n居民们希望在城市中选择建立邮局的最佳位置，使n个居民点到邮局的距离总和最小。 <br />\n编程任务： <br />\n给定n 个居民点的位置,编程计算n 个居民点到邮局的距离总和的最小值。 </font></p>','<p><font face=\"Times New Roman\">第1 行是居民点数n，1<n></n>&lt;10000。&lt; 个整数x 行是居民点的位置，每行2&gt;</font></p>','<p><font face=\"Times New Roman\">n个居民点到邮局的距离总和的最小值。</font></p>','5\n1 2\n2 2\n1 3\n3 -2\n3 3\n','10','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1239,'金明的预算方案','<p><font size=\"3\" face=\"Times New Roman\">　金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专 用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早，金明就开始做 预算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子： <br />\n<br />\n主件 	附件  <br />\n电脑 	打印机，扫描仪  <br />\n书柜 	图书  <br />\n书桌 	台灯，文具  <br />\n工作椅 	无  <br />\n<br />\n如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有0个、1个或2个附件。附件不再有从属于自己的附件。金明想买的东西很 多，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格 （都是10元的整数倍）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />\n设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />\nv[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />\n请你帮助金明设计一个满足要求的购物单。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行，为两个正整数，用一个空格隔开：  <br />\nN m  <br />\n（其中N（&lt;32000）表示总钱数，m（&lt;60）为希望购买物品的个数。）  <br />\n从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数  <br />\nv p q  <br />\n（其中v表示该物品的价格（v&lt;10000），p表示该物品的重要度（1~5），q表示该物品是主件还是附件。如果q=0，表示该物品为主件，如果q&gt;0，表示该物品为附件，q是所属主件的编号）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;200000）。</font></p>','1000 5\n800 2 0\n400 5 1\n300 5 1\n400 3 0\n500 2 0','2200','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1240,'防御导弹','<p><font size=\"3\" face=\"Times New Roman\">某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截 系统有一个缺陷：虽然它的第一发炮弹能够达到任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试 用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">最多20个整数，分别表示导弹依次飞来的高度（雷达给出高度数据是不大于30000的正整数）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数M。表示：这套系统最多能拦截 M 枚导弹.</font></p>','300 250 275 252 200 138 245','5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1241,'青年歌手大奖赛_评委会打分','<p><font size=\"3\" face=\"Times New Roman\">青年歌手大奖赛中，评委会给参赛选手打分。选手得分规则为去掉一个最高分和一个最低分，然后计算平均得分，请编程输出某选手的得分</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，每行的第一个数是n(2＜n＜100)，表示评委的人数，然后是n个评委的打分。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出选手的得分，结果保留2位小数，每组输出占一行。</font></p>','3 99 98 97\n4 100 99 98 97','98.00\n98.50','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1242,'马拦过河卒','<p><font size=\"3\" face=\"Times New Roman\">棋盘上A点有一个过河卒，需要走到目标B点。卒行走的规则：可以向下、或者向右。同时在棋盘上C点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为&ldquo;马拦过河卒&rdquo;。  <br />\n棋盘用坐标表示，A点(0, 0)、B点(n, m)(n, m为不超过15的整数)，同样马的位置坐标是需要给出的。现在要求你计算出卒从A点能够到达B点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">一行四个数据，分别表示B点坐标和马的坐标。（保证所有的数据有解）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个数据，表示所有的路径条数。</font></p>','6 6 3 3','6','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0);
=======
INSERT INTO `problem` VALUES (1000,'C语言程序设计教程（第三版）课后习题1.5','<p>请参照本章例题，编写一个C程序，输出以下信息：</p>\n<p>**************************</br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Very&nbsp;&nbsp;&nbsp; Good!</br>\n**************************</p>\n<p>数＊号可看出，Very前面9空格，Good前面&hellip;&hellip;</p>\n<p>*也是输出的一部分，别光打印Very Good!</p>','<p>无需输入</p>','<p>**************************</br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Very&nbsp;&nbsp;&nbsp; Good!</br>\n**************************</p>','','**************************\n         Very    Good!\n**************************','0','','','2017-04-30 03:06:25',1,128,'N',2,2,0),(1001,'C语言程序设计教程（第三版）课后习题1.6','编写一个程序，输入a、b、c三个值，输出其中最大值。','一行数组，分别为a b c','a b c其中最大的数','10 20 30','30','0','','','2017-04-30 03:06:25',1,128,'N',2,3,0),(1002,'C语言程序设计教程（第三版）课后习题3.7','<p>要将&quot;China&quot;译成密码，译码规律是：用原来字母后面的第4个字母代替原来的字母．例如，字母&quot;A&quot;后面第4个字母是&quot;E&quot;．&quot;E&quot;代替&quot;A&quot;。因此，&quot;China&quot;应译为&quot;Glmre&quot;。请编一程序，用赋初值的方法使cl、c2、c3、c4、c5五个变量的值分别为，&rsquo;C&rsquo;、&rsquo;h&rsquo;、&rsquo;i&rsquo;、&rsquo;n&rsquo;、&rsquo;a&rsquo;，经过运算，使c1、c2、c3、c4、c5分别变为&rsquo;G&rsquo;、&rsquo;l&rsquo;、&rsquo;m&rsquo;、&rsquo;r&rsquo;、&rsquo;e&rsquo;，并输出。</p>','<p>China</p>','<p>加密后的China</p>','China','Glmre','0','so easy','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1003,'C语言程序设计教程（第三版）课后习题4.8','设圆半径r，圆柱高h\n\n求圆周长C1、圆面积Sa、圆球表面积Sb、圆球体积Va、圆柱体积Vb。\n用scanf输入数据，输出计算结果，输出时要求文字说明，取小数点后两位数字。请编程序。\n\nPI＝3.14  ','两个浮点数，r和h','圆周长C1、圆面积Sa、圆球表面积Sb、圆球体积Va、圆柱体积Vb。\n保留两位小数，每个结果后换行。','1.5 3','C1=9.42\nSa=7.07\nSb=28.26\nVa=14.13\nVb=21.19\n\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1004,'C语言程序设计教程（第三版）课后习题4.9','输入一个华氏温度，要求输出摄氏温度。公式为  \nc=5(F-32)/9  \n输出要求有文字说明，取位2小数。','一个华氏温度，浮点数','摄氏温度，浮点两位小数','-40','c=-40.00','0','零下40度，可以不问是？氏','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1005,'C语言程序设计教程（第三版）课后习题5.4','有三个整数a b c,由键盘输入，输出其中的最大的数。','一行数组，分别为a b c','a b c其中最大的数','10 20 30','30','0','max ?\nif(a>b) ?\n\nint main(){\n\n  return 0;\n}','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1006,'C语言程序设计教程（第三版）课后习题5.5','<p>有一个函数<br />\ny={ x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x&lt;1<br />\n&nbsp;&nbsp; &nbsp;| 2x-1&nbsp;&nbsp; 1&lt;=x&lt;10<br />\n&nbsp;&nbsp;&nbsp; \\ 3x-11&nbsp; x&gt;=10</p>\n<p>写一段程序，输入x，输出y</p>','<p>一个数x</p>','<p>一个数y</p>','14\n','31','0','使用函数','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1007,'C语言程序设计教程（第三版）课后习题5.6','给出一百分制成绩，要求输出成绩等级‘A’、‘B’、‘C’、‘D’、‘E’。\n90分以上为A\n80-89分为B\n70-79分为C\n60-69分为D\n60分以下为E\n','一个整数0－100以内','一个字符，表示成绩等级','90','A','0','分段函数返回字符','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1008,'C语言程序设计教程（第三版）课后习题5.7','给出一个不多于5位的整数，要求\n1、求出它是几位数\n2、分别输出每一位数字\n3、按逆序输出各位数字，例如原数为321,应输出123','一个不大于5位的数字','三行\n第一行 位数\n第二行 用空格分开的每个数字，注意最后一个数字后没有空格\n第三行 按逆序输出这个数','12345','5\n1 2 3 4 5\n54321','0','哈姆雷特：数字还是字符？这是一个问题！','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1009,'C语言程序设计教程（第三版）课后习题5.8','<p>企业发放的奖金根据利润提成。利润低于或等于100000元的，奖金可提10%;<br />\n利润高于100000元，低于200000元（100000&lt;I&le;200000）时，低于100000元的部分按10％提成，高于100000元的部分，可提成 7.5%;<br />\n200000&lt;I&le;400000时，低于200000元部分仍按上述办法提成，（下同），高于200000元的部分按5％提成；<br />\n400000&lt;I&le;600000元时，高于400000元的部分按3％提成；600000&lt;I&le;1000000时，高于600000元的部分按1.5%提成；<br />\nI&gt;1000000时，超过1000000元的部分按1%提成。从键盘输入当月利润I,求应发奖金总数。</p>','<p>一个整数，当月利润。</p>','<p>一个整数，奖金。</p>','900','90','0','用Switch要比用if的看起来更清晰。','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1010,'C语言程序设计教程（第三版）课后习题6.1','输入两个正整数m和n，求其最大公约数和最小公倍数。','两个整数','最大公约数，最小公倍数','5 7','1 35','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1011,'C语言程序设计教程（第三版）课后习题6.2','输入一行字符，分别统计出其中英文字母、空格、数字和其他字符的个数。','一行字符','统计值','aklsjflj123 sadf918u324 asdf91u32oasdf/.\';123\n','23 16 2 4','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1012,'C语言程序设计教程（第三版）课后习题6.3','求Sn=a+aa+aaa+…+aa…aaa（有n个a）之值，其中a是一个数字。\n例如：2+22+222+2222+22222（n=5），n由键盘输入。','a','和','5','24690','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1013,'C语言程序设计教程（第三版）课后习题6.4','求Sn=1!+2!+3!+4!+5!+…+n!之值，其中n是一个数字。\n','n','和','5','153','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1014,'C语言程序设计教程（第三版）课后习题6.5','求以下三数的和,保留2位小数\n1~a之和\n1~b的平方和\n1~c的倒数和','a b c','1+2+...+a + 1^2+2^2+...+b^2 + 1/1+1/2+...+1/c','100 50 10','47977.93','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1015,'C语言程序设计教程（第三版）课后习题6.6','打印出所有\"水仙花数\"，所谓\"水仙花数\"是指一个三位数，其各位数字立方和等于该本身。\n例如：153是一个水仙花数，因为153=1^3+5^3+3^3。\nOutput:<pre>\n153\n???\n???\n??? </pre>','无','所有的水仙花数，从小的开始。\n每行一个','','','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1016,'C语言程序设计教程（第三版）课后习题6.7','<p>一个数如果恰好等于它的因子之和，这个数就称为&quot;完数&quot;。 例如，6的因子为1、2、3，而6=1+2+3，因此6是&quot;完数&quot;。 编程序找出N之内的所有完数，并按下面格式输出其因子：</p>','<p>N</p>','<p>? its factors are ? ? ?</p>','1000','6 its factors are 1 2 3 \n28 its factors are 1 2 4 7 14 \n496 its factors are 1 2 4 8 16 31 62 124 248 ','0','','','2017-04-30 03:06:25',10,128,'N',1,1,0),(1017,'C语言程序设计教程（第三版）课后习题6.8','有一分数序列：  \n2/1 3/2 5/3 8/5 13/8 21/13......\n求出这个数列的前N项之和，保留两位小数。  ','N','数列前N项和','10','16.48','0','','','2017-04-30 03:06:25',1,128,'N',0,1,0),(1018,'C语言程序设计教程（第三版）课后习题6.9','一球从M米高度自由下落，每次落地后返回原高度的一半，再落下。\n它在第N次落地时反弹多高？共经过多少米？\n保留两位小数','M N','它在第N次落地时反弹多高？共经过多少米？\n保留两位小数，空格隔开，放在一行','1000 5','31.25 2875.00','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1019,'C语言程序设计教程（第三版）课后习题6.10','猴子吃桃问题。猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个。\n第二天早上又将剩下的桃子吃掉一半，又多吃一个。以后每天早上都吃了前一天剩下的一半零一个。\n到第N天早上想再吃时，见只剩下一个桃子了。求第一天共摘多少桃子。','N','桃子总数','10','1534','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1020,'C语言程序设计教程（第三版）课后习题6.11','用迭代法求 。求平方根的迭代公式为：  \nX[n+1]=1/2(X[n]+a/X[n])\n要求前后两次求出的得差的绝对值少于0.00001。\n输出保留3位小数','X','X的平方根','4','2.000','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1021,'C语言程序设计教程（第三版）课后习题7.1','用筛法求之N内的素数。 ','N','0～N的素数','100','2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97','0','数组大小动态定义？函数？','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1022,'C语言程序设计教程（第三版）课后习题7.2','用选择法对10个整数从小到大排序。  ','10个整数','排序好的10个整数','4 85  3 234 45 345 345 122 30 12','3\n4\n12\n30\n45\n85\n122\n234\n345\n345','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1023,'C语言程序设计教程（第三版）课后习题7.3','求一个3×3矩阵对角线元素之和。  ','矩阵','主对角线 副对角线 元素和','1 2 3\n1 1 1\n3 2 1','3 7','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1024,'C语言程序设计教程（第三版）课后习题7.4','已有一个已排好的9个元素的数组，今输入一个数要求按原来排序的规律将它插入数组中。','第一行，原始数列。\n第二行，需要插入的数字。','排序后的数列','1 7 8 17 23 24 59 62 101\n50','1\n7\n8\n17\n23\n24\n50\n59\n62\n101\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1025,'C语言程序设计教程（第三版）课后习题7.5','输入10个数字，然后逆序输出。','十个整数','逆序输出，空格分开','1 2 3 4 5 6 7 8 9 0','0 9 8 7 6 5 4 3 2 1','0','数组？堆栈？','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1026,'C语言程序设计教程（第三版）课后习题8.1','写两个函数，分别求两个整数的最大公约数和最小公倍数，用主函数调用这两个函数，并输出结果两个整数由键盘输入。','两个数','最大公约数 最小公倍数','6 15','3 30','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1027,'C语言程序设计教程（第三版）课后习题8.2','求方程 的根，用三个函数分别求当b^2-4ac大于0、等于0、和小于0时的根，并输出结果。从主函数输入a、b、c的值。 ','a b c','x1=? x2=?','4 1 1','x1=-0.125+0.484i x2=-0.125-0.484i','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1028,'C语言程序设计教程（第三版）课后习题8.3','写一个判断素数的函数，在主函数输入一个整数，输出是否是素数的消息。','一个数','如果是素数输出prime\n如果不是输出not prime','97','prime','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1029,'C语言程序设计教程（第三版）课后习题8.4','写一个函数，使给定的一个二维数组（３×３）转置，即行列互换。','一个3x3的矩阵','转置后的矩阵','1 2 3\n4 5 6\n7 8 9\n','1 4 7 \n2 5 8 \n3 6 9 \n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1030,'C语言程序设计教程（第三版）课后习题8.5','写一函数，使输入的一个字符串按反序存放，在主函数中输入输出反序后的字符串。  ','一行字符','逆序后的字符串','123456abcdef \n','fedcba654321\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1031,'C语言程序设计教程（第三版）课后习题8.6','写一函数，将两个字符串连接','两行字符串','链接后的字符串','123\nabc','123abc','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1032,'C语言程序设计教程（第三版）课后习题8.7','写一函数，将两个字符串中的元音字母复制到另一个字符串，然后输出。','一行字符串','顺序输出其中的元音字母（aeiuo）','abcde','ae','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1033,'C语言程序设计教程（第三版）课后习题8.8','写一函数，输入一个四位数字，要求输出这四个数字字符，但每两个数字间空格。如输入1990，应输出\"1 9 9 0\"。','一个四位数','增加空格输出','1990','1 9 9 0 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1034,'C语言程序设计教程（第三版）课后习题8.9','编写一函数，由实参传来一个字符串，统计此字符串中字母、数字、空格和其它字符的个数，在主函数中输入字符串以及输出上述结果。\n\n只要结果，别输出什么提示信息。','一行字符串','统计数据，4个数字，空格分开。','!@#$%^QWERT    1234567','5 7 4 6 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1035,'C语言程序设计教程（第三版）课后习题9.1','定义一个带参的宏，使两个参数的值互换，并写出程序，输入两个数作为使用宏时的实参。输出已交换后的两个值。  ','两个数，空格隔开','交换后的两个数，空格隔开','1 2','2 1','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1036,'C语言程序设计教程（第三版）课后习题9.2','输入两个整数，求他们相除的余数。用带参的宏来实现，编程序。  ','a b两个数','a/b的余数','3 2','1','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1037,'C语言程序设计教程（第三版）课后习题9.3','三角形面积=SQRT(S*(S-a)*(S-b)*(S-c))\n其中S=(a+b+c)/2，a、b、c为三角形的三边。\n定义两个带参的宏，一个用来求area，\n另一个宏用来求S。\n\n写程序，在程序中用带实参的宏名来求面积area。 ','a b c三角形的三条边,可以是小数。','三角形面积，保留3位小数','3 4 5','6.000','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1038,'C语言程序设计教程（第三版）课后习题9.4','给年份year，定义一个宏，以判别该年份是否闰年。提示：宏名可以定义为LEAP_YEAR，形参为y，既定义宏的形式为  \n#define LEAP_YEAR(y) （读者设计的字符串）','一个年份','根据是否闰年输出，是输出\"L\",否输出\"N\"','2000','L','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1039,'C语言程序设计教程（第三版）课后习题9.6','请设计输出实数的格式，包括：⑴一行输出一个实数；⑵一行内输出两个实数；⑶一行内输出三个实数。实数用\"6.2f\"格式输出。','一个实数，float范围','输出3行，第一行打印一遍输入的数，第二行打印两遍，第三行打印三遍。\n第二行和第三行，用空格分隔同一行的数字。\n实数用\"6.2f\"格式输出。','0.618','  0.62\n  0.62   0.62\n  0.62   0.62   0.62\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1040,'C语言程序设计教程（第三版）课后习题9.8','分别用函数和带参的宏，从三个数中找出最大的数。','3个实数','最大的数,输出两遍，先用函数，再用宏。\n保留3位小数。','1 2 3','3.000\n3.000','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1041,'C语言程序设计教程（第三版）课后习题9.10','输入一行电报文字，将字母变成其下一字母（如’a’变成’b’……’z’变成’ａ’其它字符不变）。','一行字符','加密处理后的字符','a b','b c','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1042,'C语言程序设计教程（第三版）课后习题10.1','输入三个整数，按由小到大的顺序输出。','三个整数','由小到大输出成一行，每个数字后面跟一个空格','2 3 1','1 2 3 ','0','','','2017-04-30 03:06:25',1,128,'N',0,1,0),(1043,'C语言程序设计教程（第三版）课后习题10.2','输入三个字符串，按由小到大的顺序输出 ','3行字符串','按照从小到大输出成3行','cde\nafg\nabc\n','abc\nafg\ncde','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1044,'C语言程序设计教程（第三版）课后习题10.3','输入10个整数，将其中最小的数与第一个数对换，把最大的数与最后一个数对换。写三个函数；\n①输入10个数；②进行处理；③输出10个数。','10个整数','整理后的十个数，每个数后跟一个空格（注意最后一个数后也有空格）','2 1 3 4 5 6 7 8 10 9','1 2 3 4 5 6 7 8 9 10 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1045,'C语言程序设计教程（第三版）课后习题10.4','有n个整数，使前面各数顺序向后移m个位置，最后m个数变成前面m个数，见图。写一函数：实现以上功能，在主函数中输入n个数和输出调整后的n个数。','输入数据的个数n\nn个整数\n移动的位置m','移动后的n个数','10\n1 2 3 4 5 6 7 8 9 10\n2','9 10 1 2 3 4 5 6 7 8 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1046,'C语言程序设计教程（第三版）课后习题10.5','有n人围成一圈，顺序排号。从第1个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来的第几号的那位。','初始人数n','最后一人的初始编号','3','2','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1047,'C语言程序设计教程（第三版）课后习题10.7','有一字符串，包含n个字符。写一函数，将此字符串中从第m个字符开始的全部字符复制成为另一个字符串。','数字n\n一行字符串\n数字m','从m开始的子串','6\nabcdef\n3','cdef','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1048,'C语言程序设计教程（第三版）课后习题11.1','定义一个结构体变量（包括年、月、日）。计算该日在本年中是第几天，注意闰年问题。  \n','年月日','当年第几天','2000 12 31','366','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1049,'C语言程序设计教程（第三版）课后习题11.3','现有有N个学生的数据记录，每个记录包括学号、姓名、三科成绩。\n编写一个函数input,用来输入一个学生的数据记录。\n编写一个函数print,打印一个学生的数据记录。\n在主函数调用这两个函数，读取N条记录输入，再按要求输出。\nN<100','学生数量N占一行\n每个学生的学号、姓名、三科成绩占一行，空格分开。','每个学生的学号、姓名、三科成绩占一行，逗号分开。','2\na100 zhblue 70 80 90\nb200 newsclan 90 85 75\n','a100,zhblue,70,80,90\nb200,newsclan,90,85,75\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1050,'C语言程序设计教程（第三版）课后习题11.5','有N个学生，每个学生的数据包括学号、姓名、3门课的成绩，从键盘输入N个学生的数据，要求打印出3门课的总平均成绩，以及最高分的学生的数据（包括学号、姓名、3门课成绩）','学生数量N占一行每个学生的学号、姓名、三科成绩占一行，空格分开。','各门课的平均成绩\n最高分的学生的数据（包括学号、姓名、3门课成绩）','2\n1 blue 90 80 70\nb clan 80 70 60','85 75 65\n1 blue 90 80 70','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1051,'C语言程序设计教程（第三版）课后习题11.8','已有a、b两个链表，每个链表中的结点包括学好、成绩。要求把两个链表合并，按学号升序排列。  ','第一行，a、b两个链表元素的数量N、M,用空格隔开。\n接下来N行是a的数据\n然后M行是b的数据\n每行数据由学号和成绩两部分组成\n\n','按照学号升序排列的数据','2 3\n5 100\n6 89\n3 82\n4 95\n2 10','2 10\n3 82\n4 95\n5 100\n6 89','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1052,'通话记录','<p>使用3个队列，分别保留手机上最近10个，（0）未接来电、（1）已接来电、（2）已拨电话。</p>\n<p></p>','<p>全部通话记录，每行一条记录。</p>\n<p>每条记录包含两个数字，第一个数代表记录类型，第二个数代表手机号码。</p>','<p>分3列输出未接来电、已接来电、已拨电话。</p>\n<p>列之间用空格分割，后接电话在最先输出，不足10条用0占位。</p>','2	18270477699\n1	10149800116\n0	19906559817\n1	16209018105\n1	16804212234\n2	19289130583\n1	17982711123\n0	10897630486\n1	11860787674\n0	15192777554\n','15192777554 11860787674 19289130583\n10897630486 17982711123 18270477699\n19906559817 16804212234 0\n0 16209018105 0\n0 10149800116 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1053,'使用栈实现进制转换','<p>使用栈将一个很长（&gt;30）的十进制数转换为二进制数</p>','<p>若干个很长的十进制数</p>\n<p>每行一个</p>','<p>转换为二进制，每行输出一个</p>','123456789012345678901234567890\n753951684269875454652589568545854758545824','1100011101110100100001111111101101100001101110011111000001110111001001110001111110000101011010010\n10001010011110101010001101001000100100100000101001011010001010101001000100111101011001110001000111110010001000101101111110110110100110100000','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1054,'判断升序','<p>实现public static boolean isSorted(int[] table)</p>\n<p>判断整数数组元素是否已经按升序排序。</p>','<p>一列数，需要判断的数组元素。</p>','<p>如果已经排序输出YES</p>\n<p>如果没有排序输出NO</p>','1\n2\n3\n4\n5\n6\n','YES\n','0','<p>import java.util.*;</p>\n<p>public class Main{</p>\n<p>&nbsp;&nbsp; public static void main(String args[]){</p>\n<p>&nbsp; Scanner cin = new Scanner(System.in);</p>\n<p>&nbsp; int a, b;<br />\n&nbsp; b=-1;<br />\n&nbsp; while (cin.hasNext()){</p>\n<p>&nbsp; a = cin.nextInt();</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(??????????){<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;????????;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;????????????????????;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\n&nbsp;????????????;</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p>&nbsp;if(!cin.hasNext())<br />\n&nbsp;&nbsp;????????????????????????</p>\n<p>&nbsp; }</p>\n<p>}</p>\n<p><br />\n</p>','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1055,'金额的中文大写','<p>读入一个浮点数值，将其转化为金额的中文大写形式。<br />\n例如：<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 123.45转化为&ldquo;壹佰贰拾叁元肆角伍分&rdquo;。</p>\n<p>1）当金额为整数时，只表示整数部分，省略小数部分，并添加&ldquo;整&rdquo;字。<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 例如：123表示为&ldquo;壹佰贰拾叁元整&rdquo;</p>\n<p>2）当金额中有连续的0时（含一个0），只需写一个&ldquo;零&rdquo;即可。<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 例如：10005表示为&ldquo;壹万零伍元整&rdquo;</p>\n<p>3）10元缩写为&ldquo;拾元整&rdquo;。</p>','<p>表示金额的浮点数若干，每行一个</p>','<p>各金额的中文大写形式，每行一个</p>\n<p>注：数字&ldquo;壹贰叁肆伍陆柒捌玖拾佰仟万亿&rdquo;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 单位&ldquo;元角分&rdquo;</p>','123.45\n123\n10005\n10','壹佰贰拾叁元肆角伍分\n壹佰贰拾叁元整\n壹万零伍元整\n拾元整','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1056,'复数加法','<p>数集拓展到实数范围内，仍有些运算无法进行。比如判别式小于0的<a href=\"http://baike.baidu.com/view/397767.htm\" target=\"_blank\"><font color=\"#136ec2\">一元二次方程</font></a>仍<a href=\"http://baike.baidu.com/view/1203270.htm\" target=\"_blank\"><font color=\"#136ec2\">无解</font></a>，因此将数集再次扩充，达到复数范围。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：形如z=a+bi的数称为复数(complex number)</b>，其中规定<b>i</b>为<b>虚数单位</b>，且i^2=i*i=-1（a，b是任意<a href=\"http://baike.baidu.com/view/14749.htm\" target=\"_blank\"><font color=\"#136ec2\">实数</font></a>）</p>\n<div class=\"spctrl\"></div>\n<p>　　我们将复数z=a+bi中的实数a称为复数z的实部（real part)记作Rez=a</p>\n<div class=\"spctrl\"></div>\n<p>　　实数b称为复数z的<a href=\"http://baike.baidu.com/view/2441262.htm\" target=\"_blank\"><font color=\"#136ec2\">虚部</font></a>（imaginary part)记作 Imz=b.</p>\n<div class=\"spctrl\"></div>\n<p>　　已知：当b=0时，z=a，这时复数成为实数；</p>\n<div class=\"spctrl\"></div>\n<p>　　当a=0且b&ne;0时 ，z=bi，我们就将其称为<a href=\"http://baike.baidu.com/view/899964.htm\" target=\"_blank\"><b><font color=\"#136ec2\">纯虚数</font></b></a>。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义： 对于复数z=a+bi，称复数z\'=a-bi为z的</b><a href=\"http://baike.baidu.com/view/137793.htm\" target=\"_blank\"><b><font color=\"#136ec2\">共轭复数</font></b></a><b>。</b></p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：将复数的实部与虚部的平方和的正的平方根的值称为该复数的模，记作∣z∣</b></p>\n<div class=\"spctrl\"></div>\n<p>　　即对于复数z=a+bi，它的模</p>\n<div class=\"spctrl\"></div>\n<p>　　∣z∣=&radic;(a^2+b^2)</p>\n<div class=\"spctrl\"></div>\n<p>　　复数的集合用C表示，显然，R是C的真子集</p>\n<div class=\"spctrl\"></div>\n<p>　　复数集是无序集，不能建立大小顺序。</p>\n<div class=\"spctrl\"></div>\n<p>　　共轭复数有些有趣的性质: ︱x+yi︱=︱x-yi︱ (x+yi)*(x-yi)=x^2+y^2=︱x+yi︱^2=︱x-yi︱^2</p>','<p>两个复数分两行，每行两个数，代表复数的实部和虚部。</p>','<p>两个复数的和。</p>','1 2\n3 4','4 6','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1057,'复数乘积','<p>数集拓展到实数范围内，仍有些运算无法进行。比如判别式小于0的<a href=\"http://baike.baidu.com/view/397767.htm\" target=\"_blank\"><font color=\"#136ec2\">一元二次方程</font></a>仍<a href=\"http://baike.baidu.com/view/1203270.htm\" target=\"_blank\"><font color=\"#136ec2\">无解</font></a>，因此将数集再次扩充，达到复数范围。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：形如z=a+bi的数称为复数(complex number)</b>，其中规定<b>i</b>为<b>虚数单位</b>，且i^2=i*i=-1（a，b是任意<a href=\"http://baike.baidu.com/view/14749.htm\" target=\"_blank\"><font color=\"#136ec2\">实数</font></a>）</p>\n<div class=\"spctrl\"></div>\n<p>　　我们将复数z=a+bi中的实数a称为复数z的实部（real part)记作Rez=a</p>\n<div class=\"spctrl\"></div>\n<p>　　实数b称为复数z的<a href=\"http://baike.baidu.com/view/2441262.htm\" target=\"_blank\"><font color=\"#136ec2\">虚部</font></a>（imaginary part)记作 Imz=b.</p>\n<div class=\"spctrl\"></div>\n<p>　　已知：当b=0时，z=a，这时复数成为实数；</p>\n<div class=\"spctrl\"></div>\n<p>　　当a=0且b&ne;0时 ，z=bi，我们就将其称为<a href=\"http://baike.baidu.com/view/899964.htm\" target=\"_blank\"><b><font color=\"#136ec2\">纯虚数</font></b></a>。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义： 对于复数z=a+bi，称复数z\'=a-bi为z的</b><a href=\"http://baike.baidu.com/view/137793.htm\" target=\"_blank\"><b><font color=\"#136ec2\">共轭复数</font></b></a><b>。</b></p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：将复数的实部与虚部的平方和的正的平方根的值称为该复数的模，记作∣z∣</b></p>\n<div class=\"spctrl\"></div>\n<p>　　规定复数的乘法按照以下的法则进行：</p>\n<div class=\"spctrl\"></div>\n<p>　　设z1=a+bi，z2=c+di(a、b、c、d&isin;R)是任意两个复数，那么它们的积(a+bi)(c+di)=(ac－bd)+(bc+ad)i.</p>\n<div class=\"spctrl\"></div>\n<p>　　其实就是把两个复数相乘，类似两个多项式相乘，在所得的结果中把i2换成－1，并且把实部与虚部分别合并.两个复数的积仍然是一个复数.</p>','<p>两个复数分两行，每行两个数，代表复数的实部和虚部。</p>','<p>两个复数的乘积。</p>','1 1\n1 1','0 2','0','','数据结构Java版\n\n数据结构Java版\n\n数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1058,'多项式相加','<p>一条单链表可以表示一个一元多项式，每个节点包含三个域：指数、系数和后继节点（指针或引用）。</p>\n<p>表示多项式3X<sup>4</sup>-6X<sup>2</sup>+5X-10的单链表如图所示。给定两个多项式，实现两个多项式相加算法。</p>\n<p></p>\n<p><img alt=\"\" width=\"600\" height=\"103\" src=\"/admin/../upload/pimg1058_1.png\" /></p>','<p>第一行输入包含两个整数m,n</p>\n<p>后续为m行和n行数据</p>\n<p>m，n分别代表两个多项式的项数</p>\n<p>后续每一行代表多项式的项，包含a,b两个数据，表示该项的系数和指数。</p>\n<p></p>','<p>从较高指数到较低指数，依次输出求得的和。</p>\n<p>每行一项，格式与输入相同，但无需输出项数，系数为0的项也不输出。</p>','2 3\n1 2\n1 1\n2 2\n1 1\n2 0\n','3 2\n2 1\n2 0','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1059,'VIJOS-P1000','输入两个自然数，输出他们的和\n','两个自然数x和y(0&lt; =x,y&lt; =32767)\n','一个数，即x和y的和\n','123 500\n','623\n','0','[b]Free&nbsp Pascal&nbsp Code:[/b]\n-------------------\nprogram&nbsp Plus;\nvar&nbsp a,b:longint;\nbegin\n&nbsp &nbsp readln(a,b);\n&nbsp &nbsp writeln(a+b);\nend.\n\n[b]C++&nbsp Code:[/b]\n-------------------\n#include&nbsp &lt; iostream&gt; \nusing&nbsp namespace&nbsp std;\nint&nbsp main(){\n&nbsp &nbsp int&nbsp a,b;\n&nbsp &nbsp cin&gt; &gt; a&gt; &gt; b;\n&nbsp &nbsp cout&lt; &lt; a+b&lt; &lt; endl;\n&nbsp &nbsp return&nbsp 0;\n}\n','','2017-04-30 04:23:46',0,128,'N',0,0,0),(1060,'VIJOS-P1001','&nbsp &nbsp &nbsp &nbsp 某校的惯例是在每学期的期末考试之后发放奖学金。发放的奖学金共有五种，获取的条件各自不同：\n\n&nbsp &nbsp &nbsp &nbsp 1)&nbsp &nbsp 院士奖学金，每人8000元，期末平均成绩高于80分（&gt; 80），并且在本学期内发表1篇或1篇以上论文的学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 2)&nbsp &nbsp 五四奖学金，每人4000元，期末平均成绩高于85分（&gt; 85），并且班级评议成绩高于80分（&gt; 80）的学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 3)&nbsp &nbsp 成绩优秀奖，每人2000元，期末平均成绩高于90分（&gt; 90）的学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 4)&nbsp &nbsp 西部奖学金，每人1000元，期末平均成绩高于85分（&gt; 85）的西部省份学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 5)&nbsp &nbsp 班级贡献奖，每人850元，班级评议成绩高于80分（&gt; 80）的学生干部均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 只要符合条件就可以得奖，每项奖学金的获奖人数没有限制，每名学生也可以同时获得多项奖学金。例如姚林的期末平均成绩是87分，班级评议成绩82分，同时他还是一位学生干部，那么他可以同时获得五四奖学金和班级贡献奖，奖金总数是4850元。\n\n&nbsp &nbsp &nbsp &nbsp 现在给出若干学生的相关数据，请计算哪些同学获得的奖金总数最高（假设总有同学能满足获得奖学金的条件）。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行是一个整数N（1&nbsp &lt; =&nbsp N&nbsp &lt; =&nbsp 100），表示学生的总数。接下来的N行每行是一位学生的数据，从左向右依次是姓名，期末平均成绩，班级评议成绩，是否是学生干部，是否是西部省份学生，以及发表的论文数。姓名是由大小写英文字母组成的长度不超过20的字符串（不含空格）；期末平均成绩和班级评议成绩都是0到100之间的整数（包括0和100）；是否是学生干部和是否是西部省份学生分别用一个字符表示，Y表示是，N表示不是；发表的论文数是0到10的整数（包括0和10）。每两个相邻数据项之间用一个空格分隔。\n','&nbsp &nbsp &nbsp &nbsp 输出包括三行，第一行是获得最多奖金的学生的姓名，第二行是这名学生获得的奖金总数。如果有两位或两位以上的学生获得的奖金最多，输出他们之中在输入文件中出现最早的学生的姓名。第三行是这N个学生获得的奖学金的总数。\n','4\nYaoLin 87 82 Y N 0\nChenRuiyi 88 78 N Y 1\nLiXin 92 88 N N 0\nZhangQin 83 87 Y N 1\n','ChenRuiyi\n9000\n28700\n','0','','NOIp2005&nbsp 第一题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1061,'VIJOS-P1002','&nbsp &nbsp &nbsp &nbsp 在河上有一座独木桥，一只青蛙想沿着独木桥从河的一侧跳到另一侧。在桥上有一些石子，青蛙很讨厌踩在这些石子上。由于桥的长度和青蛙一次跳过的距离都是正整数，我们可以把独木桥上青蛙可能到达的点看成数轴上的一串整点：0，1，……，L（其中L是桥的长度）。坐标为0的点表示桥的起点，坐标为L的点表示桥的终点。青蛙从桥的起点开始，不停的向终点方向跳跃。一次跳跃的距离是S到T之间的任意正整数（包括S,T）。当青蛙跳到或跳过坐标为L的点时，就算青蛙已经跳出了独木桥。\n\n&nbsp &nbsp &nbsp &nbsp 题目给出独木桥的长度L，青蛙跳跃的距离范围S,T，桥上石子的位置。你的任务是确定青蛙要想过河，最少需要踩到的石子数。\n\n&nbsp &nbsp &nbsp &nbsp 对于30%的数据，L&nbsp &lt; =&nbsp 10000；\n&nbsp &nbsp &nbsp &nbsp 对于全部的数据，L&nbsp &lt; =&nbsp 10^9。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行有一个正整数L（1&nbsp &lt; =&nbsp L&nbsp &lt; =&nbsp 10^9），表示独木桥的长度。第二行有三个正整数S，T，M，分别表示青蛙一次跳跃的最小距离，最大距离，及桥上石子的个数，其中1&nbsp &lt; =&nbsp S&nbsp &lt; =&nbsp T&nbsp &lt; =&nbsp 10，1&nbsp &lt; =&nbsp M&nbsp &lt; =&nbsp 100。第三行有M个不同的正整数分别表示这M个石子在数轴上的位置（数据保证桥的起点和终点处没有石子）。所有相邻的整数之间用一个空格隔开。\n','&nbsp &nbsp &nbsp &nbsp 输出只包括一个整数，表示青蛙过河最少需要踩到的石子数。\n','10\n2 3 5\n2 3 5 6 7\n','2\n','0','','NOIp2005&nbsp 第二题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1062,'VIJOS-P1003','&nbsp &nbsp &nbsp &nbsp 明明进了中学之后，学到了代数表达式。有一天，他碰到一个很麻烦的选择题。这个题目的题干中首先给出了一个代数表达式，然后列出了若干选项，每个选项也是一个代数表达式，题目的要求是判断选项中哪些代数表达式是和题干中的表达式等价的。\n\n&nbsp &nbsp &nbsp &nbsp 这个题目手算很麻烦，因为明明对计算机编程很感兴趣，所以他想是不是可以用计算机来解决这个问题。假设你是明明，能完成这个任务吗？\n\n&nbsp \n\n&nbsp &nbsp &nbsp &nbsp 这个选择题中的每个表达式都满足下面的性质：\n\n&nbsp &nbsp &nbsp &nbsp 1．&nbsp &nbsp 表达式只可能包含一个变量‘a’。\n\n&nbsp &nbsp &nbsp &nbsp 2．&nbsp &nbsp 表达式中出现的数都是正整数，而且都小于10000。\n\n&nbsp &nbsp &nbsp &nbsp 3．&nbsp &nbsp 表达式中可以包括四种运算‘+’（加），‘-’（减），‘*’（乘），‘^’（乘幂），以及小括号‘(’，‘)’。小括号的优先级最高，其次是‘^’，然后是‘*’，最后是‘+’和‘-’。‘+’和‘-’的优先级是相同的。相同优先级的运算从左到右进行。（注意：运算符‘+’，‘-’，‘*’，‘^’以及小括号‘(’，‘)’都是英文字符）\n\n&nbsp &nbsp &nbsp &nbsp 4．&nbsp &nbsp 幂指数只可能是1到10之间的正整数（包括1和10）。\n\n&nbsp &nbsp &nbsp &nbsp 5．&nbsp &nbsp 表达式内部，头部或者尾部都可能有一些多余的空格。\n\n&nbsp &nbsp &nbsp &nbsp 下面是一些合理的表达式的例子：\n\n((a^1)&nbsp ^&nbsp 2)^3，a*a+a-a，((a+a))，9999+(a-a)*a，1&nbsp +&nbsp (a&nbsp -1)^3，1^10^9……\n\n\n对于30%的数据，表达式中只可能出现两种运算符‘+’和‘-’；\n\n对于其它的数据，四种运算符‘+’，‘-’，‘*’，‘^’在表达式中都可能出现。\n\n对于全部的数据，表达式中都可能出现小括号‘(’和‘)’。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行给出的是题干中的表达式。第二行是一个整数n（2&nbsp &lt; =&nbsp n&nbsp &lt; =&nbsp 26），表示选项的个数。后面n行，每行包括一个选项中的表达式。这n个选项的标号分别是A，B，C，D……\n\n&nbsp &nbsp &nbsp &nbsp 输入中的表达式的长度都不超过50个字符，而且保证选项中总有表达式和题干中的表达式是等价的。\n','&nbsp &nbsp &nbsp &nbsp 输出包括一行，这一行包括一系列选项的标号，表示哪些选项是和题干中的表达式等价的。选项的标号按照字母顺序排列，而且之间没有空格。\n','( a + 1) ^2\n3\n(a-1)^2+4*a\na  + 1+ a\na^2 + 2 * a * 1 + 1^2 + 10 -10 +a -a\n','AC\n','0','','NOIp2005&nbsp 第四题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1063,'VIJOS-P1004','&nbsp &nbsp &nbsp Adam和Eve玩一个游戏，他们先从1900.1.1到2001.11.4这个日期之间随意抽取一个日期出来。然后他们轮流对这个日期进行操作：\n\n&nbsp &nbsp &nbsp 1&nbsp ：&nbsp 把日期的天数加1，例如1900.1.1变到1900.1.2\n\n&nbsp &nbsp &nbsp 2&nbsp ：&nbsp 把月份加1，例如：1900.1.1变到1900.2.1\n\n&nbsp &nbsp &nbsp 其中如果天数超过应有天数则日期变更到下个月的第1天。月份超过12则变到下一年的1月。而且进行操作二的时候，如果有这样的日期：1900.1.31，则变成了1900.2.31，这样的操作是非法的，我们不允许这样做。而且所有的操作均要考虑历法和闰年的规定。\n\n&nbsp &nbsp &nbsp 谁先将日期变到2001.11.4谁就赢了。\n\n&nbsp &nbsp &nbsp 每次游戏都是Adam先操作，问他有没有必胜策略？\n','&nbsp &nbsp 一个测试点。多组数据。\n&nbsp &nbsp 第一行为数据组数。\n&nbsp &nbsp 接下来一行X&nbsp Y&nbsp Z表示X年Y月Z日\n','&nbsp &nbsp 输出“YES”or“NO”表示亚当是否有必胜策略。&nbsp \n','3\n2001 11 3\n2001 11 2\n2001 10 3\n','YES\nNO\nNO\n','0','&nbsp &nbsp 建议先把所有情况都算出来^_^\n','From&nbsp ZJU\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1064,'VIJOS-P1005','他最喜欢的是数字的无穷序列，结果是把所有的自然数按升序排列。这个序列开始是：&nbsp 1234567891011121314...&nbsp 我们叫序列&nbsp S。然后&nbsp S[1]&nbsp =&nbsp 1,&nbsp S[2]&nbsp =&nbsp 2,&nbsp ...&nbsp ,&nbsp S[10]&nbsp =&nbsp 1,&nbsp S[11]&nbsp =&nbsp 0,&nbsp ...&nbsp ,&nbsp 以此类推。&nbsp \nGeorge&nbsp 现有一个数字系列&nbsp A&nbsp ，他想知道在S中最早出现的位置。帮助他解决这个难题。\n','输入文件包含&nbsp A&nbsp -&nbsp 给出的数字系列。位数不超过&nbsp 200。没有空格。\n','输出一个整数。-&nbsp 最小的&nbsp k&nbsp ，使&nbsp A[1]&nbsp =&nbsp S[k],&nbsp A[2]&nbsp =&nbsp S[k+1],&nbsp ...&nbsp A[len(A)]&nbsp =&nbsp S[k&nbsp +&nbsp len(A)&nbsp －1],&nbsp len(A)&nbsp 表示&nbsp A&nbsp 的长度。\n','101\n','10\n','0','','Ural&nbsp State&nbsp University&nbsp Problem&nbsp Archive\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1065,'VIJOS-P1006','&nbsp &nbsp &nbsp &nbsp 这一天，他来到了一座深山的山脚下，因为只有这座深山中的一位隐者才知道这种药草的所在。但是上山的路错综复杂，由于小小猪的病情，晴天小猪想找一条需时最少的路到达山顶，但现在它一头雾水，所以向你求助。\n&nbsp &nbsp &nbsp &nbsp 山用一个三角形表示，从山顶依次向下有1段、2段、3段等山路，每一段用一个数字T（1&lt; =T&lt; =100）表示，代表晴天小猪在这一段山路上需要爬的时间，每一次它都可以朝左、右、左上、右上四个方向走（**注意**：在任意一层的第一段也可以走到本层的最后一段或上一层的最后一段）。\n&nbsp &nbsp &nbsp &nbsp 晴天小猪从山的左下角出发，目的地为山顶，即隐者的小屋。\n','&nbsp &nbsp &nbsp &nbsp 第一行有一个数n（2&lt; =n&lt; =1000），表示山的高度。\n&nbsp &nbsp &nbsp &nbsp 从第二行至第n+1行，第i+1行有i个数，每个数表示晴天小猪在这一段山路上需要爬的时间。\n','&nbsp &nbsp &nbsp &nbsp 一个数，即晴天小猪所需要的最短时间。\n','5\n1\n2 3\n4 5 6\n10 1 7 8\n1 1 4 5 6\n','10\n','0','在山的两侧的走法略有特殊，请自己模拟一下，开始我自己都弄错了……\n','Sunnypig\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1066,'VIJOS-P1007','求出绳子的长度\n','第1行两个数：整数N(1&lt; =N&lt; =100)和实数R。\n接下来N行按逆时针顺序给出N个钉子中心的坐标\n坐标的绝对值不超过100。\n','一个数，绳子的长度，精确到小数点后2位。\n','4 1\n0.0 0.0\n2.0 0.0\n2.0 2.0\n0.0 2.0\n','14.28\n','0','如果你用比较复杂的方法AC了，请想一想有没有更加简便的方法。\n','Ural\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1067,'VIJOS-P1008','&nbsp &nbsp &nbsp &nbsp 佳佳刚进高中，在军训的时候，由于佳佳吃苦耐劳，很快得到了教官的赏识，成为了“小教官”。在军训结束的那天晚上，佳佳被命令组织同学们进行篝火晚会。一共有n个同学，编号从1到n。一开始，同学们按照1，2，……，n的顺序坐成一圈，而实际上每个人都有两个最希望相邻的同学。如何下命令调整同学的次序，形成新的一个圈，使之符合同学们的意愿，成为摆在佳佳面前的一大难题。\n\n&nbsp &nbsp &nbsp &nbsp 佳佳可向同学们下达命令，每一个命令的形式如下：\n\n&nbsp &nbsp &nbsp &nbsp (b1,&nbsp b2,...&nbsp bm&nbsp -1,&nbsp bm)\n\n&nbsp &nbsp &nbsp &nbsp 这里m的值是由佳佳决定的，每次命令m的值都可以不同。这个命令的作用是移动编号是b1，b2，……&nbsp bm&nbsp –1，bm的这m个同学的位置。要求b1换到b2的位置上，b2换到b3的位置上，……，要求bm换到b1的位置上。\n\n&nbsp &nbsp &nbsp &nbsp 执行每个命令都需要一些代价。我们假定如果一个命令要移动m个人的位置，那么这个命令的代价就是m。我们需要佳佳用最少的总代价实现同学们的意愿，你能帮助佳佳吗?\n\n&nbsp &nbsp &nbsp &nbsp 对于30%的数据，n&nbsp &lt; =&nbsp 1000；\n\n&nbsp &nbsp &nbsp &nbsp 对于全部的数据，n&nbsp &lt; =&nbsp 50000。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行是一个整数n（3&nbsp &lt; =&nbsp n&nbsp &lt; =&nbsp 50000），表示一共有n个同学。其后n行每行包括两个不同的正整数，以一个空格隔开，分别表示编号是1的同学最希望相邻的两个同学的编号，编号是2的同学最希望相邻的两个同学的编号，……，编号是n的同学最希望相邻的两个同学的编号。\n','&nbsp &nbsp &nbsp &nbsp 输出包括一行，这一行只包含一个整数，为最小的总代价。如果无论怎么调整都不能符合每个同学的愿望，则输出-1。\n','4\n3 4\n4 3\n1 2\n1 2\n','2\n','0','','NOIp2005&nbsp 第三题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1068,'VIJOS-P1009','&nbsp &nbsp &nbsp &nbsp 话说西汉时期，汉武帝刘彻派遣张骞出使西域，欲同月氏国结交而共驱匈奴。同时，月氏国也欲同大汉结交，也派出使者康破伦出使大汉，可是因为月氏国对于大汉的认知甚少，康破伦同样向西出使大汉。一开始，张骞从大汉出发，康破伦从月氏国出发，两人都在同一纬度线上，张骞所处的经度为x，康破伦所处的经度为y；接下来，两人同时向西走，而且只能向西走，张骞每天走m公里，康破伦每天走n公里，且每天走路的速度不变，也不停下来休息；这样两人就在这一条长为L的纬度线上一直向西走。问：过了多少天之后张骞和康破伦会碰面，并磋商两国结交之事（所谓碰面，是指两人处在同一经度上）。\n&nbsp &nbsp &nbsp &nbsp 这下，康熙犯难了，他还是个不大的青年，怎么可能做得出这么难的题目；但是，他又是统领全国的帝皇，怎么能在老师面前丢这么大一个面子。康熙想：不行！一定得把这个题做出来！（然后就有了下面这段记录）\n&nbsp &nbsp &nbsp &nbsp 第一天，……\n&nbsp &nbsp &nbsp &nbsp 第二天，…………\n&nbsp &nbsp &nbsp &nbsp 第三天，………………\n&nbsp &nbsp &nbsp &nbsp 第四天，……………………\n&nbsp &nbsp &nbsp &nbsp 第五天，…………………………\n&nbsp &nbsp &nbsp &nbsp 第六天，………………………………\n&nbsp &nbsp &nbsp &nbsp 第七天，……………………………………！！！！！！！\n&nbsp &nbsp &nbsp &nbsp 啊！第七天，康熙终于打了7个感叹号，得出了一个重要的结论！！！！！那就是——做不出来。（汗），没办法，他只有请教你，他的挚友，帮他解决这一难题。康熙答应你，如果你把这一题做出来了，你将得到御赐赏银一万万两！$$$$$$$$-$$$$$$$$。为了改变你生活的现状——衣衫褴褛、闻鼠起舞、蟑螂为伴，你下定了决心——我一定得把这题解决！\n','&nbsp &nbsp &nbsp &nbsp 输入只包括一行5个整数x，y，m，n，L\n&nbsp &nbsp &nbsp &nbsp 其中0&lt; x≠y&nbsp &lt; &nbsp =2000000000，0&nbsp &lt; &nbsp m、n&nbsp &lt; &nbsp =2000000000，0&nbsp &lt; &nbsp L&nbsp &lt; &nbsp =2100000000。\n','&nbsp &nbsp &nbsp &nbsp 输出碰面所需要的天数，如果永远不可能碰面则输出一行&quot; Impossible&quot; 。\n','1 2 3 4 5\n','4\n','0','','From&nbsp PKU&nbsp 1061\n','2017-04-30 04:26:32',0,128,'N',0,0,0),(1069,'VIJOS-P1010','&nbsp &nbsp &nbsp &nbsp 话说乾隆带着他的宰相刘罗锅和你出巡江南，被杭州城府邀请去听戏，至于什么戏，那就不知了。乾隆很高兴，撒酒与君臣共享。三更欲回住处，可是乾隆这人挺怪，他首先要到西湖边散散步，而且命令不准有人跟着他。\n&nbsp &nbsp &nbsp &nbsp 小醉，步于西湖岸，停于断桥前，突闻琴声悠悠，歌儿婉婉。这乐曲不哀伤不愁怅，少了一分怨女的羁绊，多了一分少女的期盼。乾隆走上前去，视其背影，为一女子手抚古琴，悠悠而唱。可是这么晚了，小女怎么还不回家呢，莫非是她起早床？乾隆走上前去，小声问道：“伊为何未宿？”，小女沉默片刻，转身而来。顿时，顿时，顿时！！！！！乾隆惊呆了！！！！哇！！！！噻！！！！！！这人，这伊！！！！原来！！！！！！！不是一个美女（狂汗ing）。小女并未回答她的话，只是与乾隆侃了侃诗。乾隆兴哉，问其曰：“不知偶能助伊否？”，小女曰：“偶无所以助，且有一事相求，愿君能解之。”\n&nbsp &nbsp &nbsp &nbsp 乾隆一看，立刻晕到在地，片刻而起，曰：“明日必解之”，且去。\n&nbsp &nbsp &nbsp &nbsp 回到家中，乾隆夜召你“入寝”，曰：“如此姑娘，如此情调，如此罗曼蒂克，竟然丢一个如此煞风景之问”，一边发气，一边把这个问题交给你。你一看，顿然发现，原来是用蝌蚪文写的：\n&nbsp &nbsp &nbsp &nbsp Problems&nbsp involving&nbsp the&nbsp computation&nbsp of&nbsp exact&nbsp values&nbsp of&nbsp very&nbsp large&nbsp magnitude&nbsp and&nbsp precision&nbsp are&nbsp common.&nbsp For&nbsp example,&nbsp the&nbsp computation&nbsp of&nbsp the&nbsp national&nbsp debt&nbsp is&nbsp a&nbsp taxing&nbsp experience&nbsp for&nbsp many&nbsp computer&nbsp systems.&nbsp \n&nbsp &nbsp &nbsp &nbsp This&nbsp problem&nbsp requires&nbsp that&nbsp you&nbsp write&nbsp a&nbsp program&nbsp to&nbsp compute&nbsp the&nbsp exact&nbsp value&nbsp of&nbsp Rn&nbsp where&nbsp R&nbsp is&nbsp a&nbsp real&nbsp number&nbsp (&nbsp 0.0&nbsp &lt; &nbsp R&nbsp &lt; =&nbsp 9999.9)&nbsp and&nbsp n&nbsp is&nbsp an&nbsp integer&nbsp such&nbsp that&nbsp 0&nbsp &lt; &nbsp n&nbsp &lt; =&nbsp 200.&nbsp \n&nbsp &nbsp &nbsp &nbsp 此时的你，已经是皇帝身边的小太监，自然有必要为皇上解决此题。\n','&nbsp &nbsp &nbsp &nbsp The&nbsp input&nbsp will&nbsp consist&nbsp of&nbsp a&nbsp set&nbsp (less&nbsp than&nbsp 11)&nbsp of&nbsp pairs&nbsp of&nbsp values&nbsp for&nbsp R&nbsp and&nbsp n.&nbsp The&nbsp R&nbsp value&nbsp will&nbsp occupy&nbsp columns&nbsp 1&nbsp through&nbsp 6,&nbsp and&nbsp the&nbsp n&nbsp value&nbsp will&nbsp be&nbsp in&nbsp columns&nbsp 8&nbsp and&nbsp 9.\n','&nbsp &nbsp &nbsp &nbsp The&nbsp output&nbsp will&nbsp consist&nbsp of&nbsp one&nbsp line&nbsp for&nbsp each&nbsp line&nbsp of&nbsp input&nbsp giving&nbsp the&nbsp exact&nbsp value&nbsp of&nbsp R^n.&nbsp Leading&nbsp zeros&nbsp should&nbsp be&nbsp suppressed&nbsp in&nbsp the&nbsp output.&nbsp Insignificant&nbsp trailing&nbsp zeros&nbsp must&nbsp not&nbsp be&nbsp printed.&nbsp Don\'t&nbsp print&nbsp the&nbsp decimal&nbsp point&nbsp if&nbsp the&nbsp result&nbsp is&nbsp an&nbsp integer.\n','95.123  2\n0.4321  5\n5.1234  7\n6.7592  3\n98.999  5\n1.0100 10\n','9048.385129\n.01506334182914325601\n92663.3181348508776705891407804544\n308.806114738688\n9509420210.697891990494999\n1.10462212541120451001\n','0','','Vivian&nbsp Snow\n','2017-04-30 04:26:32',0,128,'N',0,0,0),(1070,'VIJOS-P1011','&nbsp &nbsp &nbsp &nbsp 顺治喜欢滑雪，这并不奇怪，&nbsp 因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待太监们来载你。顺治想知道载一个区域中最长的滑坡。\n&nbsp &nbsp &nbsp &nbsp 区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子：\n\n\n&nbsp &nbsp &nbsp &nbsp &nbsp 1&nbsp &nbsp 2&nbsp &nbsp 3&nbsp &nbsp 4&nbsp 5\n&nbsp &nbsp &nbsp &nbsp 16&nbsp 17&nbsp 18&nbsp 19&nbsp 6\n&nbsp &nbsp &nbsp &nbsp 15&nbsp 24&nbsp 25&nbsp 20&nbsp 7\n&nbsp &nbsp &nbsp &nbsp 14&nbsp 23&nbsp 22&nbsp 21&nbsp 8\n&nbsp &nbsp &nbsp &nbsp 13&nbsp 12&nbsp 11&nbsp 10&nbsp 9\n\n&nbsp &nbsp &nbsp &nbsp 顺治可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。在上面的例子中，一条可滑行的滑坡为24-17-16-1。当然25-24-23-...-3-2-1更长。事实上，这是最长的一条。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行表示区域的行数R和列数C(1&nbsp &lt; =&nbsp R,C&nbsp &lt; =&nbsp 500)。下面是R行，每行有C个整数，代表高度h，0&lt; =h&lt; =10000。\n','&nbsp &nbsp &nbsp &nbsp 输出最长区域的长度。\n','5 5\n1 2 3 4 5\n16 17 18 19 6\n15 24 25 20 7\n14 23 22 21 8\n13 12 11 10 9\n','25\n','0','','Vivian&nbsp Snow\n','2017-04-30 04:26:32',0,128,'N',0,0,0),(1071,'VIJOS-P1012','&nbsp &nbsp &nbsp &nbsp 话说雍正为了实施促进城市间沟通的政策，他计划在所有的大城市里挑选两个城市，在两个城市之间修建一条运河，这条运河要求是笔直的，以加强这两个城市的经济往来。但雍正希望这条运河长度越短越好，他请来了宰相和大学士帮他解决这个问题——到底挑哪两个大城市，在其间建造运河，使得其长度最小，最小为多少？可是经过长时间的计算和判断，仍然没有得出结果。此时，雍正想到了当初为康熙解决难题的你，是如此的智慧，如此的聪明绝顶。他亲自来到茅厕，找到了你（你当时已然是一个扫厕所的了），希望你能帮他解决这个问题，必定“厚”谢。你欣然答应了。\n&nbsp &nbsp &nbsp &nbsp 雍正将大致的情况告诉了你，并且说：大清一共有n个大城市，所有的大城市都不在同一个地点，同时我们对这n个城市从1到n进行编号；对于一个城市k，他有两个属性，一个是Xk，一个是Yk，分别表示这个城市所处的经度和纬度。请你告诉他问题的结果：L，即运河长度。（你可以假定地球是平面的）\n','&nbsp &nbsp &nbsp &nbsp 第1行，一个整数n。\n&nbsp &nbsp &nbsp &nbsp 从第2行到n+1行，按照i从小到大顺序，每行两个整数Xi，Yi，代表编号为i的城市的经度和纬度。\n&nbsp &nbsp &nbsp &nbsp 其中2&lt; =n&nbsp &lt; =100000，1&lt; =Xi,Yi&lt; 2^31。\n','&nbsp &nbsp &nbsp &nbsp 一个实数L（保留三位小数）。\n','2\n1 1\n2 2\n','1.414\n','0','','Vivian&nbsp Snow\n','2017-04-30 04:27:14',0,128,'N',0,0,0),(1072,'A MST Problem','<p>It is just a mining spanning tree ( 最小生成树 ) problem, what makes you a little difficult is that you are in a 3D space.</p>','<div>The first line of the input contains the number of test cases in the file. And t he first line of each case</div>\n<div>contains one integer numbers n(0&lt;n&lt;30) specifying the number of the point . The n next n line s, each line</div>\n<div>contain s Three Integer Numbers xi,yi and zi, indicating the position of point i.</div>','<p>For each test case, output a line with the answer, which should accurately rounded to two decimals .</p>\n<p></p>','2\n2\n1 1 0\n2 2 0\n3\n1 2 3\n0 0 0\n1 1 1','1.41\n3.97','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1073,'Border ','<div>You are to write a program that draws a border around a closed path into a bitmap, as displayed in the</div>\n<div>following figure:</div>\n<div><img width=\"303\" height=\"306\" alt=\"\" src=\"/admin/../upload/pimg1073_1.png\" /></div>\n<div>The path is closed and runs along the grid lines, i.e. between the squares of the grid. The path runs</div>\n<div>counter-clockwise, so if following the path is considered as going &rdquo; forward &rdquo; , the border pixels are always</div>\n<div>to the &rdquo; right &rdquo; of the path. The bitmap always covers 32 by 32 squares and has its lower left corner at (0,0).</div>\n<div>You can safely assume that the path never touches the bounding rectangle of the bitmap and never</div>\n<div>touches or crosses itself. Note that a bit gets set if it is on the outside of the area surrounded by the path</div>\n<div>and if at least one of its edges belongs to the path, but not if only one of its corners is in the path. (A look</div>\n<div>at the convex corners in the figure should clarify that statement.)</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. Each test case that follows</div>\n<div>consists of two lines. The first line of each case contains two integer numbers x and y specifying the</div>\n<div>starting point of the path. The second line contains a string of variable length. Every letter in the string</div>\n<div>symbolizes a move of length one along the grid. Only the letters `W\' (``west\'\'), `E\' (``east\'\'), `N\' (``north\'\'),</div>\n<div>`S\' (``south\'\'), and `.\' (``end of path\'\', no move) appear in the string. The end-of-path character (`.\') is&nbsp;immediately followed by the end of the line.</div>\n<div></div>\n<p></p>','<div>For each test case, output a line with the number of the case (`Bitmap #1\', `Bitmap #2\', etc.). For each</div>\n<div>row of the bitmap from top to bottom, print a line where you print a character for every bit in that row</div>\n<div>from left to right. Print an uppercase `X\' for set bits and a period `.\' for unset bits. Output a blank line</div>\n<div>after each bitmap.</div>\n<p></p>','1\n2 1\nEENNWNENWWWSSSES.','Bitmap #1\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n.XXX............................\nX...X...........................\nX..X............................\nX...X...........................\n.X..X...........................\n..XX............................\n','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1074,'C hicken and rabbit s','<div>Chicken and rabbits are in a same cage. As we all know, chicken has two legs but rabbit has four. Now</div>\n<div>we know the number of legs in the cage is A, please tell me how many animals may in the cage at least</div>\n<div>and at most.</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. Each test case that follows</div>\n<div>consists of one lines. each case contains only one integer numbers A specifying the total legs in the</div>\n<div>cage .</div>\n<p></p>','<p>For each test case, print a line contains the answer</p>\n<p></p>','2\n3\n20','0 0\n5 10','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1075,'Diamond ','<div>Diamond mine is a mini-game which is played on an 8 * 8 board as you can see below.</div>\n<div><img width=\"219\" height=\"213\" alt=\"\" src=\"/admin/../upload/pimg1075_1.png\" /></div>\n<div><img width=\"0\" height=\"0\" alt=\"\" src=\"/admin/../upload/pimg1075_2.png\" /></div>\n<div>The board is filled with different colors of diamonds. The player can make one move at a time. A move is</div>\n<div>legal if it swaps two adjacent diamonds(not diagonally) and after that, there are three or more adjacent</div>\n<div>diamonds in a row or column with the same color. Those diamonds will be taken away and new</div>\n<div>diamonds will be put in their positions. The game continues until no legal moves exist.</div>\n<div>Given the board description. You are going to determine whether a move is legal.</div>\n<p></p>','<div>The input contains several cases. Each case has exactly 9 lines. The first 8 lines each contains a string</div>\n<div>of 8 characters. The characters are \'R\'(Red), \'O\'(Orange), \'G\'(Green), \'P\'(Purple), \'W\'(White), \'Y\'(Yellow)</div>\n<div>or \'B\'(Blue). All characters are uppercase. No 3 diamonds of the same color are initially in adjacent</div>\n<div>positions in a row or column. The last line has 4 integers in the form &quot; row1 column1 row2 column2&quot;</div>\n<div>describing the postions of the 2 diamonds that the player wants to swap. Rows are marked 1 to 8</div>\n<div>increasingly from top to bottom while columns from left to right. Input is terminated by EOF.</div>\n<p></p>','<p>For each case, output &quot;Ok!&quot; if the move is legal or &quot;Illegal move!&quot; if it is not.</p>\n<p></p>','PBPOWBGW\nRRPRYWWP\nYGBYYGPP\nOWYGGRWB\nGBBGBGGR\nGBWPPORG\nPPGORWOG\nWYWGYWBY\n4 3 3 3\nPBPOWBGW\nRRPRYWWP\nYGBYYGPP\nOWYGGRWB\nGBBGBGGR\nGBWPPORG\nPPGORWOG\nWYWGYWBY\n5 5 6 5','Ok!\nIllegal move!','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1076,'Easy List Operations','<div>A list is a sequence of or more elements, expressed in this form: [a 1 , a 2 , a 3 , ... , a n ], where each a i</div>\n<div>is or more consecutive digits or lowercase letters. i.e. each list begins with a left square bracket,</div>\n<div>then zero or more elements separated by a single comma, followed by a right square bracket. There will</div>\n<div>be no whitespace characters (spaces, TABs etc) within a list.</div>\n<div>In this problem, we use two list operations: append (++) and remove (--).</div>\n<div>1. A ++ B: append elements in B to the end of A.</div>\n<div>2. A -- B: remove all the elements in B, from A. If something appears more than once in B, remove it that</div>\n<div>many times in A. If there are many equal elements in A to choose from, remove them from left to right</div>\n<div>(until all occurrences are removed, or there is no need to remove more elements).</div>\n<div>Your task is to write a calculator, evaluating simple expressions or the form &quot;list1 ++ list2&quot; or &quot;list1 --</div>\n<div>list2&quot;.</div>\n<p></p>','<div>There will be at most 10 expressions, one in each line, each having the form &quot;list1 ++ list2&quot; or &quot;list1 --</div>\n<div>list2&quot;, with no more than 80 characters in total (not counting the newline character). There will be exactly</div>\n<div>two spaces in each line: one before and one after the operator. Input ends with a single <strong>dot</strong>. The input is</div>\n<div>guaranteed to satisfy the restrictions stated above.</div>\n<p></p>','<p>For each expression, print its result on a single line.</p>\n<p></p>','[1,2,3] ++ [1,2,3]\n[a,b,c,t,d,e,t,x,y,t] -- [t]\n[a,b,c,t,d,e,t,x,y,t] -- [t,t,t,t]\n[123] ++ [456]\n.','[1,2,3,1,2,3]\n[a,b,c,d,e,t,x,y,t]\n[a,b,c,d,e,x,y]\n[123,456]','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1077,'Fortun e Test','<div>A lot of people have played fortune Test(or called RP Test) before. Let &rsquo; s create a new Test below.</div>\n<div>Suppose the worth of a=1, b=4,c=9 &hellip; and z=26^2. Then abc can describe as 149,and abd describe as</div>\n<div>1416. As it is too large ,we take it mod 101 as ours fortune worth. S o abd has only 2 RP. Now I give you</div>\n<div>a name, please tell me the worth of it.</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. Each test case that follows</div>\n<div>consists of one lines. each case contains only one string s specifying a person &rsquo; s name, which only</div>\n<div>contains lower-case .</div>\n<p></p>','<p>For each test case, print a line contains the answer.</p>\n<p></p>','1\na','1','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1078,'Give me the answer','<div>Farmer John commanded his cows to search for different sets of numbers that sum to a given number.</div>\n<div>The cows use only numbers that are an integer power of 2. Here are the possible sets of numbers that</div>\n<div>sum to 7:</div>\n<div>1) 1+1+1+1+1+1+1</div>\n<div>2) 1+1+1+1+1+2</div>\n<div>3) 1+1+1+2+2</div>\n<div>4) 1+1+1+4</div>\n<div>5) 1+2+2+2</div>\n<div>6) 1+2+4</div>\n<div>Help FJ count all possible representations for a given integer N (1 &lt;= N &lt;= 1 ,000,000)</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. And t he first line of each case</div>\n<div>contains one integer numbers n</div>\n<p></p>','<p>For each test case, output a line with the ans % 1000000000.</p>\n<p></p>','1\n7','6','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1079,'Hidden Number','<p>Your job is to find out the secret number hidden in a matrix, each of whose element is a digit (\'0\'-\'9\') or a letter (\'A\'-\'Z\'). You can see an example matrix in Figure 1.&nbsp;</p>\n<p>&nbsp;<img width=\"497\" height=\"337\" alt=\"\" src=\"/admin/../upload/pimg1079_1.png\" /></p>\n<p></p>\n<div><span style=\"font-size:12.0pt;\">The hidden number and other non-secret ones are coded in a matrix as sequences of digits in a decimal format. You should only consider sequences of digits D1 D2 ... Dn such that Dk+1 (1 &lt;= k &lt; n) is either right next to or immediately below Dk in the matrix. The secret you are seeking is the largest number coded in this manner. </span></div>\n<div><span style=\"font-size:12.0pt;\">Four coded numbers in the matrix in Figure 1, i.e., 908820, 23140037, 23900037, and 9930, are depicted in Figure 2. As you may see, in general, two or more coded numbers may share a common subsequence. In this case, the secret number is 23900037, which is the largest among the set of all coded numbers in the matrix.&nbsp;</span></div>\n<div></div>\n<div><img width=\"542\" height=\"419\" alt=\"\" src=\"/admin/../upload/pimg1079_2.png\" /></div>\n<div>In contrast, the sequences illustrated in Figure 3 should be excluded: 908A2 includes a letter; the fifth digit of 23149930 is above the fourth; the third digit of 90037 is below right of the second.</div>\n<div></div>\n<div><img width=\"563\" height=\"346\" alt=\"\" src=\"/admin/../upload/pimg1079_3.png\" /></div>\n<div>Write a program to figure out the secret number from a given matrix.</div>\n<p class=\"MsoNormal\"><span lang=\"EN-US\" style=\"font-size:12.0pt;font-family:宋体;mso-bidi-font-family:宋体\"><o:p></o:p></span></p>\n<div></div>\n<p class=\"MsoNormal\"><span lang=\"EN-US\" style=\"font-size:12.0pt;font-family:宋体;mso-bidi-font-family:宋体\"><o:p></o:p></span></p>\n<div></div>\n<p></p>','<div>The input consists of multiple data sets, each data set representing a matrix. The format of each data</div>\n<div>set is as follows.</div>\n<div>W H</div>\n<div>C11C12 ... C1W</div>\n<div>C21C22 ... C2W</div>\n<div>...</div>\n<div>CH1CH2 ... CHW</div>\n<div>In the first line of a data set, two positive integers W and H are given. W indicates the width (the number</div>\n<div>of columns) of the matrix, and H indicates the height (the number of rows) of the matrix. W+H is less</div>\n<div>than or equal to 70.</div>\n<div>H lines follow the first line, each of which corresponds to a row of the matrix in top to bottom order. The</div>\n<div>i-th row consists of W characters Ci1Ci2 ... CiW in left to right order. You may assume that the matrix</div>\n<div>includes at least one non-zero digit.</div>\n<div>Following the last data set, two zeros in a line indicate the end of the input.</div>\n<p></p>','<p>For each data set, print the hidden number on a line. Leading zeros should be suppressed.</p>\n<p></p>','7 4\n9R2A993\n0E314A0\n8A900DE\n820R037\n6 7\nJH03HE\nID7722\n0DA1AH\n30C9G5\n99971A\nCA7EAI\nAHLBEM\n20 2\nA1234567891234CBDEGH\nBDEDF908034265091499\n0 0\n','23900037\n771971\n12345908034265091499','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1080,'I think it\'s hard','<div>Xiao Ming is only seven years old, Now I give him some numbers, and ask him what is the second</div>\n<div>largest sum if he can choose a part of them. For example, if I give him 1 、 2 、 3 ， then he should tell</div>\n<div>me 5 as 6 is the largest and 5 is the second. I think it is too hard for him, isn &rsquo; t it?</div>\n<p></p>','<div>Standard input will contain multiple test cases. The first line of the input is a single integer T (1 &lt;= T &lt;=</div>\n<div>10) which is the number of test cases. And it will be followed by T consecutive test cases.</div>\n<div>Each test case starts with a line containing an integer N (1&lt;N&lt;10) , the number I give Xiao Ming . The</div>\n<div>second line contains N Integer numbers ai (-10&lt;ai&lt;10),</div>\n<p></p>','<p>For each test case, output the answer.</p>\n<p></p>','2\n3\n1 2 3\n4\n0 1 2 3','5\n5','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1081,'Just Pour the Water','<div>Shirly is a very clever girl. Now she has two containers (A and B), each with some water. Every minute,</div>\n<div>she pours half of the water in A into B, and simultaneous pours half of the water in B into A. As the</div>\n<div>pouring continues, she finds it is very easy to calculate the amount of water in A and B at any time. It is</div>\n<div>really an easy job :).</div>\n<div>But now Shirly wants to know how to calculate the amount of water in each container if there are more</div>\n<div>than two containers. Then the problem becomes challenging.</div>\n<div>Now Shirly has N (2 &lt;= N &lt;= 20) containers (numbered from 1 to N ). Every minute, each container is</div>\n<div>supposed to pour water into another K containers ( K may vary for different containers). Then the water</div>\n<div>will be evenly divided into K portions and accordingly poured into anther K containers. Now the question</div>\n<div>is: how much water exists in each container at some specified time?</div>\n<div>For example, container 1 is specified to pour its water into container 1, 2, 3. Then in every minute,</div>\n<div>container 1 will pour its 1/3 of its water into container 1, 2, 3 separately (actually, 1/3 is poured back to</div>\n<div>itself, this is allowed by the rule of the game).</div>\n<p></p>','<div>Standard input will contain multiple test cases. The first line of the input is a single integer T (1 &lt;= T &lt;=</div>\n<div>10) which is the number of test cases. And it will be followed by T consecutive test cases.</div>\n<div>Each test case starts with a line containing an integer N , the number of containers. The second line</div>\n<div>contains N floating numbers, denoting the initial water in each container. The following N lines describe</div>\n<div>the relations that one container(from 1 to N ) will pour water into the others. Each line starts with an</div>\n<div>integer K (0 &lt;= K &lt;= N ) followed by K integers. Each integer ([1, N ]) represents a container that should</div>\n<div>pour water into by the current container. The last line is an integer M (1&lt;= M &lt;= 1,000,000,000) denoting</div>\n<div>the pouring will continue for M minutes.</div>\n<p></p>','<div>For each test case, output contains N floating numbers to two decimal places, the amount of water</div>\n<div>remaining in each container after the pouring in one line separated by one space. There is no space at</div>\n<div>the end of the line.</div>\n<p></p>','1\n2\n100.00 100.00\n1 2\n2 1 2\n2','75.00 125.00','0','<div>the capacity of the container is not limited and all the pouring at every minute is processed at the</div>\n<div>same time.</div>\n<p></p>','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1082,'2^k进制数','<p><font face=\"Times New Roman\">设r是个2^k 进制数，并满足以下条件： <br />\n（1）r至少是个2位的2^k 进制数。 <br />\n（2）作为2^k 进制数，除最后一位外，r的每一位严格小于它右边相邻的那一位。 <br />\n（3）将r转换为2进制数q后，则q的总位数不超过w。 <br />\n在这里，正整数k（1&le;k&le;9）和w（k〈w&le;30000）是事先给定的。 <br />\n<br />\n问：满足上述条件的不同的r共有多少个？ <br />\n我们再从另一角度作些解释：设S是长度为w 的01字符串（即字符串S由w个&ldquo;0&rdquo;或&ldquo;1&rdquo;组成），S对应于上述条件（3）中的q。将S从右起划分为若干个长度为k 的段，每段对应一位2^k进制的数，如果S至少可分成2段，则S所对应的二进制数又可以转换为上述的2^k 进制数r。 <br />\n例：设k=3，w=7。则r是个八进制数（2^3=8）。由于w=7，长度为7的01字符串按3位一段分，可分为3段（即1，3，3，左边第一段只有一个二进制位），则满足条件的八进制数有： <br />\n2位数：高位为1：6个（即12，13，14，15，16，17），高位为2：5个，&hellip;，高位为6：1个（即67）。共6+5+&hellip;+1=21个。 <br />\n3位数：高位只能是1，第2位为2：5个（即123，124，125，126，127），第2位为3：4个，&hellip;，第2位为6：1个（即167）。共5+4+&hellip;+1=15个。 <br />\n所以，满足要求的r共有36个。 </font></p>','<p><font face=\"Times New Roman\">只有1行，为两个正整数，用一个空格隔开： <br />\nk w </font></p>','<p><font face=\"Times New Roman\">1行，是一个正整数，为所求的计算结果，即满足条件的不同的r的个数（用十进制数表示），要求最高位不得为0，各数字之间不得插入数字以外的其他字符（例如空格、换行符、逗号等）。 <br />\n（提示：作为结果的正整数可能很大，但不会超过200位） </font></p>','3  7','36','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1083,'Cylinder','<p><font face=\"Times New Roman\">Using a sheet of paper and scissors, you can cut out two faces to form a cylinder in the following way: <br />\n<br />\n<br />\nCut the paper horizontally (parallel to the shorter side) to get two rectangular parts. <br />\n<br />\nFrom the first part, cut out a circle of maximum radius. The circle will form the bottom of the cylinder. <br />\n<br />\nRoll the second part up in such a way that it has a perimeter of equal length with the circle\'s circumference, and attach one end of the roll to the circle. Note that the roll may have some overlapping parts in order to get the required length of the perimeter. <br />\n<br />\nGiven the dimensions of the sheet of paper, can you calculate the biggest possible volume of a cylinder which can be constructed using the procedure described above? </font><br />\n<br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">The input consists of several test cases. Each test case consists of two numbers w and h (1 &le; w &le; h &le; 100), which indicate the width and height of the sheet of paper. <br />\n<br />\nThe last test case is followed by a line containing two zeros. <br />\n</font></p>','<p><font face=\"Times New Roman\">For each test case, print one line with the biggest possible volume of the cylinder. Round this number to 3 places after the decimal point. </font><br />\n<br />\n</p>','10 10\n10 50\n10 30\n0 0\n\n','54.247\n785.398\n412.095\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1084,'C语言考试练习题_一元二次方程','<p><font size=\"3\" face=\"Times New Roman\">解一元二次方程ax^2+bx+c=0的解。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">\n<p><font size=\"3\" face=\"Times New Roman\">a,b,c的值。</font></p>\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">两个根X1和X2，其中X1&gt;=X2。。 <br />\n结果保留两位小数</font></p>','1 5 -2\n','0.37 -5.37\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1085,'C语言考试练习题_保留字母','<p><font size=\"3\" face=\"Times New Roman\">编一个程序，输入一个字符串，将组成字符串的所有非英文字母的字符删除后输出。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个字符串，长度不超过80个字符</font></p>','<p><font size=\"3\" face=\"Times New Roman\">删掉非英文字母后的字符串。</font></p>','abc123+xyz.5\n','abcxyz\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1086,'C语言考试练习题_排列','<p><font size=\"3\" face=\"Times New Roman\">有4个互不相同的数字，输出由其中三个不重复数字组成的排列。 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">4个整数。</font></p>','<pre><p><font size=\"3\" face=\"Times New Roman\">所有排列。</font></p></pre>','1 2 3 4\n','1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1\n1 2 4\n1 4 2\n2 1 4\n2 4 1\n4 1 2\n4 2 1\n1 3 4\n1 4 3\n3 1 4\n3 4 1\n4 1 3\n4 3 1\n2 3 4\n2 4 3\n3 2 4\n3 4 2\n4 2 3\n4 3 2\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1087,'DNA','<p><font face=\"Times New Roman\">小强从小就喜欢生命科学，他总是好奇花草鸟兽从哪里来的。终于， 小强上中学了，接触到了神圣的名词--DNA.它有一个双螺旋的结构。这让一根筋的小强抓破头皮，&ldquo;要是能画出来就好了&rdquo; 小强喊道。现在就请你帮助他吧</font></p>','<p><font face=\"Times New Roman\">输入包含多组测试数据。第一个整数N（N&lt;=15）,N表示组数，每组数据包含两个整数a,b。a表示一个单位的DNA串的行数，a为奇数且 3&lt;=a&lt;=39。b表示重复度(1&lt;=b&lt;=20)。</font></p>','<p><font face=\"Times New Roman\">输出DNA的形状，每组输出间有一空行。 </font></p>','2\n3 1\n5 4','X X\n X\nX X\n\nX   X\n X X\n  X\n X X\nX   X\n X X\n  X\n X X\nX   X\n X X\n  X\n X X\nX   X\n X X\n  X\n X X\nX   X\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1088,'IP判断','<p><font size=\"3\" face=\"Times New Roman\">在基于Internet的程序中，我们常常需要判断一个IP字符串的合法性。  <br />\n合法的IP是这样的形式：  <br />\nA.B.C.D  <br />\n其中A、B、C、D均为位于[0, 255]中的整数。为了简单起见，我们规定这四个整数中不允许有前导零存在，如001这种情况。  <br />\n现在，请你来完成这个判断程序吧^_^ </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入由多行组成，每行是一个字符串，输入由&ldquo;End of file&rdquo;结束。  <br />\n字符串长度最大为30，且不含空格和不可见字符</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每一个输入，单独输出一行  <br />\n如果该字符串是合法的IP，输出Y，否则，输出N</font></p>','1.2.3.4\na.b.c.d\n267.43.64.12\n12.34.56.bb\n210.43.64.129\n-123.4.5.6','Y\nN\nN\nN\nY\nN','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1089,'Jam的计数法','<p><font size=\"3\" face=\"Times New Roman\">Jam是个喜欢标新立异的科学怪人。他不使用阿拉伯数字计数，而是使用小 写英文字母计数，他觉得这样做，会使世界更加丰富多彩。在他的计数法中，每个数字的位数都是相同的（使用相同个数的字母），英文字母按原先的顺序，排在前 面的字母小于排在它后面的字母。我们把这样的&ldquo;数字&rdquo;称为Jam数字。在Jam数字中，每个字母互不相同，而且从左到右是严格递增的。每次，Jam还指定 使用字母的范围，例如，从2到10，表示只能使用{b,c,d,e,f,g,h,i,j}这些字母。如果再规定位数为5，那么，紧接在Jam数字 &ldquo;bdfij&rdquo;之后的数字应该是&ldquo;bdghi&rdquo;。（如果我们用U、V依次表示Jam数字&ldquo;bdfij&rdquo;与&ldquo;bdghi&rdquo;，则U〈V，且不存在Jam数字 P，使U〈P〈V）。你的任务是：对于从文件读入的一个Jam数字，按顺序输出紧接在后面的5个Jam数字，如果后面没有那么多Jam数字，那么有几个就 输出几个。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">有2行，第1行为3个正整数，用一个空格隔开：  <br />\ns t w  <br />\n（其中s为所使用的最小的字母的序号，t为所使用的最大的字母的序号。w为数字的位数，这3个数满足：1&le;s〈t&le;26, 2&le;w&le;t-s ）  <br />\n第2行为具有w个小写字母的字符串，为一个符合要求的Jam数字。  <br />\n所给的数据都是正确的，不必验证。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">最多为5行，为紧接在输入的Jam数字后面的5个Jam数字，如果后面没有那么多Jam数字，那么有几个就输出几个。每行只输出一个Jam数字，是由w个小写字母组成的字符串，不要有多余的空格。</font></p>','2 10 5\nbdfij','bdghi\nbdghj\nbdgij\nbdhij','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1090,'K-进制数','<p><font size=\"3\" face=\"Times New Roman\">考虑包含N位数字的K-进制数. 定义一个数有效, 如果其K-进制表示不包含两连续的0.</font></p>\n<p><font size=\"3\" face=\"Times New Roman\">考虑包含N位数字的K-进制数. 定义一个数有效, 如果其K-进制表示不包含两连续的0.  <br />\n<br />\n例:  <br />\n1010230 是有效的7位数  <br />\n1000198 无效  <br />\n0001235 不是7位数, 而是4位数.  <br />\n<br />\n给定两个数N和K, 要求计算包含N位数字的有效K-进制数的总数.  <br />\n<br />\n假设2 &lt;= K &lt;= 10; 2 &lt;= N; 4 &lt;= N+K &lt;= 18.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">两个十进制整数N和K</font></p>','<p>十进制表示的结果</p>','2\n10','90','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1091,'Tom数','<p><font face=\"Times New Roman\">正整数的各位数字之和被Tom称为Tom数。求输入数（&lt;2^32）的Tom数!</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行一个整数(&lt;2^32).</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行一个输出,对应该数的各位数之和.</font></p>','12345\n56123\n82\n','15\n17\n10\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1092,'【C语言训练】\"水仙花数\"问题1','<p><font size=\"3\" face=\"Times New Roman\">判断一个数是否为&quot;水仙花数&quot;，所谓&quot;水仙花数&quot;是指这样的一人数：其各位数字的立方和等于该数本身。例如：371是一个&quot;水仙花数&quot;，371=3^3+7^3+1^3. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个三位数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1或者0(1代表此数为水仙花数,0代表此数不是水仙花数)</font></p>','371','1','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1093,'【C语言训练】\"水仙花数\"问题2','<p><font size=\"3\" face=\"Times New Roman\">输出所有的&quot;水仙花数&quot;.所谓&quot;水仙花数&quot;是指这样的一个三位数：其各位数字的立方和等于该数本身。例如：371是一个&quot;水仙花数&quot;，371=3^3+7^3+1^3.</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">输出所有的&quot;水仙花数&quot;(从小到大的顺序输出)</font></p>','','','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1094,'【C语言训练】8除不尽的数','<p><font size=\"3\" face=\"Times New Roman\">一个自然数被8除余1,所得的商被8除也余1, <br />\n再将第二次的商被8除后余7,最后得到一个商为a. <br />\n又知这上自然数被17除余4.所得的商被17除余15, <br />\n最的得到一个商是a的2倍. <br />\n<br />\n求这个自然数.</font></p>','','<p>1993</p>','','','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1095,'【C语言训练】亲密数','<p><font size=\"3\" face=\"Times New Roman\">两个不同的自然数A和B，如果整数A的全部因子(包括1，不包括A本身)之和等于B；且整数B的全部因子(包括1，不包括B本身)之和等于A，则将整数A和B称为亲密数。求3000以内的全部亲密数。</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">3000以内的全部亲密数(输出格式:(A,B)，不加换行，不加分隔符号) <br />\n一对亲密数只输出一次, 小的在前</font></p>','','(220,284)(1184,1210)(2620,2924)','0','<p><font size=\"3\" face=\"Times New Roman\">按照亲密数定义，要判断数a是否有亲密数，只要计算出a的全部因子的累加和为b，再计算b的全部因子的累加和为n，若n等于a则可判定a和b是亲密数。计算数a的各因子的算法： <br />\n用a依次对i(i=1~a/2)进行模运算，若模运算结果等于0，则i为a的一个因子；否则i就不是a的因子。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1096,'【C语言训练】列出最简真分数序列*','<p><font size=\"3\" face=\"Times New Roman\">按递增顺序依次列出所有分母为40，分子小于40的最简分数。</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">分数之间用逗号分开(含最末逗号)</font></p>','','1/40,3/40,7/40,9/40,11/40,13/40,17/40,19/40,21/40,23/40,27/40,29/40,31/40,33/40,37/40,39/40,','0','<p><font size=\"3\" face=\"Times New Roman\">对分子采用穷举法，利用最大公约数的方法，判断分子与40是否构成真分数。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1097,'【C语言训练】大、小写问题','<p><font size=\"3\" face=\"Times New Roman\">输入一串字符,将其中的大写变成小写，若不为大写则原样输出</font></p>','<p><font size=\"3\" face=\"Times New Roman\">任意字符串(长度在100以内)以回车表示输入结束</font></p>','<p><font size=\"3\" face=\"Times New Roman\">将其中的大写 输出相应的小写，若不为大写则原样输出</font></p>','A123b','a123b','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1098,'【C语言训练】委派任务*','<p><font face=\"Times New Roman\">某侦察队接到一项紧急任务，要求在A、B、C、D、E、F六个队员中尽可能多地挑若干人，但有以下限制条件： <br />\n1)A和B两人中至少去一人； <br />\n2)A和D不能一起去； <br />\n3)A、E和F三人中要派两人去； <br />\n4)B和C都去或都不去； <br />\n5)C和D两人中去一个； <br />\n6)若D不去，则E也不去。 <br />\n问应当让哪几个人去？ </font><br />\n</p>','','<p><font size=\"3\" face=\"Times New Roman\">要派出的人 <br />\n若有多个，按字母递增顺序排列，用逗号分开（含末尾逗号） <br />\n<br />\n</font></p>','','A,B,C,F,','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1099,'【C语言训练】字符串正反连接','<p><font size=\"3\" face=\"Times New Roman\">所给字符串正序和反序连接，形成新串并输出</font></p>','<p><font size=\"3\" face=\"Times New Roman\">任意字符串（长度&lt;=50）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">字符串正序和反序连接所成的新字符串</font></p>','123abc','123abccba321','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1100,'【C语言训练】尼科彻斯定理','<p><font size=\"3\" face=\"Times New Roman\">验证尼科彻斯定理，即：任何一个正整数的立方都可以写成一串连续奇数的和。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">任一正整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">该数的立方分解为一串连续奇数的和</font></p>','13','13*13*13=219=157+159+161+163+165+167+169+171+173+175+177+179+181','0','<p><font size=\"3\" face=\"Times New Roman\">本题是一个定理，我们先来证明它是成立的。  <br />\n对于任一正整数a,不论a是奇数还是偶数，整数(a&times;a-a+1)必然为奇数。  <br />\n构造一个等差数列，数列的首项为(a&times;a-a+1),等差数列的差值为2(奇数数列)，则前a项的和为：  <br />\na&times;((a&times;a-a+1))+2&times;a(a-1)/2  <br />\n=a&times;a&times;a-a&times;a+a+a&times;a-a  <br />\n=a&times;a&times;a  <br />\n定理成立。证毕。  <br />\n通过定理的证明过程可知L所要求的奇数数列的首项为(a&times;a-a+1)，长度为a。编程的算法不需要特殊设计，可按照定理的证明过直接进行验证。  </font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1101,'【C语言训练】排序问题<1>','<p><font size=\"3\" face=\"Times New Roman\">将四个整数进行从小到大的顺序排列,</font></p>','<p><font size=\"3\" face=\"Times New Roman\">四个整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">从小到大输出这四个数</font></p>','5 3 4 2\n','2 3 4 5\n\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1102,'【C语言训练】排序问题<2>','<p><font size=\"3\" face=\"Times New Roman\">将十个数进行从大到小的顺序进行排列</font></p>','<p><font size=\"3\" face=\"Times New Roman\">十个整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">以从大到小的顺序输出这个十个数</font></p>','1 2 3 4 5 6 7 8 9 10\n','10 9 8 7 6 5 4 3 2 1\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1103,'【C语言训练】数字母','<p><font size=\"3\" face=\"Times New Roman\">输入一个字符串,数出其中的字母的个数.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个字符串，不包含空格（长度小于100）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">字符串中的字母的个数</font></p>','124lfdk54AIEJ92854&%$GJ','10','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1104,'【C语言训练】斐波纳契数列','<p><font size=\"3\" face=\"Times New Roman\">斐波纳契数列  <br />\n1，1，2，3，5，8，13，21，34，55，89&hellip;&hellip;这个数列则称为&ldquo;斐波纳契数列&rdquo;，其中每个数字都是&ldquo;斐波纳契数&rdquo;。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个整数N(N不能大于40)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">由N个&ldquo;斐波纳契数&rdquo;组成的&ldquo;斐波纳契数列&rdquo;。</font></p>','6','1 1 2 3 5 8','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1105,'【C语言训练】最大数问题','<p><font size=\"3\" face=\"Times New Roman\">输入若干个整数,以-1标记输入结束。输出其中的最大数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">若干个整数。（以-1标记输入结束）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">其中的最大数</font></p>','1 2 5 7 8 6 1 -6 -1','8','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1106,'【C语言训练】求1+2!+3!+...+N!的和','<p><font size=\"3\" face=\"Times New Roman\">求1+2!+3!+...+N!的和 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">正整数N（N〈=20）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1+2!+3!+...+N!的和 (结果为整数形式)</font></p>','3','9','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1107,'【C语言训练】求PI*','','','','','','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1108,'【C语言训练】求s=a+aa+aaa+aaaa+aa...a的值','<p><font size=\"3\" face=\"Times New Roman\">求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个一位的整数。  <br />\n例如2+22+222+2222+22222(此时共有5个数相加)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数a和n（n个数相加，1&lt;= n, a&lt;=9）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">s的值</font></p>','2 2','24','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1109,'【C语言训练】求具有abcd=(ab+cd)2性质的四位数','<p><font size=\"3\" face=\"Times New Roman\">3025这个数具有一种独特的性质：将它平分为二段，即30和25，使之相加后求平方，即(30+25)2，恰好等于3025本身。请求出具有这样性质的全部四位数</font></p>','','<p><font face=\"Times New Roman\">满足题意的数全部四位数(从小到大输出,且数之间用两个空格分开) </font><br />\n<br />\n</p>','','2025  3025  9801  ','0','<p><font size=\"3\" face=\"Times New Roman\">根据题意可以采用穷举法，对所有四位数进行判断，从而筛选出符合这种性质的四位数。具体算法实现，可任取一个四位数，将其截为两部分，前两位为a，后两位为b，然后套用公式计算并判断。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1110,'【C语言训练】求函数值','<p><font size=\"3\" face=\"Times New Roman\">按如下递归公式求函数值。  <br />\nx=1时 f(x)=10；x&gt;1时 f(x)=f(x-1)+2</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整型变量x</font></p>','<p><font size=\"3\" face=\"Times New Roman\">f(x)</font></p>','10','28','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1111,'【C语言训练】求矩阵的两对角线上的元素之和','<p><font size=\"3\" face=\"Times New Roman\">求矩阵的两对角线上的元素之和</font></p>','<p><font size=\"3\" face=\"Times New Roman\">矩阵的行数N  <br />\n和一个N*N的整数矩阵a[N][N](N&lt;=10) </font></p>','<p><font size=\"3\" face=\"Times New Roman\">所输矩阵的两对角线上的元素之和</font></p>','3\n1 2 3 \n4 5 6 \n7 8 9','25','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1112,'【C语言训练】求素数问题','<p><font size=\"3\" face=\"Times New Roman\">求出1-N中的所有素数 <br />\n<br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">大于1的正整数N</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1-N中的所有素数,(以从小到大的格式输出)</font></p>','9\n','2 3 5 7 \n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1113,'【C语言训练】求车速','<p><font size=\"3\" face=\"Times New Roman\">一辆以固定速度行驶的汽车，司机在上午10点看到里程表上的读数是一个对称数(即这个数从左向右读和从右向左读是完全一样的)，为95859。两小时后里程表上出现了一个新的对称数。问该车的速度是多少？新的对称数是多少？</font></p>','','','','95959','0','<p><font size=\"3\" face=\"Times New Roman\">根据题意，设所求对称数为i，其初值为95589，对其依次递增取值，将i值的每一位分解后与其对称位置上的数进行比较，若每个对称位置上的数皆相等，则可判定i即为所求的对称数。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1114,'【C语言训练】百钱百鸡问题','<p><font size=\"3\" face=\"Times New Roman\">中国古代数学家张丘建在他的《算经》中提出了著名的&ldquo;百钱买百鸡问题&rdquo;：鸡翁一，值钱五，鸡母一，值钱三，鸡雏三，值钱一，百钱买百鸡，问翁、母、雏各几何？</font></p>','<p><font size=\"3\" face=\"Times New Roman\"><br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">给出所有的解，每组解占一行  <br />\n解的顺序：按&ldquo;字典序&rdquo;排列，即公鸡数少的在前；公鸡数相同，母鸡数少的在前  <br />\n格式:  <br />\ncock=%d,hen=%d,chicken=%d\\n</font></p>','13 14.1\n12.2 12.3\n15 18\n22.2 23.5\n33.45 33.56\n67.73 67.92','cock=0,hen=25,chicken=75\ncock=4,hen=18,chicken=78\ncock=8,hen=11,chicken=81\ncock=12,hen=4,chicken=84','0','<p><font size=\"3\" face=\"Times New Roman\">设鸡翁、鸡母、鸡雏的个数分别为x,y,z，题意给定共100钱要买百鸡，若全买公鸡最多买20只，显然x的值在0~20之间；同理，y的取值范围在0~33之间，可得到下面的不定方程：  <br />\n5x+3y+z/3=100  <br />\nx+y+z=100  <br />\n所以此问题可归结为求这个不定方程的整数解。  <br />\n由程序设计实现不定方程的求解与手工计算不同。在分析确定方程中未知数变化范围的前提下，可通过对未知数可变范围的穷举，验证方程在什么情况下成立，从而得到相应的解。  <br />\n<br />\n注意：浮点数的比较不准确  <br />\n</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1115,'【C语言训练】立方和不等式','<p><font size=\"3\" face=\"Times New Roman\">试求满足下述立方和不等式的m的整数解。  <br />\n1^3+2^3+...+m^3〈=n  <br />\n本题算法如下：  <br />\n对指定的n，设置求和循环，从i=1开始，i递增1取值，把i3(或i*i*i)累加到s，直至s&gt;=n，脱离循环作相应的打印输出。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">正整数n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">不等式的整数解 </font></p>','10','2','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1116,'【C语言训练】素数问题','<p><font size=\"3\" face=\"Times New Roman\">编写一个程序判断一个数是否为素数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数</font></p>','<p><font face=\"Times New Roman\">1或0(其中1表示此数为素数,0为表示为不是素数) </font><br />\n<br />\n</p>','5\n','1\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1117,'【C语言训练】自守数问题','<p><font size=\"3\" face=\"Times New Roman\">自守数是指一个数的平方的尾数等于该数自身的自然数。 <br />\n例如： <br />\n25^2=625 <br />\n76^2=5776 <br />\n9376^2=87909376 <br />\n请求出200000以内的自守数?</font></p>','','<p><font face=\"Times New Roman\">200000以内的自守数(包括0, 数之间用两个空格分开) </font><br />\n<br />\n</p>','','0  1  5  6  25  76  376  625  9376  90625  109376  ','0','<p><font face=\"Times New Roman\">若采用&ldquo;求出一个数的平方后再截取最后相应位数&rdquo;的方法显然是不可取的，因为计算机无法表示过大的整数。 <br />\n分析手工方式下整数平方(乘法)的计算过程，以376为例： <br />\n376 被乘数 <br />\nX 376 乘数 <br />\n---------- <br />\n2256 第一个部分积=被乘数*乘数的倒数第一位 <br />\n2632 第二个部分积=被乘数*乘数的倒数第二位 <br />\n1128 第三个部分积=被乘数*乘数的倒数第三位 <br />\n---------- <br />\n141376 积 <br />\n本问题所关心的是积的最后三位。分析产生积的后三位的过程，可以看出，在每一次的部分积中，并不是它的每一位都会对积的后三位产生影响。总结规律可以得到：在三位数乘法中，对积的后三位产生影响的部分积分别为： <br />\n第一个部分积中：被乘数最后三位*乘数的倒数第一位 <br />\n第二个部分积中：被乘数最后二位*乘数的倒数第二位 <br />\n第三个部分积中：被乘数最后一位*乘数的倒数第三位 <br />\n将以上的部分积的后三位求和后截取后三位就是三位数乘积的后三位。这样的规律可以推广到同样问题的不同位数乘积。 <br />\n按照手工计算的过程可以设计算法编写程序。 </font><br />\n<br />\n</p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1118,'【C语言训练】自由落体问题','<p><font size=\"3\" face=\"Times New Roman\">一个球从100m高度自由落下,每次落地后反跳回原来高度的一半,再落下,再反弹.求它在第N次落地时共经过多少米? <br />\n</font></p>','<p><b> </b></p>\n<p><font size=\"3\" face=\"Times New Roman\"> 反弹的次数N</font></p>','<p><font size=\"3\" face=\"Times New Roman\">小球经过的路程(保留四位小数)</font></p>','2','200.0000','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1119,'【C语言训练】舍罕王的失算','<p><font size=\"3\" face=\"Times New Roman\">相传国际象棋是古印度舍罕王的宰相达依尔发明的.舍罕王十分喜爱象棋,决定让宰相自己选择何种赏赐.这位聪明的宰相指着8*8共64格的象棋说:陛下,请您赏给我一些麦子吧.就在棋盘的第1格放1粒,第2格放2粒,第三格放4粒,以后每一格都比前一格增加一位,依此放完棋盘一64格,我就感激不尽了.舍罕王让人扛了一袋麦子,他要兑现他的许诺. <br />\n请问,国王要兑现他的许诺共要多少粒麦子赏赐他的宰相?</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">以整数形式输出,不要其它符号</font></p>','','18446744073709552000','0','<p><font size=\"3\" face=\"Times New Roman\">应该是个很大的数,要考虑数的精度问题! 用double类型，输出尽可能精确的结果。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1120,'【C语言训练】角谷猜想','<p><font size=\"3\" face=\"Times New Roman\">角谷猜想:  <br />\n日本一位中学生发现一个奇妙的&ldquo;定理&rdquo;，请角谷教授证明，而教授无能为力，于是产生角谷猜想。猜想的内容是：任给一个自然数，若为偶数除以2，若为奇数则乘3加1，得到一个新的自然数后按照上面的法则继续演算，若干次后得到的结果必然为1。请编程验证。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">任一正整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">演算的过程</font></p>','10','10/2=5\n5*3+1=16\n16/2=8\n8/2=4\n4/2=2\n2/2=1','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1121,'【C语言训练】计算1977！*','<p><font size=\"3\" face=\"Times New Roman\">编写一个程序，计算1977！的值，</font></p>','','','','','0','<p><font size=\"3\" face=\"Times New Roman\">1977！的值超过计算机所能表示的整数范围，请考虑其他技巧，假设 1977！之值不超过10000位用一个含有10000个元素的整型数组num表示其结果，每个元素存放一位，num[0]存入个位数，num[]存入十 位数，依次类推&hellip;&hellip;8！=40320，当前最高位len=4，求9！与各位依次相乘rum保存当前的进位数字。（0&lt;=rem&lt;9）.  <br />\n1)rem置初始值0.  <br />\n2）i=0:rem=rem+num[0]*9=0+0=0。num[0]=rem%10=0，rem=rem/10=0。  <br />\n3）i=1:rem=rem+num[1]*9=0+18=18。num[1]=rem%10=8，rem=rem/10=1。  <br />\n4）i=2:rem=rem+num[2]*9=1+27=28。num[2]=rem%10=8，rem=rem/10=2。  <br />\n5）i=3:rem=rem+num[3]*9=2+0=2。num[3]=rem%10=2，rem=rem/10=0。  <br />\n6）i=4:rem=rem+num[4]*9=0+36=36。num[4]=rem%10=6，rem=rem/10=3。  <br />\n7）rem=3，说明有进位，数组最高位增加1，len=len+1=5，num[5]=rem%10=3，rem=rem/10=0，结束。  <br />\nnum各位结果为：3、6、2、8、8、0。即9！=362880 </font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1122,'【C语言训练】计算1~N之间所有奇数之和','<p><font size=\"3\" face=\"Times New Roman\">计算1~N之间所有奇数之和</font></p>','<p><font size=\"3\" face=\"Times New Roman\">正整数N</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1~N之间所有奇数之和</font></p>','10','25','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1123,'【C语言训练】计算t=1+1/2+1/3+...+1/n','<p><font size=\"3\" face=\"Times New Roman\">计算t=1+1/2+1/3+...+1/n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整型变量n </font></p>','<p><font size=\"3\" face=\"Times New Roman\">t(保留六位小数)</font></p>','10','2.928968 ','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1124,'【C语言训练】计算一个整数N的阶乘','<p><font size=\"3\" face=\"Times New Roman\">计算一个整数N的阶乘</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个整数N, (0〈=N〈=12)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数N的阶乘.</font></p>','5','120','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1125,'【C语言训练】计算：t=1-1/(2*2)-1/(3*3)-...-1/(m*m)','<p><font size=\"3\" face=\"Times New Roman\">计算：t=1-1/(2*2)-1/(3*3)-...-1/(m*m)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整型变量m</font></p>','<p><font size=\"3\" face=\"Times New Roman\">t(保留六位小数)</font></p>','10','0.450232','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1126,'【C语言训练】谁家孩子跑最慢* ','<p><font size=\"3\" face=\"Times New Roman\">张王李三家各有三个小孩。一天，三家的九个孩子在一起比赛短跑，规定不分年龄大小，跑第一得9分，跑第2得8分，依此类推。比赛结果各家的总分相同，且这些孩子没有同时到达终点的，也没有一家的两个或三个孩子获得相连的名次。已知获第一名的是李家的孩子，获得第二的是王家的孩子。问获得最后一名的是谁家的孩子？</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">输出最后一名的那家的姓的一个字母且以大写输出(若为张家,则输出Z)</font></p>','','W','0','<p><font size=\"3\" face=\"Times New Roman\">按题目的条件，共有1+2+3+...+9=45分，每家的孩子的得分应为15分。根据题意可知：获第一名的是李家的孩子，获第二名的是王家的孩子，则可推出：获第三名的一定是张家的孩子。由&ldquo;这些孩子没有同时到达终点的&rdquo;可知：名次不能并列，由&ldquo;没有一家的两个或三个孩子获得相连的名次&rdquo;可知：第四名不能是张家的孩子。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1127,'【C语言训练】邮票组合问题*','<p><font size=\"3\" face=\"Times New Roman\">某人有四张3分的邮票和三张5分的邮票，用这些邮票中的一张或若干张可以得到多少种不同的邮资？</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">可得到多少种 <br />\n</font></p>','','19','0','<p><font size=\"3\" face=\"Times New Roman\">将问题进行数学分析，不同张数和面值的邮票组成的邮资可用下列公式计算：  <br />\nS=3*i+5*j  <br />\n其中i为3分邮柰的张数，j为5分的张数  <br />\n按题目的要求，3分的邮票可以取0、1、2、3、4张，5分的邮票可以取0、1、2、3张。采用穷举方法进行组合，可以求出这些不同面值不同张数的邮标组合后的邮资。  </font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1128,'【C语言训练】阶乘和数*','<p><font size=\"3\" face=\"Times New Roman\">一个正整数如果等于组成它的各位数字的阶乘之和，该整数称为阶乘和数。 <br />\n例如，145=1!+4!+5!，则145是一个三位阶详细和数。 <br />\n请问:共有多少个阶乘和数？</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">所有的阶乘和数(按字典序，即1打头的在前，2打头的次之,..., 空格分隔)</font></p>','','1 145 2 40585 ','0','<p><font size=\"3\" face=\"Times New Roman\">提示：8*9!=8*362880&lt;10000000</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1129,'【C语言训练】阿姆斯特朗数','<p><font size=\"3\" face=\"Times New Roman\">如果一个正整数等于其各个数字的立方和，则称该数为阿姆斯特朗数(亦称为自恋性数)。 <br />\n如 407=4^3+0^3+7^3就是一个阿姆斯特朗数。试编程求大于1小于1000的所有阿姆斯特朗数。</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">从小到大输出,数之间用两个空格分开</font></p>','','153  370  371  407  ','0','<p><font size=\"3\" face=\"Times New Roman\">可采用穷举法，依次取1000以内的各数(设为i)，将i的各位数字分解后，据阿姆斯特朗数的性质进行计算和判断。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1130,'【亲和数】','<p><font size=\"3\" face=\"Times New Roman\">古希腊数学家毕达哥拉斯在自然数研究中发现，220的所有真约数(即不是自身的约数)之和为：  <br />\n<br />\n1+2+4+5+10+11+20+22+44+55+110＝284。  <br />\n<br />\n而284的所有真约数为1、2、4、71、 142，加起来恰好为220。人们对这样的数感到很惊奇，并称之为亲和数。一般地讲，如果两个数中任何一个数都是另一个数的真约数之和，则这两个数就是亲和数。  <br />\n你的任务就编写一个程序，判断给定的两个数是否是亲和数  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据第一行包含一个数M，接下有M行，每行一个实例,包含两个整数A,B； 其中 0 ＜＝A,B ＜＝600000 ; </font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，如果A和B是亲和数的话输出YES，否则输出NO。</font></p>','2\n220 284\n100 200','YES\nNO','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1131,'【作业调度方案】','<p><font size=\"3\" face=\"Times New Roman\">我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。  <br />\n每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。  <br />\n例如，当n=3，m=2时，&ldquo;1-1，1-2，2-1，3-1，3-2，2-2&rdquo;就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。  <br />\n一方面，每个操作的安排都要满足以下的两个约束条件。  <br />\n(1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；  <br />\n(2) 同一时刻每一台机器至多只能加工一个工件。  <br />\n另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。  <br />\n由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为&ldquo;1 1 2 3 3 2&rdquo;。  <br />\n还要注意，&ldquo;安排顺序&rdquo;只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。  <br />\n例如，取n=3,m=2，已知数据如下：  <br />\n<br />\n则对于安排顺序&ldquo;1 1 2 3 3 2&rdquo;，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。 <br />\n<br />\n当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题 简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条 件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。  <br />\n显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行为两个正整数，用一个空格隔开：  <br />\nm n  <br />\n（其中m（〈20）表示机器数，n（〈20）表示工件数）  <br />\n第2行： 2n个用空格隔开的数，为给定的安排顺序。  <br />\n接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。  <br />\n其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。  <br />\n后n行依次表示每个工件的每个工序的加工时间。  <br />\n可以保证，以上各数据都是正确的，不必检验。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为最少的加工时间。</font></p>','2 3\n1 1 2 3 3 2\n1 2 \n1 2 \n2 1\n3 2 \n2 5 \n2 4\n','10','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1132,'【偶数求和】','<p><font size=\"3\" face=\"Times New Roman\">有一个长度为n(n&lt;=100)的数列，该数列定义为从2开始的递增有序偶数（公差为2的等差数列），现在要求你按照顺序每m个数求出一个平均值，如果最后不足m个，则以实际数量求平均值。编程输出该平均值序列。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，包含两个正整数n和m，n和m的含义如上所述。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一个平均值序列，每组输出占一行</font></p>','3 2\n4 2','3 6\n3 7','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1133,'【出圈】','<p><font size=\"3\" face=\"Times New Roman\">设有n个人围坐一圈并按顺时针方向从1到n编号，从第1个人开始进行1到m的报数，报数到第个m人，此人出圈，再从他的下一个人重新开始1到m的报数，如此进行下去直到所剩下一人为止。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入多行，每行２个数，分别表示n和m.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">计算每一行中最后剩下这个人的编号．</font></p>','10 3','4','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1134,'【回文数(二)】','<p><font size=\"3\" face=\"Times New Roman\">若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。  <br />\n例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。  <br />\n又如：对于10进制数87：  <br />\nSTEP1：87+78 = 165　　　　　　　　 STEP2：165+561 = 726  <br />\nSTEP3：726+627 = 1353　　　　　　　　STEP4：1353+3531 = 4884  <br />\n在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。  <br />\n写一个程序，给定一个N（2&lt;=N&lt;=16）进制数M，求最少经过几步可以得到回文数。如果在30步以内（包含30步）不可能得到回文数，则输出&ldquo;Impossible!&rdquo;  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">共两行  <br />\n第一行为进制数N（2&lt;=N&lt;=16）  <br />\n第二行为N进制数M（0&lt;=M&lt;=maxlongint）  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">共一行，为&ldquo;STEP=经过的步数&rdquo;或&ldquo;Impossible!&rdquo;</font></p>','9\n87','STEP=6','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1135,'【密码】','<p><font size=\"3\" face=\"Times New Roman\">网上流传一句话:&quot;常在网上飘啊，哪能不挨刀啊～&quot;。其实要想能安安心心地上网其实也不难，学点安全知识就可以。  <br />\n首先，我们就要设置一个安全的密码。那什么样的密码才叫安全的呢？一般来说一个比较安全的密码至少应该满足下面两个条件：  <br />\n(1).密码长度大于等于8，且不要超过16。  <br />\n(2).密码中的字符应该来自下面&ldquo;字符类别&rdquo;中四组中的至少三组。  <br />\n这四个字符类别分别为：  <br />\n1.大写字母：A,B,C...Z;  <br />\n2.小写字母：a,b,c...z;  <br />\n3.数字：0,1,2...9;  <br />\n4.特殊符号：~,!,@,#,$,%,^;  <br />\n给你一个密码，你的任务就是判断它是不是一个安全的密码。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据第一行包含一个数M，接下有M行，每行一个密码（长度最大可能为50），密码仅包括上面的四类字符。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，判断这个密码是不是一个安全的密码，是的话输出YES，否则输出NO。</font></p>','3\na1b2c3d4\nLinle@ACM\n^~^@^@!%','NO\nYES\nNO','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1136,'【排队买票】','<p><font size=\"3\" face=\"Times New Roman\">有M个小孩到公园玩，门票是1元。其中N个小孩带的钱为1元，K个小孩带的钱为2元。售票员没有零钱，问这些小孩共有多少种排队方法，使得售票员总能找得开零钱。注意：两个拿一元零钱的小孩，他们的位置互换，也算是一种新的排法。（M&lt;=10） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入一行，M,N,K(其中M=N+K,M&lt;=10).</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出一行，总的排队方案。</font></p>','4 2 2','8','0','','吉首大学软件学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1137,'【数组的距离】','<p><font size=\"3\" face=\"Times New Roman\">已知元素从小到大排列的两个数组x[]和y[]，请写出一个程序算出两个数组彼此之间差的绝对值中最小的一个，这叫做数组的距离</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行为两个整数m, n(1&le;m, n&le;1000)，分别代表数组f[], g[]的长度。 <br />\n第二行有m个元素，为数组f[]。 <br />\n第三行有n个元素，为数组g[]。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">数组的最短距离</font></p>','5 5\n1 2 3 4 5\n6 7 8 9 10\n','1','0','','吉首大学软件服务外包学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1138,'【明明的随机数】','<p><font size=\"3\" face=\"Times New Roman\">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用 计算机生成了N个1到1000之间的随机整数（N&le;100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然 后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">有2行，第1行为1个正整数，表示所生成的随机数的个数：  <br />\nN  <br />\n第2行有N个用空格隔开的正整数，为所产生的随机数。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">也是2行，第1行为1个正整数M，表示不相同的随机数的个数。第2行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</font></p>','10\n20 40 32 67 40 20 89 300 400 15','8\n15 20 32 40 67 89 300 400','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1139,'【求[X,Y]内被除3余1并且被除5余3的整数的和】','<p><font face=\"Times New Roman\" size=\"3\">输入两个正整数X,Y,求出[X,Y]内被除3余1并且被除5余3的整数的和</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入两个正整数X,Y</font></p>','<p><font face=\"Times New Roman\" size=\"3\">求所有满足条件的数的和</font></p>','200 800\n','20020\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1140,'【矩阵】','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">给一个n*n的矩阵A，它的每一个元素Ai,j都是整数( 0 &lt;= i &lt; n, 0 &lt;= j &lt; n )。在每一行i( 0 &lt;= i &lt; n )给一个右移操作，使第i行的整数整体向右移动一个位置，最右边的整数将会移动到最左端的那一列。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n你可以在任意行做右移操作，这样你会得到一个新的矩阵，对于新的矩阵你当然也可以做右移操作。你的任务就是求列最小值ColMin,它是每个矩阵的列最大值，但同时又是所有矩阵中的列最小值。<span class=\"Apple-converted-space\">&nbsp;</span><br />\nmax(0 &lt;= j &lt; n){Cj|Cj=&Sigma;0&lt;=i &lt; nAi,j}<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">可能包含多次输入。第一行是一个整数n，接下来n行每行包含n个整数，这些数据就是n*n的矩阵A的元素。如果输入仅含有-1的一行，就表示输入终止。其中1 &lt;= n &lt;= 7 而且 |Ai,j| &lt; 104 。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">对于每组测试，打印一行包含一个数值，它在一个矩阵中是列最大值，但是在所有的变换矩阵中又是列最小值。</span></p>','2 \n4 6 \n3 7 \n3 \n1 2 3 \n4 5 6 \n7 8 9 \n-1\n','11 \n15','0','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">例如：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n2<span class=\"Apple-converted-space\">&nbsp;</span><br />\n4 6<span class=\"Apple-converted-space\">&nbsp;</span><br />\n3 7<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是：13<span class=\"Apple-converted-space\">&nbsp;</span><br />\n右移操作：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n6 4<span class=\"Apple-converted-space\">&nbsp;</span><br />\n3 7<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是：11<span class=\"Apple-converted-space\">&nbsp;</span><br />\n右移操作：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n4 6<span class=\"Apple-converted-space\">&nbsp;</span><br />\n7 3<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是：11<span class=\"Apple-converted-space\">&nbsp;</span><br />\n右移操作：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n6 4<span class=\"Apple-converted-space\">&nbsp;</span><br />\n7 3<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是13<span class=\"Apple-converted-space\">&nbsp;</span><br />\n显然在所有的变换矩阵中列最大值是小是11<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1141,'【简单计算】','<p><font face=\"Times New Roman\">有一个n+2个元素a[0], a[1], ..., a[n+1] (n &lt;= 3000, -1000 &lt;= a[i] &lt;=1000)构成的数列. <br />\n已知对i=1, 2, ..., n有a[i] = (a[i-1] + a[i+1])/2 - c[i]. <br />\n<br />\n给定a0, a[n+1], c[1], ... , c[n]. 写一个程序计算a[1]. </font><br />\n</p>','<p><font face=\"Times New Roman\" size=\"3\">第一行是整数n. 接下来两行是a[0]和a[n+1], 其小数点后有两位数字. 其后的n行为c[i](同样是两位小数), 每行一个数.</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输出为a[1], 格式与a[0], a[n+1]相同.</font></p>','1\n50.50\n25.50\n10.15\n','27.85\n','0','','吉首大学软件学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1142,'【绝对值排序】','<p><font size=\"3\" face=\"Times New Roman\">输入n(n&lt;=100)个整数，按照绝对值从大到小排序后输出。题目保证对于每一个测试实例，所有的数的绝对值都不相等。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，每行的第一个数字为n,接着是n个整数，n=0表示输入数据的结束，不做处理。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，输出排序后的结果，两个数之间用一个空格隔开。每个测试实例占一行</font></p>','3 3 -4 2\n4 0 1 2 -3\n0','-4 3 2\n-3 2 1 0','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1143,'【能量项链】','<p><font face=\"Times New Roman\">在Mars星球上，每个Mars人都随身佩带着一串能量项链。在项链上有N颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标记。因为只有这样，通过吸盘（吸盘是Mars人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗能量珠的头标记为m，尾标记为r，后一颗能量珠的头标记为r，尾标记为n，则聚合后释放的能量为m*r*n（Mars单位），新产生的珠子的头标记为m，尾标记为n。 <br />\n需要时，Mars人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。 <br />\n例如：设N=4，4颗珠子的头标记与尾标记依次为(2，3) (3，5) (5，10) (10，2)。我们用记号◎表示两颗珠子的聚合操作，(j◎k)表示第j，k两颗珠子聚合后所释放的能量。则第4、1两颗珠子聚合后释放的能量为： <br />\n(4◎1)=10*2*3=60。 <br />\n这一串项链可以得到最优值的一个聚合顺序所释放的总能量为 <br />\n((4◎1)◎2)◎3）=10*2*3+10*3*5+10*5*10=710。</font></p>','<p><font face=\"Times New Roman\">第一行是一个正整数N（4&le;N&le;100），表示项链上珠子的个数。第二行是N个用空格隔开的正整数，所有的数均不超过1000。第i个数为第i颗珠子的头标记（1&le;i&le;N），当i〈N时，第i颗珠子的尾标记应该等于第i+1颗珠子的头标记。第N颗珠子的尾标记应该等于第1颗珠子的头标记。 <br />\n至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">只有一行，是一个正整数E（E&le;2.1*10^9），为一个最优聚合顺序所释放的总能量。</font></p>','4\n2  3  5  10\n\n','710\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1144,'【蟠桃记】','<p><font size=\"3\" face=\"Times New Roman\">喜欢西游记的同学肯定都知道悟空偷吃蟠桃的故事，你们一定都觉得这猴子太闹腾了，其实你们是有所不知：悟空是在研究一个数学问题！  <br />\n什么问题？他研究的问题是蟠桃一共有多少个！  <br />\n不过，到最后，他还是没能解决这个难题，呵呵^-^  <br />\n当时的情况是这样的：  <br />\n第一天悟空吃掉桃子总数一半多一个，第二天又将剩下的桃子吃掉一半多一个，以后每天吃掉前一天剩下的一半多一个，到第n天准备吃的时候只剩下一个桃子。聪明的你，请帮悟空算一下，他第一天开始吃的时候桃子一共有多少个呢？  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，包含一个正整数n（1＜n＜30），表示只剩下一个桃子的时候是在第n天发生的</font></p>','<p><font size=\"3\" face=\"Times New Roman\"> 对于每组输入数据，输出第一天开始吃的时候桃子的总数，每个测试实例占一行。</font></p>\n<p align=\"left\"><b><font size=\"5\" color=\"#333399\"><br />\n</font> </b></p>','2\n4','4\n22','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1145,'【计算两点间的距离】','<p><font size=\"3\" face=\"Times New Roman\">输入两点坐标（X1,Y1）,（X2,Y2）,计算并输出两点间的距离。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，由4个实数组成，分别表示x1,y1,x2,y2,数据之间用空格隔开。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行，结果保留两位小数。</font></p>','0 0 0 1\n0 1 1 0','1.00\n1.41','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1146,'【计算球体积】','<p><font size=\"3\" face=\"Times New Roman\">根据输入的半径值，计算球的体积。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，每行包括一个实数，表示球的半径。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出对应的球的体积，对于每组输入数据，输出一行，计算结果保留三位小数。</font></p>','1\n1.5','4.189\n14.137','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1147,'【计算直线的交点数】','<p><font size=\"3\" face=\"Times New Roman\">平面上有n条直线，且无三线共点，问这些直线能有多少种不同交点数。  <br />\n比如,如果n=2,则可能的交点数量为0(平行)或者1(不平行)。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个测试实例,每个测试实例占一行,每行包含一个正整数n（n&lt;=20）,n表示直线的数量.</font></p>','<p align=\"left\"><b><font size=\"5\" color=\"#333399\">Output</font> </b></p>\n<p><font size=\"3\" face=\"Times New Roman\"> 每个测试实例对应一行输出，从小到大列出所有相交方案，其中每个数为可能的交点数,每行的整数之间用一个空格隔开。 </font></p>','2\n3','0 1\n0 2 3','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1148,'【金明的预算方案】','<p><font size=\"3\" face=\"Times New Roman\">金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专用 的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早，金明就开始做预 算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子： <br />\n<br />\n主件 	附件  <br />\n电脑 	打印机，扫描仪  <br />\n书柜 	图书  <br />\n书桌 	台灯，文具  <br />\n工作椅 	无  <br />\n<br />\n如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有0个、1个或2个附件。附件不再有从属于自己的附件。金明想买的东西很 多，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格 （都是10元的整数倍）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />\n设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />\nv[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />\n请你帮助金明设计一个满足要求的购物单。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行，为两个正整数，用一个空格隔开：  <br />\nN m  <br />\n（其中N（&lt;32000）表示总钱数，m（&lt;60）为希望购买物品的个数。）  <br />\n从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数  <br />\nv p q  <br />\n（其中v表示该物品的价格（v&lt;10000），p表示该物品的重要度（1~5），q表示该物品是主件还是附件。如果q=0，表示该物品为主件，如果q&gt;0，表示该物品为附件，q是所属主件的编号）  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;200000）。</font></p>','1000 5\n800 2 0\n400 5 1\n300 5 1\n400 3 0\n500 2 0\n','2200','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1149,'【魔板】','<p><font size=\"3\" face=\"Times New Roman\">在魔方风靡全球之后不久，Rubik先生发明了它的简化版――魔板。魔板 由8个同样大小的方块组成，每个方块颜色均不相同，可用数字1-8分别表示。任一时刻魔板的状态可用方块的颜色序列表示：从魔板的左上角开始，按顺时针方 向依次写下各方块的颜色代号，所得到的数字序列即可表示此时魔板的状态。例如，序列(1,2,3,4,5,6,7,8)表示魔板状态为：  <br />\n1 2 3 4  <br />\n8 7 6 5  <br />\n对于魔板，可施加三种不同的操作，具体操作方法如下：  <br />\nA: 上下两行互换,如上图可变换为状态87654321  <br />\nB: 每行同时循环右移一格,如上图可变换为41236785  <br />\nC: 中间4个方块顺时针旋转一格,如上图可变换为17245368  <br />\n给你魔板的初始状态与目标状态，请给出由初态到目态变换数最少的变换步骤，若有多种变换方案则取字典序最小的那种。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">每组测试数据包括两行，分别代表魔板的初态与目态。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对每组测试数据输出满足题意的变换步骤。</font></p>','12345678\n17245368\n12345678\n82754631','C\nAC','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1150,'三角形','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">7<span class=\"Apple-converted-space\">&nbsp;</span><br />\n3 8<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n8 1 0<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n2 7 4 4<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n4 5 2 6 5<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n(图一)<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n图一表示一个5行的数字三角形。假设给定一个n行数字三角形,计算出从三角形顶至底的一条路径，使该路径经过的数字总和最大。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n每一步只能由当前位置向左下或右下。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">你的程序要能接受标准输入。第一行包含一个整数T，表示总的测试次数。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n对于每一种情况：第一行包含一个整数N,其中1 &lt; N &lt; 100,表示三角形的行数。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n接下来的N行输入表示三角形的每一行的元素Ai,j，其中0 &lt; Ai,j &lt; 100。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输出每次测试的最大值并且占一行。</span></p>','1 \n5 \n7 \n3 8 \n8 1 0  \n2 7 4 4 \n4 5 2 6 5','30','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1151,'三进制小数','<p><font face=\"Times New Roman\">你的任务呢，是将一个有理数转换成三进制小数。&ldquo;什么是三进制小数呢？&rdquo;你一定会问，这很明白，就是以三为基（二进制数以2为基，而十进制数则以10为基）的小数。 </font><br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">有理数的值都是在0与1之间的，每个有理数都由一个分子和一个分母表示，分子与分母之间隔着一个斜杠。有理数的个数不会超过1000个。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出格式见样本输出，它是以小数点开头的具有10位精度的3进制数。 <br />\n<br />\n</font></p>','1/3\n1/4\n1/6\n7/8','.1000000000\n.0202020202\n.0111111111\n.2121212122\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1152,'上车人数','<p><font size=\"3\" face=\"Times New Roman\">公共汽车从始发站(称为第1站)开出,在始发站上车的人数为a,然后到达 第2站,在第2站有人上、下车,但上、下车的人数相同，因此在第2站开出时（即在到达第3站之前）车上的人数保持为a人。从第3站起（包括第3站）上、下 车的人数有一定的规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站（第n-1站），都满足此规律。现给出的 条件是：共有n个车站，始发站上车的人数为a,最后一站下车的人数是m（全部下车）。试问从x站开出时车上的人数是多少？</font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一行，四个整数a,n,m和x </font></p>','<p><font size=\"3\" face=\"Times New Roman\">x站开出时车上的人数</font></p>','5 7 32 4','13','0','','吉首大学软件学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1153,'不容易系列','<p><font face=\"Times New Roman\">你活的不容易，我活的不容易，他活的也不容易。不过，如果你看了下面的故事，就会知道，有位老汉比你还不容易。 <br />\n重庆市郊黄泥板村的徐老汉（大号徐东海，简称XDH）这两年辛辛苦苦养了不少羊，到了今年夏天，由于众所周知的高温干旱，实在没办法解决牲畜的饮水问题，就决定把这些羊都赶到集市去卖。从黄泥板村到交易地点要经过N个收费站，按说这收费站和徐老汉没什么关系，但是事实却令徐老汉欲哭无泪： <br />\n（镜头回放） <br />\n近景：老汉，一群羊 <br />\n远景：公路，收费站 <br />\n...... <br />\n收费员（彬彬有礼+职业微笑）：&ldquo;老同志，请交过路费！&rdquo; <br />\n徐老汉（愕然，反应迟钝状）：&ldquo;锅，锅，锅，锅-炉-费？我家不烧锅炉呀？&rdquo; <br />\n收费员（职业微笑依然）：&ldquo;老同志，我说的是过-路-费，就是你的羊要过这个路口必须交费，understand?&rdquo; <br />\n徐老汉（近镜头10秒，嘴巴张开）：&ldquo;我-我-我知道汽车过路要收费，这羊也要收费呀？&rdquo; <br />\n收费员（居高临下+不解状）：&ldquo;老同志，你怎么就不明白呢，那么我问你，汽车几个轮子？&rdquo; <br />\n徐老汉（稍放松）：&ldquo;这个我知道，今天在家里我孙子还问我这个问题，4个！&rdquo; <br />\n收费员（生气，站起）：&ldquo;嘿！老头，你还骂人不带脏字，既然知道汽车四个轮子，难道就不知道这羊有几条腿吗？！&rdquo; <br />\n徐老汉（尴尬，依然不解状）：&ldquo;也，也，也是4个呀，这有关系吗？&rdquo; <br />\n收费员（生气，站起）：&ldquo;怎么没关系！我们头说了，只要是4条腿的都要收费！&rdquo; <br />\n...... <br />\n(画外音) <br />\n由于徐老汉没钱，收费员就将他的羊拿走一半，看到老汉泪水涟涟，犹豫了一下，又还给老汉一只。巧合的是，后面每过一个收费站，都是拿走当时羊的一半，然后退还一只，等到老汉到达市场，就只剩下3只羊了。 <br />\n你,当代有良知的青年，能帮忙算一下老汉最初有多少只羊吗？ </font><br />\n</p>','<p><font face=\"Times New Roman\">输入数据第一行是一个整数N，下面由N行组成， <br />\n每行包含一个整数a(0＜a＜=30),表示收费站的数量。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，请输出最初的羊的数量,每个测试实例的输出占一行。</font></p>','2\n1\n2\n\n','4\n6\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1154,'不容易系列2','<p><font size=\"3\" face=\"Times New Roman\">大家常常感慨，要做好一件事情真的不容易，确实，失败比成功容易多了！ <br />\n做好&ldquo;一件&rdquo;事情尚且不易，若想永远成功而总从不失败，那更是难上加难了，就像花钱总是比挣钱容易的道理一样。 <br />\n话虽这样说，我还是要告诉大家，要想失败到一定程度也是不容易的。比如，我高中的时候，就有一个神奇的女生，在英语考试的时候，竟然把40个单项选择题全部做错了！大家都学过概率论，应该知道出现这种情况的概率，所以至今我都觉得这是一件神奇的事情。如果套用一句经典的评语，我们可以这样总结：一个人做错一道选择题并不难，难的是全部做错，一个不对。 <br />\n不幸的是，这种小概率事件又发生了，而且就在我们身边： <br />\n事情是这样的――HDU有个网名叫做8006的男性同学，结交网友无数，最近该同学玩起了浪漫，同时给n个网友每人写了一封信，这都没什么，要命的是，他竟然把所有的信都装错了信封！注意了，是全部装错哟！ <br />\n现在的问题是：请大家帮可怜的8006同学计算一下，一共有多少种可能的错误方式呢？ <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个多个测试实例，每个测试实例占用一行，每行包含一个正整数n（２＜n＜=20），n表示8006的网友的人数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每行输入请输出可能的错误方式的数量，每个实例的输出占用一行。</font></p>','2\n3\n\n','1\n2\n\n','0','<p><font face=\"Times New Roman\">装错信封问题 <br />\n这个问题是由 18 世纪初的法国数学家蒙摩提出来的。 <br />\n<br />\n某人给五个朋友写信，邀请他们来家中聚会。请柬和信封交由助手去处理。粗心的助手却把请柬全装错了信封。请问：助手会有多少种装错的可能呢？ <br />\n<br />\n<br />\n-------------------------------------------------------------------------------- <br />\n<br />\n<br />\n瑞士数学家欧拉按一般情况给出了一个递推公式： <br />\n<br />\n用Ａ、Ｂ、Ｃ&hellip;&hellip;表示写着ｎ位友人名字的信封，ａ、ｂ、ｃ&hellip;&hellip;表示ｎ份相应的写好的信纸。把错装的总数为记作 f(n) 。假设把ａ错装进Ｂ里了，包含着这个错误的一切错装法分两类： <br />\n<br />\n（１）ｂ装入Ａ里，这时每种错装的其余部分都与Ａ、Ｂ、ａ、ｂ无关，应有 f(n-2) 种错装法。　　　　 <br />\n<br />\n（２）ｂ装入Ａ、Ｂ之外的一个信封，这时的装信工作实际是把（除ａ之外的）　　份信纸ｂ、ｃ&hellip;&hellip;装入（除Ｂ以外的）ｎ－１个信封Ａ、Ｃ&hellip;&hellip;，显然这时装错的方法有 f(n-1) 种。 <br />\n<br />\n总之在ａ装入Ｂ的错误之下，共有错装法 f(n-2)+f(n-1) 种。ａ装入Ｃ，装入Ｄ&hellip;&hellip;的ｎ－２种错误之下，同样都有 f(n-2)+f(n-1) 种错装法，因此 : <br />\n<br />\nf(n)=(n-1) {f(n-1)+f(n-2)} <br />\n<br />\n这是递推公式，令ｎ＝１、２、３、４、５逐个推算就能解答蒙摩的问题。 <br />\n<br />\nf(1)= 0， f (2)= 1， f (3)= 2， f (4)= 9， f (5)=44。 </font><br />\n<br />\n</p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1155,'人民币问题','<p><font face=\"Times New Roman\" size=\"3\">给出任意的人民币(&gt;10元)的整币兑换成5元、2元和1元币值（要求三种币值均有）的方法有多少种。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入任意的人民币(&gt;10元)的整币100,50,20,10</font></p>','<p><font face=\"Times New Roman\" size=\"3\">计算出兑换成5元、2元和1元币值（要求三种币值均有）的方法有多少种</font></p>','50\n','106\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1156,'人见人爱A+B','<p><font size=\"3\" face=\"Times New Roman\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 北大的acm上面已经有10来道A+B的题目了，相信这些题目曾经是大家的最爱，希望今天的这个A+B能给大家带来好运，也希望这个题目能唤起大家对ACM曾经的热爱。 <br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个题目的A和B不是简单的整数，而是两个时间，A和B 都是由3个整数组成，分别表示时分秒，比如，假设A为34 45 56，就表示A所表示的时间是34小时 45分钟 56秒。 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多行组成，首先是一个整数N，表示测试实例的个数，然后是N行数据，每行有6个整数AH,AM,AS,BH,BM,BS，分别表示时间A和B所对应的时分秒。题目保证所有的数据合法。 </font></p>','<p>对于每个测试实例，输出A+B，每个输出结果也是由时分秒3部分组成，同时也要满足时间的规则（即：分和秒的取值范围在0~59），每个输出占一行，并且所有的部分都可以用32位整数表示。</p>','1\n1 2 3 4 5 6\n','5 7 9\n','0','','软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1157,'众数问题','<p><font face=\"Times New Roman\">问题描述： <br />\n给定含有n个元素的多重集合S，每个元素在S中出现的次数称为该元素的重数。多重集S中重数最大的元素称为众数。 <br />\n例如，S={1，2，2，2，3，5}。多重集S的众数是2，其重数为3。 <br />\n编程任务： <br />\n对于给定的由n 个自然数组成的多重集S，编程计算S 的众数及其重数。 </font></p>','<p><font face=\"Times New Roman\">第1行多重集S中元素个数n(n&lt;=50000)；接下来的n 行中，每行有一个自然数。</font></p>','<p><font face=\"Times New Roman\">输出文件有2 行，第1 行给出众数，第2 行是重数。(如果有多个众数，只输出最小的)</font></p>','6\n1\n2\n2\n2\n3\n5\n','2\n3','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1158,'作业调度方案','<p><font size=\"3\" face=\"Times New Roman\">我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。  <br />\n每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。  <br />\n例如，当n=3，m=2时，&ldquo;1-1，1-2，2-1，3-1，3-2，2-2&rdquo;就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。  <br />\n一方面，每个操作的安排都要满足以下的两个约束条件。  <br />\n(1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；  <br />\n(2) 同一时刻每一台机器至多只能加工一个工件。  <br />\n另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。  <br />\n由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为&ldquo;1 1 2 3 3 2&rdquo;。  <br />\n还要注意，&ldquo;安排顺序&rdquo;只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。  <br />\n例如，取n=3,m=2，已知数据如下：  <br />\n<br />\n则对于安排顺序&ldquo;1 1 2 3 3 2&rdquo;，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。 <br />\n<br />\n当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题 简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条 件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。  <br />\n显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行为两个正整数，用一个空格隔开：  <br />\nm n  <br />\n（其中m（〈20）表示机器数，n（〈20）表示工件数）  <br />\n第2行： 2n个用空格隔开的数，为给定的安排顺序。  <br />\n接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。  <br />\n其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。  <br />\n后n行依次表示每个工件的每个工序的加工时间。  <br />\n可以保证，以上各数据都是正确的，不必检验。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为最少的加工时间。</font></p>','2 3\n1 1 2 3 3 2\n1 2 \n1 2 \n2 1\n3 2 \n2 5 \n2 4','10','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1159,'倒杨辉三角形','<p><font size=\"3\" face=\"Times New Roman\">Fans喜欢图形，而且喜欢把图形倒过来欣赏。有一次，他看见杨辉三角形 了，觉得很新鲜，于是就把它们大大小小地摆布出来。输入一些整数n（1&le;n&le;10），读入其每个整数，以该整数为行数，其画出来的倒杨辉三角形（每个数据 占三个字符）就是fans所喜欢欣赏的。Fans是手工做的，你却可以用编程更快捷地做出来，多爽啊! </font></p>','','','5\n3','1 4 6 4 1\n 1 3 3 1\n  1 2 1\n   1 1\n    1\n\n1 2 1\n 1 1\n  1','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1160,'假币问题','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">居然有假币！！！<span class=\"Apple-converted-space\">&nbsp;</span><br />\n事情是这样的，现在猪肉涨了，但是农民的工资却不见涨啊，没钱怎么买猪肉啊。老王这就去买猪肉，结果找来的零钱中有假币！！！可惜老王一不小心把它混进了一堆真币里面去了。现在知道假币的重量比真币的质量要轻。给你一个天平，请用最快的时间把那个可恶的假币找出来。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入有多行,每一行的值为硬币的数目n,1&le;n&le;2^30,输入0结束程序</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">最少要称多少次一定能把那个假币找出来。输出对应输入行数.</span></p>','3\n12\n0\n','1\n3','0','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">示例1中共有3枚硬币，所以任意取2个放天平上称量一下。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n因为假币的重量比较轻。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n如果天平不平衡，则较轻的那枚就是假币。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n如果天平平衡，则说明这两枚硬币都是真的，而剩下那枚是假币。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1161,'做幻方','<p><font size=\"3\" face=\"Times New Roman\">Apple最近迷上了做幻方，Apple还是个中高手，只要你说个奇数N就能把N*N的幻方做出来。其实你可以比他做得更好的。Apple总是画得很乱，而你可以利用程序排得很整齐^_^ 幻方的要求：每一行，每一列，还有两条斜线上数字的和都相等. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行一个奇数N(0&lt; N &lt; 30),输入0结束  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入一个奇数，输出一个幻方，顺序参照样板输出；同一列的数右对齐，数与数用一个空格分开；输出完以后加一个回车。</font></p>','5\n1\n0','11 18 25  2  9\n10 12 19 21  3\n 4  6 13 20 22\n23  5  7 14 16\n17 24  1  8 15\n\n1','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1162,'内码对称','<p><font size=\"3\" face=\"Times New Roman\">C++中int型整数内码是一个32位的01序列，该01序列有些是对称的，有些是不对称的。对于给定的一个整数，在一些场合，需要判断其整数内码的对称性。这个事情要做好还非你不行呢。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入中含有一些整数n（0&le;n〈2^32）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">统计其中一共有多少个其内码对称的整数，输出之。</font></p>','0\n1\n2147483649\n2\n3','2','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1163,'剔除相关数','<p><font face=\"Times New Roman\">一个数与另一个数如果含有相同数字和个数的字符，则称两数相关。现有一堆乱七八糟的整数，里面可能充满了彼此相关的数，请你用一下手段，自动地将其剔除。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每组数据前有一个N(&lt;1000)，表示跟随的整数P(0</font>\n<p></p>\n</p>','<p>按从小到大的顺序输出非相关数，若没有非相关数，则输出None</p>','8\n213 667 3 213 43 34 677 2\n3\n322 232 232\n0\n\n','2 3 667 677\nNone\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1164,'化学品问题','<p><font size=\"3\" face=\"Times New Roman\">一个实验室有N个放化学品的试管，排列在一条直线上。如果连续M个试管中放入药品，则会发生爆炸，于是，在某些试管中可能不放药品。 <br />\n任务：对于给定的N和M，求不发生爆炸的放置药品的方案总数 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行是一个正整数L，代表输入数据的组数 <br />\n接下来L行，每行有两个正整数N，M( 1＜N＜32，2&le;M&le;5) <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出L行，每行只有一个正整数S，表示对应输入数据的方案总数。</font></p>','2\n4 3\n3 2\n\n','13\n5\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1165,'十->二进制转换','<p><font face=\"Times New Roman\">将十进制整数转换成二进制数</font></p>','<p><font face=\"Times New Roman\">输入数据中含有不多于50个整数n（-2^16＜n＜2^16）。</font></p>','<p><font face=\"Times New Roman\">对于每个n，以11位的宽度右对齐输出n值，然后输出&ldquo;--&gt;&rdquo;，再然后输出二进制数。每个整数n的输出，独立占一行。</font></p>','2\n0\n-12\n1\n','2―->10\n0-->0\n-12-->-1100\n1-->1\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1166,'半数集问题','<p><font face=\"Times New Roman\">问题描述： <br />\n给定一个自然数n，由n开始可以依次产生半数集set(n)中的数如下。 <br />\n(1) n&isin;set(n)； <br />\n(2) 在n的左边加上一个自然数，但该自然数不能超过最近添加的数的一半； <br />\n(3) 按此规则进行处理，直到不能再添加自然数为止。 <br />\n例如，set(6)={6,16,26,126,36,136}。半数集set(6)中有6 个元素。 <br />\n注意半数集是多重集。 <br />\n<br />\n编程任务： <br />\n对于给定的自然数n，编程计算半数集set(n)中的元素个数。 </font></p>','<p><font face=\"Times New Roman\">输入数据m行，每行给出一个整数n。(0〈n〈1000)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出只有m行，每行给出半数集set(n)中的元素个数。</font></p>','6\n99\n','6\n9042\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1167,'去括号','<p><font size=\"3\" face=\"Times New Roman\">当老师不容易，尤其是当小学的老师更难:现在的小朋友做作业喜欢滥用括号。 <br />\n虽然不影响计算结果，但不够美观，容易出错，而且可读性差。但又不能一棒子打死，也许他们就是将来的&ldquo;陈景润&rdquo;呢！ <br />\n为了减轻老师的工作，不至于他们工作到深夜，我们来写个程序把小朋友的作业做一下简单地处理，去掉那些多余的括号。 <br />\n为了简化问题，所有式子里只存在小括号，运算符号包括+(加)、-(减)、*(乘)、/(除)、^(幂)。 <br />\n注意：去掉多余的小括号不是指运算结果一样就可以。 <br />\n比如：(1+2)^1 = 3。虽然把括号去掉1+2^1也等于3，但我们说这个括号不能去。 <br />\n但如：1+(2+3) = 1+2+3只要是允许的，因为加法是满足交换律和结合律的。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入包括多组测试数据。 <br />\n每组测试数据为一行算术表达式，只包括数字和运算符号，长度小于16。 <br />\n输入以#行结束，该行不做处理。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对应每组数据输入都有一行输出。 <br />\n输出去掉多余的括号后的表达式。</font></p>','((((1))))+((((1))))\n1\n1+1+1+1\n((1+2)+3)*4\n(1+(2+3))*4\n((1*2)*3)*4\n(1*(2*3))*4\n((1*2)*(3*4))\n1*((2*3)*4)\n1*(2*(3*4))\n((1*2)*4)*3\n(1*(2*4))*3\n((1*2)*(4*3))\n1*((2*4)*3)\n1*(2*(4*3))\n((1+3)+2)*4\n(1+(3+2))*4\n((1+3)*(2+4))\n((1*3)*2)*4\n(1*(3*2))*4\n((1*3)*(2*4))\n1*((3*2)*4)\n1*(3*(2*4))\n((1+3)*(4+2))\n((1*3)*4)*2\n(1*(3*4))*2\n((1*3)*(4*2))\n1*((3*4)*2)\n1*(3*(4*2))\n((1*4)*3)*2\n(1*(4*3))*2\n((1*4)*(3*2))\n1*((4*3)*2)\n1*(4*(3*2))\n((1*4)*2)*3\n(1*(4*2))*3\n((1*4)*(2*3))\n1*((4*2)*3)\n1*(4*(2*3))\n((2+1)+3)*4\n(2+(1+3))*4\n((2*1)*3)*4\n(2*(1*3))*4\n((2*1)*(3*4))\n2*((1*3)*4)\n2*(1*(3*4))\n((2/1)*3)*4\n((2/1)*(3*4))\n(2/(1/3))*4\n2/(1/(3*4))\n2/((1/3)/4)\n((2^1)*3)*4\n((2^1)*(3*4))\n((2*1)*4)*3\n(2*(1*4))*3\n((2*1)*(4*3))\n2*((1*4)*3)\n2*(1*(4*3))\n((2/1)*4)*3\n((2/1)*(4*3))\n(2/(1/4))*3\n2/(1/(4*3))\n2/((1/4)/3)\n((2^1)*4)*3\n((2^1)*(4*3))\n((2+3)+1)*4\n(2+(3+1))*4\n((2*3)*1)*4\n(2*(3*1))*4\n((2*3)*(1*4))\n2*((3*1)*4)\n2*(3*(1*4))\n((2*3)/1)*4\n(2*(3/1))*4\n2*((3/1)*4)\n((2*3)/(1/4))\n2*(3/(1/4))\n((2*3)^1)*4\n(2*(3^1))*4\n2*((3^1)*4)\n((2*3)*4)*1\n(2*(3*4))*1\n((2*3)*(4*1))\n2*((3*4)*1)\n2*(3*(4*1))\n((2*3)*4)/1\n(2*(3*4))/1\n((2*3)*(4/1))\n2*((3*4)/1)\n2*(3*(4/1))\n((2*3)*4)^1\n(2*(3*4))^1\n((2*3)*(4^1))\n2*((3*4)^1)\n2*(3*(4^1))\n((2^3)*(4-1))\n((2+4)*(3+1))\n((2*4)*3)*1\n(2*(4*3))*1\n((2*4)*(3*1))\n2*((4*3)*1)\n2*(4*(3*1))\n((2*4)*3)/1\n(2*(4*3))/1\n((2*4)*(3/1))\n2*((4*3)/1)\n2*(4*(3/1))\n((2*4)*3)^1\n(2*(4*3))^1\n((2*4)*(3^1))\n2*((4*3)^1)\n2*(4*(3^1))\n((2+4)*(1+3))\n((2*4)*1)*3\n(2*(4*1))*3\n((2*4)*(1*3))\n2*((4*1)*3)\n2*(4*(1*3))\n((2*4)/1)*3\n(2*(4/1))*3\n2*((4/1)*3)\n((2*4)/(1/3))\n2*(4/(1/3))\n((2*4)^1)*3\n(2*(4^1))*3\n2*((4^1)*3)\n(2^(4-1))*3\n((3+2)+1)*4\n(3+(2+1))*4\n((3*2)*1)*4\n(3*(2*1))*4\n((3*2)*(1*4))\n3*((2*1)*4)\n3*(2*(1*4))\n((3*2)/1)*4\n(3*(2/1))*4\n3*((2/1)*4)\n((3*2)/(1/4))\n3*(2/(1/4))\n((3*2)^1)*4\n(3*(2^1))*4\n3*((2^1)*4)\n3/(2^(1-4))\n((3*2)*4)*1\n(3*(2*4))*1\n((3*2)*(4*1))\n3*((2*4)*1)\n3*(2*(4*1))\n((3*2)*4)/1\n(3*(2*4))/1\n((3*2)*(4/1))\n3*((2*4)/1)\n3*(2*(4/1))\n((3*2)*4)^1\n(3*(2*4))^1\n((3*2)*(4^1))\n3*((2*4)^1)\n3*(2*(4^1))\n3*(2^(4-1))\n((3+1)+2)*4\n(3+(1+2))*4\n((3+1)*(2+4))\n((3*1)*2)*4\n(3*(1*2))*4\n((3*1)*(2*4))\n3*((1*2)*4)\n3*(1*(2*4))\n((3/1)*2)*4\n((3/1)*(2*4))\n(3/(1/2))*4\n3/(1/(2*4))\n3/((1/2)/4)\n((3^1)*2)*4\n((3^1)*(2*4))\n((3+1)*(4+2))\n((3*1)*4)*2\n(3*(1*4))*2\n((3*1)*(4*2))\n3*((1*4)*2)\n3*(1*(4*2))\n((3/1)*4)*2\n((3/1)*(4*2))\n(3/(1/4))*2\n3/(1/(4*2))\n3/((1/4)/2)\n((3^1)*4)*2\n((3^1)*(4*2))\n((3*4)*1)*2\n(3*(4*1))*2\n((3*4)*(1*2))\n3*((4*1)*2)\n3*(4*(1*2))\n((3*4)/1)*2\n(3*(4/1))*2\n3*((4/1)*2)\n((3*4)/(1/2))\n3*(4/(1/2))\n((3*4)^1)*2\n(3*(4^1))*2\n3*((4^1)*2)\n((3*4)*2)*1\n(3*(4*2))*1\n((3*4)*(2*1))\n3*((4*2)*1)\n3*(4*(2*1))\n((3*4)*2)/1\n(3*(4*2))/1\n((3*4)*(2/1))\n3*((4*2)/1)\n3*(4*(2/1))\n((3*4)*2)^1\n(3*(4*2))^1\n((3*4)*(2^1))\n3*((4*2)^1)\n3*(4*(2^1))\n((4+2)*(3+1))\n4*((2+3)+1)\n4*(2+(3+1))\n((4*2)*3)*1\n(4*(2*3))*1\n((4*2)*(3*1))\n4*((2*3)*1)\n4*(2*(3*1))\n((4*2)*3)/1\n(4*(2*3))/1\n((4*2)*(3/1))\n4*((2*3)/1)\n4*(2*(3/1))\n((4*2)*3)^1\n(4*(2*3))^1\n((4*2)*(3^1))\n4*((2*3)^1)\n4*(2*(3^1))\n((4+2)*(1+3))\n4*((2+1)+3)\n4*(2+(1+3))\n((4*2)*1)*3\n(4*(2*1))*3\n((4*2)*(1*3))\n4*((2*1)*3)\n4*(2*(1*3))\n((4*2)/1)*3\n(4*(2/1))*3\n4*((2/1)*3)\n((4*2)/(1/3))\n4*(2/(1/3))\n((4*2)^1)*3\n(4*(2^1))*3\n4*((2^1)*3)\n4*((3+2)+1)\n4*(3+(2+1))\n((4*3)*2)*1\n(4*(3*2))*1\n((4*3)*(2*1))\n4*((3*2)*1)\n4*(3*(2*1))\n((4*3)*2)/1\n(4*(3*2))/1\n((4*3)*(2/1))\n4*((3*2)/1)\n4*(3*(2/1))\n((4*3)*2)^1\n(4*(3*2))^1\n((4*3)*(2^1))\n4*((3*2)^1)\n4*(3*(2^1))\n4*((3+1)+2)\n4*(3+(1+2))\n((4*3)*1)*2\n(4*(3*1))*2\n((4*3)*(1*2))\n4*((3*1)*2)\n4*(3*(1*2))\n((4*3)/1)*2\n(4*(3/1))*2\n4*((3/1)*2)\n((4*3)/(1/2))\n4*(3/(1/2))\n((4*3)^1)*2\n(4*(3^1))*2\n4*((3^1)*2)\n4*((1+3)+2)\n4*(1+(3+2))\n((4*1)*3)*2\n(4*(1*3))*2\n((4*1)*(3*2))\n4*((1*3)*2)\n4*(1*(3*2))\n((4/1)*3)*2\n((4/1)*(3*2))\n(4/(1/3))*2\n4/(1/(3*2))\n4/((1/3)/2)\n((4^1)*3)*2\n((4^1)*(3*2))\n((4-1)*(2^3))\n4*((1+2)+3)\n4*(1+(2+3))\n((4*1)*2)*3\n(4*(1*2))*3\n((4*1)*(2*3))\n4*((1*2)*3)\n4*(1*(2*3))\n((4/1)*2)*3\n((4/1)*(2*3))\n(4/(1/2))*3\n4/(1/(2*3))\n4/((1/2)/3)\n((4^1)*2)*3\n((4^1)*(2*3))\n#\n','1+1\n1\n1+1+1+1\n(1+2+3)*4\n(1+2+3)*4\n1*2*3*4\n1*2*3*4\n1*2*3*4\n1*2*3*4\n1*2*3*4\n1*2*4*3\n1*2*4*3\n1*2*4*3\n1*2*4*3\n1*2*4*3\n(1+3+2)*4\n(1+3+2)*4\n(1+3)*(2+4)\n1*3*2*4\n1*3*2*4\n1*3*2*4\n1*3*2*4\n1*3*2*4\n(1+3)*(4+2)\n1*3*4*2\n1*3*4*2\n1*3*4*2\n1*3*4*2\n1*3*4*2\n1*4*3*2\n1*4*3*2\n1*4*3*2\n1*4*3*2\n1*4*3*2\n1*4*2*3\n1*4*2*3\n1*4*2*3\n1*4*2*3\n1*4*2*3\n(2+1+3)*4\n(2+1+3)*4\n2*1*3*4\n2*1*3*4\n2*1*3*4\n2*1*3*4\n2*1*3*4\n2/1*3*4\n2/1*3*4\n2/(1/3)*4\n2/(1/(3*4))\n2/(1/3/4)\n2^1*3*4\n2^1*3*4\n2*1*4*3\n2*1*4*3\n2*1*4*3\n2*1*4*3\n2*1*4*3\n2/1*4*3\n2/1*4*3\n2/(1/4)*3\n2/(1/(4*3))\n2/(1/4/3)\n2^1*4*3\n2^1*4*3\n(2+3+1)*4\n(2+3+1)*4\n2*3*1*4\n2*3*1*4\n2*3*1*4\n2*3*1*4\n2*3*1*4\n2*3/1*4\n2*3/1*4\n2*3/1*4\n2*3/(1/4)\n2*3/(1/4)\n(2*3)^1*4\n2*3^1*4\n2*3^1*4\n2*3*4*1\n2*3*4*1\n2*3*4*1\n2*3*4*1\n2*3*4*1\n2*3*4/1\n2*3*4/1\n2*3*4/1\n2*3*4/1\n2*3*4/1\n(2*3*4)^1\n(2*3*4)^1\n2*3*4^1\n2*(3*4)^1\n2*3*4^1\n2^3*(4-1)\n(2+4)*(3+1)\n2*4*3*1\n2*4*3*1\n2*4*3*1\n2*4*3*1\n2*4*3*1\n2*4*3/1\n2*4*3/1\n2*4*3/1\n2*4*3/1\n2*4*3/1\n(2*4*3)^1\n(2*4*3)^1\n2*4*3^1\n2*(4*3)^1\n2*4*3^1\n(2+4)*(1+3)\n2*4*1*3\n2*4*1*3\n2*4*1*3\n2*4*1*3\n2*4*1*3\n2*4/1*3\n2*4/1*3\n2*4/1*3\n2*4/(1/3)\n2*4/(1/3)\n(2*4)^1*3\n2*4^1*3\n2*4^1*3\n2^(4-1)*3\n(3+2+1)*4\n(3+2+1)*4\n3*2*1*4\n3*2*1*4\n3*2*1*4\n3*2*1*4\n3*2*1*4\n3*2/1*4\n3*2/1*4\n3*2/1*4\n3*2/(1/4)\n3*2/(1/4)\n(3*2)^1*4\n3*2^1*4\n3*2^1*4\n3/2^(1-4)\n3*2*4*1\n3*2*4*1\n3*2*4*1\n3*2*4*1\n3*2*4*1\n3*2*4/1\n3*2*4/1\n3*2*4/1\n3*2*4/1\n3*2*4/1\n(3*2*4)^1\n(3*2*4)^1\n3*2*4^1\n3*(2*4)^1\n3*2*4^1\n3*2^(4-1)\n(3+1+2)*4\n(3+1+2)*4\n(3+1)*(2+4)\n3*1*2*4\n3*1*2*4\n3*1*2*4\n3*1*2*4\n3*1*2*4\n3/1*2*4\n3/1*2*4\n3/(1/2)*4\n3/(1/(2*4))\n3/(1/2/4)\n3^1*2*4\n3^1*2*4\n(3+1)*(4+2)\n3*1*4*2\n3*1*4*2\n3*1*4*2\n3*1*4*2\n3*1*4*2\n3/1*4*2\n3/1*4*2\n3/(1/4)*2\n3/(1/(4*2))\n3/(1/4/2)\n3^1*4*2\n3^1*4*2\n3*4*1*2\n3*4*1*2\n3*4*1*2\n3*4*1*2\n3*4*1*2\n3*4/1*2\n3*4/1*2\n3*4/1*2\n3*4/(1/2)\n3*4/(1/2)\n(3*4)^1*2\n3*4^1*2\n3*4^1*2\n3*4*2*1\n3*4*2*1\n3*4*2*1\n3*4*2*1\n3*4*2*1\n3*4*2/1\n3*4*2/1\n3*4*2/1\n3*4*2/1\n3*4*2/1\n(3*4*2)^1\n(3*4*2)^1\n3*4*2^1\n3*(4*2)^1\n3*4*2^1\n(4+2)*(3+1)\n4*(2+3+1)\n4*(2+3+1)\n4*2*3*1\n4*2*3*1\n4*2*3*1\n4*2*3*1\n4*2*3*1\n4*2*3/1\n4*2*3/1\n4*2*3/1\n4*2*3/1\n4*2*3/1\n(4*2*3)^1\n(4*2*3)^1\n4*2*3^1\n4*(2*3)^1\n4*2*3^1\n(4+2)*(1+3)\n4*(2+1+3)\n4*(2+1+3)\n4*2*1*3\n4*2*1*3\n4*2*1*3\n4*2*1*3\n4*2*1*3\n4*2/1*3\n4*2/1*3\n4*2/1*3\n4*2/(1/3)\n4*2/(1/3)\n(4*2)^1*3\n4*2^1*3\n4*2^1*3\n4*(3+2+1)\n4*(3+2+1)\n4*3*2*1\n4*3*2*1\n4*3*2*1\n4*3*2*1\n4*3*2*1\n4*3*2/1\n4*3*2/1\n4*3*2/1\n4*3*2/1\n4*3*2/1\n(4*3*2)^1\n(4*3*2)^1\n4*3*2^1\n4*(3*2)^1\n4*3*2^1\n4*(3+1+2)\n4*(3+1+2)\n4*3*1*2\n4*3*1*2\n4*3*1*2\n4*3*1*2\n4*3*1*2\n4*3/1*2\n4*3/1*2\n4*3/1*2\n4*3/(1/2)\n4*3/(1/2)\n(4*3)^1*2\n4*3^1*2\n4*3^1*2\n4*(1+3+2)\n4*(1+3+2)\n4*1*3*2\n4*1*3*2\n4*1*3*2\n4*1*3*2\n4*1*3*2\n4/1*3*2\n4/1*3*2\n4/(1/3)*2\n4/(1/(3*2))\n4/(1/3/2)\n4^1*3*2\n4^1*3*2\n(4-1)*2^3\n4*(1+2+3)\n4*(1+2+3)\n4*1*2*3\n4*1*2*3\n4*1*2*3\n4*1*2*3\n4*1*2*3\n4/1*2*3\n4/1*2*3\n4/(1/2)*3\n4/(1/(2*3))\n4/(1/2/3)\n4^1*2*3\n4^1*2*3\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1168,'去掉双斜杠注释','<p>\n<table border=\"0\" width=\"100%\" background=\"images/table_back.jpg\">\n    <tbody>\n        <tr>\n            <td>\n            <p><font size=\"3\" face=\"Times New Roman\">将C程序代码中的双斜杠注释去掉。</font></p>\n            </td>\n        </tr>\n    </tbody>\n</table>\n</p>','<p><font face=\"Times New Roman\">输入数据中含有一些符合C++语法的代码行。需要说明的是，为了方便编程，规定双斜杠注释内容不含有双引号,源程序中没空行。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出不含有双斜杠注释的C++代码，除了注释代码之外，原语句行格式不变。 </font></p>','//======================\n// simplest program\n//======================\n#include\nusing namespace std;\n//----------------------\nint main(){\n  cout<<”hello world!\\n”;\n}//---------------------\n\n','#include\nusing namespace std;\nint main(){\n  cout<<”hello world!\\n”;\n}\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1169,'去掉空格','<p><font size=\"3\" face=\"Times New Roman\">读入一些字符串，将其中的空格去掉。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入为多行，每行为一个字符串，字符串只由字母、数字和空格组成，长度不超过80。输入以&ldquo;End of file&rdquo;结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每行输入，输出转换后的字符串。</font></p>','\nHello World\n1 2 3\nNice to meet you\nabc\n','HelloWorld\n123\nNicetomeetyou\nabc\n\n','0','<p><font face=\"Times New Roman\">用scanf是不能读入一行有空格的字符串的，用gets吧。 用&ldquo;gets(str) != NULL&rdquo;可以判断输入是否结束，如果此条件为假（即gets(str) == NULL），则表示输入结束（对于本题）。</font></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1170,'发工资咯','<p><font face=\"Times New Roman\">作为吉大的老师，最盼望的日子就是每月的9号了，因为这一天是发工资的日子，养家糊口就靠它了，呵呵 <br />\n但是对于学校财务处的工作人员来说，这一天则是很忙碌的一天，财务处的小胡老师最近就在考虑一个问题：如果每个老师的工资额都知道，最少需要准备多少张人民币，才能在给每位老师发工资的时候都不用老师找零呢？ <br />\n这里假设老师的工资都是正整数，单位元，人民币一共有100元、50元、10元、5元、2元和1元六种。</font></p>','<p><font face=\"Times New Roman\">输入数据包含多个测试实例，每个测试实例的第一行是一个整数n（n&lt;100），表示老师的人数，然后是n个老师的工资。 <br />\nn=0表示输入的结束，不做处理。</font></p>','<p><font face=\"Times New Roman\">对于每个测试实例输出一个整数x,表示至少需要准备的人民币张数。每个输出占一行。</font></p>','3 1 2 3\n0','4','0','','吉首大学软件学院','2017-04-30 15:05:04',1000,65536,'N',0,0,0),(1171,'取石子游戏','<p><font size=\"3\" face=\"Times New Roman\">有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。 </font></p>','2	1\n','0\n','0','','软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1172,'哥德巴赫曾猜测','<p><font face=\"Times New Roman\" size=\"3\">德国数学家哥德巴赫曾猜测：任何大于6的偶数都可以分解成两个素数（素数对）的和。但有些偶数可以分解成多种素数对的和，如：  10=3+7，10=5+5，即10可以分解成两种不同的素数对</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入任意的&gt;6的正偶数(&lt;32767)</font></p>','<p><font face=\"Times New Roman\" size=\"3\">试求给出的偶数可以分解成多少种不同的素数对（注：  A+B与B+A认为是相同素数对）</font></p>','1234\n','25\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1173,'回文串','<p><font face=\"Times New Roman\" size=\"3\">回文串是从左到右或者从右到左读起来都一样的字符串，试编程判别一个字符串是否为回文串。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入一个字符串。串长度&lt;255.</font></p>','<p><font face=\"Times New Roman\" size=\"3\">判别输入的字符串是否为回文串，是输出&quot;Y&quot;,否则输出&quot;N&quot;。</font></p>','abcba\n','Y\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1174,'回文数(一)','<p>若一个数（首位不为0）从左到右读与从右到左读都是一样，这个数就叫做回文数，例如12521就是一个回文数。 <br />\n给定一个正整数，把它的每一个位上的数字倒过来排列组成一个新数，然后与原数相加，如果是回文数则停止，如果不是，则重复这个操作，直到和为回文数为止。给定的数本身不为回文数。 <br />\n例如：87则有： <br />\nSTEP1: 87+78=165 <br />\nSTEP2: 165+561=726 <br />\nSTEP3: 726+627=1353 <br />\nSTEP4: 1353+3531=4884 <br />\n编写一个程序，输入M（12&lt;=M&lt;=100）,输出最少经过几步可以得到回文数。如果在8步以内（含8步）不可能得到回文数，则输出0。 <br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">第1行一个正整数L,代表测试数据的组数。 <br />\n接下来L行每行一个整数M（12&lt;=M&lt;=100），M本身不为回文数； <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出L行，第i行对应输入数据的第i+1行，输出最少需要的步数；如果步数大于8，则输出0。</font></p>','3\n12\n87\n89\n\n','1\n4\n0\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1175,'多输入输出练习1','<p><font size=\"3\" face=\"Times New Roman\">给定很多行数据,要求输出每一行的最大值.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">程序有多行输入,每一行以0结束. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">有多行输出,对应输入的行数.</font></p>','23 -456 33 78 0\n43 23 987 66 -137 324 0\n544 27 7 9 102 234 -44 -732 723 0','78\n987\n723','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1176,'多输入输出练习2','<p><font size=\"3\" face=\"Times New Roman\">已之一个圆的半径,求面积.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入有多行,第一行是一个整数n(对应总行数),以下每一行只有一个浮点数(对应一个圆的半径).</font></p>','<font size=\"3\" face=\"Times New Roman\"> 输出有多行,每一行是跟输入对应面积.  <br />\n输出保留6位小数</font>','4\n3.14\n2.13\n6\n5.3','30.973933\n14.252671\n113.094000\n88.244735','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1177,'大小写转换','<p><font size=\"3\" face=\"Times New Roman\">读入一些字符串，将其中的小写字母转成大写字母（其他字符不变）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入为多行，每行为一个字符串，字符串只由字母和数字组成，长度不超过80。输入以&ldquo;End of file&rdquo;结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每行输入，输出转换后的字符串。</font></p>','Hello\nICPC2004\n12345abcde','HELLO\nICPC2004\n12345ABCDE','0','','吉首大学软件学院','2017-04-30 15:05:04',1000,65536,'N',0,0,0),(1178,'字符串的修改','<p>设A和B是两个字符串。我们要用最少的字符操作次数，将字符串A转换为字符串B。这里所说的字符操作共有三种： <br />\n<br />\n1. 删除一个字符； <br />\n2. 插入一个字符； <br />\n3. 将一个字符改为另一个字符。 <br />\n对任给的两个字符串A和B，计算出将字符串A变换为字符串B所用的最少字符操作次数。</p>','<p><font size=\"3\" face=\"Times New Roman\">第一行为字符串A；第二行为字符串B；字符串A和B的长度均小于200。 </font></p>','<p>只有一个正整数，为最少字符操作次数。</p>','sfdxbqw\ngfdgw\n\n','4\n','0','','吉首大学软件学院\n吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1179,'字符串问题','<p><font face=\"Times New Roman\" size=\"3\">字符串处理在计算机中有很多复杂的操作，但是这些复杂的操作都是由基本的字符串操作复合而成，要求编写一字符串颠倒的程序，把字符串中的字符颠倒位置。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入一字符串（&lt;255）</font></p>','<p><font face=\"Times New Roman\" size=\"3\">按位进行颠倒的结果。</font></p>','COMPUTER\n','RETUPMOC','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1180,'字符排列问题','<p><font size=\"3\" face=\"Times New Roman\">有n个字母，列出由该字母组成的字符串的全排列（相同的排列只计一次）。</font></p>','<p><font face=\"Times New Roman\">第一行输入是字母个数n，1&lt;=n&lt;=20。接下来一行输入的是待排列的n个字母。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">计算出的n 个字母的所有不同排列总数</font></p>','4\naacc\n\n','6','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1181,'孤独的骑士','<p><font face=\"Times New Roman\" size=\"3\">任务很简单. 确定国际象棋棋盘上处于骑士攻击之下的格子个数. 棋盘上没有其它棋子. 骑士的走法: 横(纵)向走两个格, 再纵(横)向走一个格(类似于中国象棋中的马).</font></p>','<p><font face=\"Times New Roman\" size=\"3\">第一行为测试次数N, 1 &le; N &le; 100. <br />\n后面N行每行包含一个坐标表示骑士的位置. <br />\n字母表示横向位置, 数字表示纵向位置. <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输出N行. 每行一个整数, 表示骑士可攻击的格子个数.</font></p>','3\na1\nd4\ng6\n\n','2\n8\n6\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1182,'密码截获','<p><font size=\"3\" face=\"Times New Roman\">Catcher是MCA国的情报员，他工作时发现敌国会用一些对称的密码 进行通信，比如像这些ABBA，ABA，A，123321，但是他们有时会在开始或结束时加入一些无关的字符以防止别国破解。比如进行下列变化 ABBA-&gt;12ABBA,ABA-&gt;ABAKK,123321-&gt;51233214　。因为截获的串太长了，而且存在多种可能的情况 （abaaab可看作是aba,或baaab的加密形式），Cathcer的工作量实在是太大了，他只能向电脑高手求助，你能帮Catcher找出最长的 有效密码串吗？ </font></p>','<p><font size=\"3\" face=\"Times New Roman\">测试数据有若干行字符串，包括字母，数字，符号。（字母区分大小写） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">与输入相对应每一行输出一个整数，代表最长有效密码串的长度。</font></p>','ABBA\n12ABBA\nA\nABAKK\n51233214\nabaaab','4\n4\n1\n3\n6\n5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1183,'小明A+B','<p><font size=\"3\" face=\"Times New Roman\">小明今年3岁了, 现在他已经能够认识100以内的非负整数,  并且能够进行100以内的非负整数的加法计算. 对于大于等于100的整数, 小明仅保留该数的最后两位进行计算, 如果计算结果大于等于100,  那么小明也仅保留计算结果的最后两位. 例如, 对于小明来说: 1) 1234和34是相等的 2) 35+80=15 给定非负整数A和B,  你的任务是代表小明计算出A+B的值.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据的第一行为一个正整数T, 表示测试数据的组数. 然后是T组测试数据. 每组测试数据包含两个非负整数A和B(A和B均在int型可表示的范围内). </font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组测试数据, 输出小明A+B的结果.</font></p>','2\n35 80\n15 1152','15\n67','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1184,'平方和与立方和','<p><font size=\"3\" face=\"Times New Roman\">给定一段连续的整数，求出他们中所有偶数的平方和以及所有奇数的立方和。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多组测试实例，每组测试实例包含一行，由两个整数m和n组成。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行，应包括两个整数x和y，分别表示该段连续的整数中所有偶数的平方和以及所有奇数的立方和。 <br />\n你可以认为32位整数足以保存结果。</font></p>','1 3\n2 5\n\n','4 28\n20 152\n\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1185,'年会','<p><font size=\"3\" face=\"Times New Roman\">背景  <br />\n某大学校长准备开一次年会. 该校的员工具有等级结构, 即师生关系构成一棵树, 以校长为树根. 员工号是1到N之间的整数. 人事部门把所有员工按活跃度排序. 为了让年会使所有参加者都玩的高兴, 校长不想让任何一个员工和他/她的直接导师同时被邀请.  <br />\n<br />\n你的任务是列一张客人名单, 以使客人活跃度最大. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行是一个整数N. 1 &le; N &le; 6000.  <br />\n接着的N行包含相应员工的活跃度.活跃度是一个-128到127之间的整数.  <br />\n其后是师生关系表. 每行有如下形式:  <br />\nL K  <br />\n表示第K个员工是第L个的直接导师.  <br />\n输入以  <br />\n0 0  <br />\n结束.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出是客人最大总活跃度.</font></p>','7\n1\n1\n1\n1\n1\n1\n1\n1 3\n2 3\n6 4\n7 4\n4 5\n3 5\n0 0','5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1186,'幸运儿','<p><font size=\"3\" face=\"Times New Roman\">n 个人围成一圈, 并依次编号1～n，。从编号为1 的人开始，按顺时针方向每隔一人选出一个，剩下的人重新围成一圈，如此循环直到剩下两人，这剩下的两人就是幸运儿。如果你想成为最后两个幸运儿，请问开始时应该站在什么位置？（设3&lt;=n&lt;=50） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">有多个测试序列。每行是开始时的人数n </font></p>','<p>第1 行是选出顺序，第2 行是两名幸运儿的开始位置（按升序排列），位置编号之间用一个空格分开。</p>','12\n20\n45\n\n','2 4 6 8 10 12 3 7 11 5 \n1 9\n2 4 6 8 10 12 14 16 18 20 3 7 11 15 19 5 13 9 \n1 17\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 3 7 11 15 19 23 27 31 35 39 43 5 13 21 29 37 45 9 25 41 17 \n1 33 \n\n','0','','吉首大学软件学院\n吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1187,'开心的金明','<p><font size=\"3\" face=\"Times New Roman\">金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的 很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早金明就开始做预算， 但是他想买的东西太多了，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查 到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />\n<br />\n设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />\nv[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />\n<br />\n请你帮助金明设计一个满足要求的购物单。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行，为两个正整数，用一个空格隔开：  <br />\nN m  <br />\n（其中N（&lt;30000）表示总钱数，m（&lt;25）为希望购买物品的个数。）  <br />\n从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有2个非负整数  <br />\nv p  <br />\n（其中v表示该物品的价格(v&lt;=10000)，p表示该物品的重要度(1~5)）  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;100000000）。</font></p>','1000 5\n800 2\n400 5\n300 5\n400 3\n200 2','3900','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1188,'恺撒密码','<p><font face=\"Times New Roman\" size=\"3\">恺撒生活在充满危险和阴谋的时代. 恺撒面对的最困难的问题是生存. 为了生存, 他决定创造一种密码. 这种密码听起来难以置信, 如果不知 <br />\n<br />\n道方法, 没有人可以破解. <br />\n<br />\n你是恺撒军队的一个上尉. 你的工作是解密消息并将之提供给将军. 密码很简单. 对明文的每个字母右移5个位置以创建密文 (如字母\'A\', 密 <br />\n<br />\n文是\'F\'). <br />\n有如下对应: <br />\n<br />\n密文 <br />\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z <br />\n<br />\n明文 <br />\nV W X Y Z A B C D E F G H I J K L M N O P Q R S T U <br />\n<br />\n只有字母需要移位, 其它字符保持不变, 所有字母均是大写. <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入为至多100组数据. 每组数据有如下格式, 中间无空行. <br />\n<br />\n一组数据有3部分: <br />\n<br />\n起始行 - 单独一行: &quot;START&quot; <br />\n密文 - 单独一行, 包含1到200个字符, 组成恺撒的消息. <br />\n结束行 - 单独一行: &quot;END&quot; <br />\n<br />\n最后一组输入是单独一行: &quot;ENDOFINPUT&quot;. </font></p>','<p><font face=\"Times New Roman\">对每组数据有一行输出. 即恺撒的原始消息. </font></p>','START\nNS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\nEND\nSTART\nN BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ\nEND\nSTART\nIFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ\nEND\nENDOFINPUT\n\n','IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\nI WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME\nDANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1189,'愚蠢的摄影师','<p><font face=\"Times New Roman\" size=\"3\">背景 <br />\n&quot;如果两个人相差一秒出生, 其中一个是小孩, 那么另一个也是小孩. 由此可以推论, 所有人均是小孩.&quot; <br />\n<br />\n问题 <br />\n数计系是一个由N个人组成的大家庭, 分别为1, 2, 3, ..., N岁. <br />\n<br />\n有一次系主任想为全系拍张合照. 需要所有学生站成一排. <br />\n起先他想按他们的岁数从小到大安排, 但后来又觉得这样不自然. <br />\n于是他建议按如下方案站排: <br />\n1岁的在最左边. <br />\n每相邻两人不得相差超过2岁. <br />\n<br />\n这样学生的岁数看起来显得很平均(25岁和27岁的人差别很难看出). <br />\n存在多种方案满足此要求. <br />\n摄影师不想违反系主任的意愿, 就为每种可能的安排分别拍了一张照片. <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">整数N, 1&lt;=N&lt;=55.</font></p>','<p><font face=\"Times New Roman\" size=\"3\">所拍照片张数.</font></p>','4','4\n','0','<p><font face=\"Times New Roman\" size=\"3\">若N=4, 则有4种可能的安排: (1,2,3,4), (1,2,4,3), (1,3,2,4) and (1,3,4,2).</font></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1190,'成绩转换','<p><font face=\"Times New Roman\">输入一个百分制的成绩t，将其转换成对应的等级，具体转换规则如下： <br />\n90~100为A; <br />\n80~89为B; <br />\n70~79为C; <br />\n60~69为D; <br />\n0~59为E; </font><br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，由一个整数组成。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行。如果输入数据不在0~100范围内，请输出一行：&ldquo;Score is error!&rdquo;。</font></p>','56\n67\n100\n123\n\n','E\nD\nA\nScore is error!\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1191,'换位置','<p><font size=\"3\" face=\"Times New Roman\">M个人围成一圈，每分钟相邻的两个人可以交换位置（只能有一对交换）。求使M个人的顺序颠倒（即每个人左边相邻的人换到右边，右边相邻的人换到左边）所需的最少时间（分钟数）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行为测试数据的组数n，以后n行中每行为一个小于32767的正整数，表示M</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组测试数据，输出一个数，表示最少需要的分钟数。</font></p>','3\n4\n5\n6\n','2\n4\n6\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1192,'排列','<p><font size=\"3\" face=\"Times New Roman\">Ray又对数字的列产生了兴趣: 现有四张卡片，用这四张卡片能排列出很多不同的4位数，要求按从小到大的顺序输出这些4位数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行是一个整数N，表示数据的组数。每组数据占一行，代表四张卡片上的数字（保证四个数字都不同，且0&lt;数字&lt;10）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对每组卡片按从小到大的顺序输出所有能由这四张卡片组成的4位数，千位数字相同的在同一行，同一行中每个四位数间用空格分隔，每组输出数据间空一行，最后一组数据后面没有空行。</font></p>','2\n1 2 3 4\n1 2 3 5','1234 1243 1324 1342 1423 1432\n2134 2143 2314 2341 2413 2431\n3124 3142 3214 3241 3412 3421\n4123 4132 4213 4231 4312 4321\n\n1235 1253 1325 1352 1523 1532\n2135 2153 2315 2351 2513 2531\n3125 3152 3215 3251 3512 3521\n5123 5132 5213 5231 5312 5321','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1193,'数列','<p><font size=\"3\" face=\"Times New Roman\">给定一个正整数k(3&le;k&le;15),把所有k的方幂及所有有限个互不相等的k的方幂之和构成一个递增的序列，例如，当k=3时，这个序列是：  <br />\n1，3，4，9，10，12，13，&hellip;  <br />\n（该序列实际上就是：3^0，3^1，3^0+3^1，3^2，3^0+3^2，3^1+3^2，3^0+3^1+3^2，&hellip;）  <br />\n请你求出这个序列的第N项的值（用10进制数表示）。  <br />\n例如，对于k=3，N=100，正确答案应该是981。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有1行，为2个正整数，用一个空格隔开：  <br />\nk N  <br />\n（k、N的含义与上述的问题描述一致，且3&le;k&le;15，10&le;N&le;1000）。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">计算结果，是一个正整数（在所有的测试数据中，结果均不超过2.1*10^9）。（整数前不要有空格和其他符号）。</font></p>','3 100','981','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1194,'数列排序','<p><font size=\"3\" face=\"Times New Roman\">将一正整数序列{K1,K2,...,K9}重新排列成一个新的序列。新序列中，比K1小的数都在K1的前面(左面)，比K1大的数都在K1的后面(右面)。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入有多行,第一行为N表示行数,每行9个整数.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出N行,按要求进行排序的结果.</font></p>','2\n6 8 9 1 2 5 4 7 3\n3 5 8 9 1 2 6 4 7\n\n','3 4 5 2 1 6 8 9 7\n2 1 3 5 8 9 6 4 7\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1195,'数列有序','<p>有n(n&lt;=100)个整数，已经按照从小到大顺序排列好，现在另外给一个整数x，请将该数插入到序列中，并使新的序列仍然有序。</p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个测试实例，每组数据由两行组成，第一行是n和m，第二行是已经有序的n个数的数列。n和m同时为0标示输入数据的结束，本行不做处理。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，输出插入新的元素后的数列。</font></p>','3 3\n1 2 4\n0 0\n\n','1 2 3 4\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1196,'数列问题','<p><font face=\"Times New Roman\" size=\"3\">已知一个数列的前3个数为3，4，5，以后每个数为前3个数的和，编程序求此数列的第N项</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入N(N&lt;=35)</font></p>','<p><font face=\"Times New Roman\" size=\"3\">求出第N项的值</font></p>','28\n','25527448\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1197,'数字统计','<p><font face=\"Times New Roman\" size=\"3\">一本书的页码从自然数1 开始顺序编码直到自然数n。书的页码按照通常的习惯编排，  <br />\n每个页码都不含多余的前导数字0。例如，第6 页用数字6 表示，而不是06 或006 等。数  <br />\n字计数问题要求对给定书的总页码n，计算出书的全部页码中分别用到多少次数字0，1， <br />\n2，&hellip;，9。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">给出表示书的总页码的整数n（1&le;n&le;2^31-1）</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输出10行，在第k行输出页码中用到数字k-1 的次数，k=1，2，&hellip;，10。</font></p>','11\n','1\n4\n1\n1\n1\n1\n1\n1\n1\n1','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1198,'敲七','<p><font face=\"Times New Roman\" size=\"3\">输出7和7的倍数，还有包含7的数字例如（17，27，37...70，71，72，73...）</font></p>','<p><font face=\"Times New Roman\" size=\"3\">一个整数N。(N不大于30000) </font></p>','<p><font face=\"Times New Roman\" size=\"3\">统计出不大于N的与7有关的数字的个数。如20以内与7有关的数为7、14、17共3个。</font></p>','20\n','3\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1199,'整除的尾数','<p><font size=\"3\" face=\"Times New Roman\">一个整数，只知道前几位，不知道末二位，被另一个整数除尽了，那么该数的末二位该是什么呢</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有若干组，每组数据包含二个整数a，b（0＜a＜10000, 10＜b＜100），若遇到0 0则处理结束</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对应每组数据，将满足条件的所有尾数在一行内输出，格式见样本输出。同组数据的输出，其每个尾数之间空一格，行末没有空格。</font></p>','200 40\n1992 95\n0 0','00 40 80\n15\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1200,'文科生的悲哀','<p><font size=\"3\" face=\"Times New Roman\">化学不及格的Matrix67无奈选择了文科。他必须硬着头皮准备一次又一次的文科考试。  <br />\n在这一学期一共有n次文科考试，考试科目有4种，分别为政治、历史、地理和综合。每次考哪一科是不定的，因此在考试前Matrix67不知道应该 去复习哪一科的功课。他希望能预测出下一次可能考的科目。于是，他收集到了以往的文科考试的资料。从以往的考试中，他发现了这样几个规律：  <br />\n1.如果这次考的是政治，那么下一次一定会考历史；  <br />\n2.如果这次考的是综合，那么下一次一定会考地理；  <br />\n3.如果这次考的是历史，那么下一次要么考政治，要么考地理；  <br />\n4.如果这次考的是地理，那么下一次要么考历史，要么考综合。  <br />\nMatrix67已经知道，本学期的第一次考试科目为政治。他打算拟定一个可以应对所有可能情况的应考复习计划。因此，他想知道，整个学期有多少种可能的考试科目安排满足以上规律。你能帮他算出来吗？</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个正整数n，代表本学期总的考试次数。（输入数据保证n&lt;=10000） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个正整数，表示符合规律的科目安排方案的总数。  <br />\n考虑到这个结果可能会很大，因此你只需要输出它mod 7654321的值即可。</font></p>','5','5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1201,'方砖问题','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">用边长小于N的正方形方砖（注意，不要求所有的方砖大小相同，请看样例说明）不重叠地铺满N*N的正方形房间，最少要几块方砖。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">第一行是一个整数T,表示测试数据的组数,接下来的T 行，每一行是一个N(2&lt;=N&lt;=100)</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">对于每一组测试数据输出一行，为最少需要的块数。</span></p>','2 \n4 \n5','4 \n8','0','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">当N＝4时<span class=\"Apple-converted-space\">&nbsp;</span><br />\n最优的铺砖方法<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAABB<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAABB<span class=\"Apple-converted-space\">&nbsp;</span><br />\nCCDD<span class=\"Apple-converted-space\">&nbsp;</span><br />\nCCDD<span class=\"Apple-converted-space\">&nbsp;</span><br />\nA，B，C，D为四块方砖的代号。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n其他的铺砖方法，例如：<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAAAB<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAAAC<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAAAD<span class=\"Apple-converted-space\">&nbsp;</span><br />\nEFGH<span class=\"Apple-converted-space\">&nbsp;</span><br />\n需要的8块方砖，不是最少的。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1202,'日期排序','<p><font size=\"3\" face=\"Times New Roman\">有一些日期，日期格式为&ldquo;MM/DD/YYYY&rdquo;。编程将其按日期大小排列。</font></p>','','','15/12/1999\n10/21/2003\n10/22/2003\n02/12/2004\n11/30/2005\n12/31/2005\n','15/12/1999\n10/21/2003\n10/22/2003\n02/12/2004\n11/30/2005\n12/31/2005\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1203,'明明的随机数','<p><font face=\"Times New Roman\" size=\"3\">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N&le;100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">有2行，第1行为1个正整数，表示所生成的随机数的个数： <br />\nN <br />\n第2行有N个用空格隔开的正整数，为所产生的随机数。 <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">也是2行，第1行为1个正整数M，表示不相同的随机数的个数。第2行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</font></p>','10\n20 40 32 67 40 20 89 300 400 15\n\n','8\n15 20 32 40 67 89 300 400\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1204,'最多约数问题','<p><font face=\"Times New Roman\" size=\"3\">正整数x 的约数是能整除x 的正整数。正整数x  的约数个数记为div(x)。例如，1，2， <br />\n5，10 都是正整数10 的约数，且div(10)=4。设a 和b 是2 个正整数，a&le;b，找出a 和b  <br />\n之间约数个数最多的数x <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入2 个正整数a&le;b，编程计算a 和b  之间约数个数最多的数。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">程序运行结束时，找到a 和b  之间约数个数最多的数是x，将div(x)输出</font></p>','1 36\n','9\n','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1205,'最小公倍数','<p><font size=\"3\" face=\"Times New Roman\">两个正整数，计算这两个数的最小公倍数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据只有一行，包括两个不大于1000的正整数.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出数据也只有一行，给出这两个数的最小公倍数。</font></p>','10 14','70','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1206,'最小重量机器设计问题','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">设某一机器由n个部件组成，每一种部件都可以从m个不同的供应商处购得。设Wij 是<span class=\"Apple-converted-space\">&nbsp;</span><br />\n从供应商j处购得的部件i的重量，Cij 是相应的价格。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n试设计一个算法，给出总价格不超过c的最小重量机器设计。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n&prime;编程任务：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n对于给定的机器部件重量和机器部件价格，编程计算总价格不超过d的最小重量机器设<span class=\"Apple-converted-space\">&nbsp;</span><br />\n计。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">第一行有 3 个正整数 n ，m和 d。接下来的 2n 行，每<span class=\"Apple-converted-space\">&nbsp;</span><br />\n行m个数。前n行是c，后n行是w。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">将计算出的最小重量，以及每个部件的供应商输出</span></p>','3 3 4 \n1 2 3 \n3 2 1 \n2 2 2 \n1 2 3 \n3 2 1 \n2 2 2','4 \n1 3 1 ','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1207,'杨辉三角','<p><font size=\"3\" face=\"Times New Roman\">还记得中学时候学过的杨辉三角吗？具体的定义这里不再描述，你可以参考以下的图形： <br />\n1 <br />\n1 1 <br />\n1 2 1 <br />\n1 3 3 1 <br />\n1 4 6 4 1 <br />\n1 5 10 10 5 1 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个测试实例，每个测试实例的输入只包含一个正整数n（1＜=n＜=30），表示将要输出的杨辉三角的层数。</font></p>','<p>对应于每一个输入，请输出相应层数的杨辉三角，每一层的整数之间用一个空格隔开，每一个杨辉三角后面加一个空行。</p>','2 3\n','1\n1 1\n\n1\n1 1\n1 2 1\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1208,'查找最大元素','<p><font size=\"3\" face=\"Times New Roman\">对于输入的每个字符串，查找其中的最大字母，在该字母后面插入字符串&ldquo;(max)&rdquo;。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包括多个测试实例，每个实例由一行长度不超过100的字符串组成，字符串仅由大小写字母及数字构成</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例输出一行字符串，输出的结果是插入字符串&ldquo;(max)&rdquo;后的结果，如果存在多个最大的字母，就在每一个最大字母后面都插入&quot;(max)&quot;。</font></p>','abcdefgfedcba\nxxxxx\n','abcdefg(max)fedcba\nx(max)x(max)x(max)x(max)x(max)\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1209,'核电站问题','<p><font size=\"3\" face=\"Times New Roman\">一个核电站有N个放核物质的坑，坑排列在一条直线上。如果连续３个坑中放入核物质，则会发生爆炸，于是，在某些坑中可能不放核物质。现在，请你计算：对于给定的N，求不发生爆炸的放置核物质的方案总数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入文件只有多行，每行对应一个正整数N＜＝４０；</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出文件有多行，每行只有一个正整数，表示方案总数</font></p>','1\n2\n3\n4\n10','2\n4\n7\n13\n504','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1210,'检查一个数是否为质数','<p><font size=\"3\" face=\"Times New Roman\">输入一个正整数，检查该数是否为质数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入一个正整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出Y或者N</font></p>','34','N','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1211,'检查金币','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">ACM公司生产金币的设备出了问题，使得最近生产的10批金币的重量出现了波动：本来金币的标准重量是10克，但现在有的可能是11克，有的可能9克，也有可能是10克。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n现在只知道同一批金币的重量是相同的，你的任务是要把每批的单枚金币的重量找出来。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n你的设备有一个电子秤，但只允许称量一次！<span class=\"Apple-converted-space\">&nbsp;</span><br />\n你从第1批中取1枚金币，第2批取3枚，...第i批取3^(i&minus;1)枚...，第10批取3^9枚，总共29524枚。将这29524枚金币放在电子秤上，得到了总重量，就交给你的程序去！<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">有多个测试序列，每个测试序列一行，包含一个6位的正整数W(265716&le;W&le;324764)，表示29524枚金币的总重量</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">每个测试序列输出一行，包含10个用空格分开的正整数，分别表示10批金币的单枚重量，注意行尾没有空格。</span></p>','265716\n324764\n295240','9 9 9 9 9 9 9 9 9 9\n11 11 11 11 11 11 11 11 11 11\n10 10 10 10 10 10 10 10 10 10','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1212,'母牛生小牛','<p><font face=\"Times New Roman\" size=\"3\">设有一头小母牛，从出生第四年起每年生一头小母牛，按此规律，第N年时有几头母牛？</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入一个整数N。(1&le;N&le;50)</font></p>','<p><font face=\"Times New Roman\" size=\"3\">第N年时母牛的数量</font></p>','5\n','3\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1213,'求组合数','<p><font face=\"Times New Roman\">组合数的计算虽说简单但也不乏有些陷阱，这主要是因为语言中的数据类型在表示范围上是有限的。更何况还有中间结果溢出的现象，所以千万要小心。</font></p>','<p><font face=\"Times New Roman\">求组合数的数据都是成对（M与N）出现的，每对整数M和N满足0＜m, n&le;20，以EOF结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出该组合数。每个组合数换行。</font></p>','5 2\n18 13\n','10\n8568\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1214,'演讲大赛评分','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">最近&quot;老王&quot;很开心.他在大一的时候参加过数计学院的&ldquo;软件小组&rdquo;。告诉你个秘密，这个小组是个好地方，不但活动精彩而且有MM。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n这不，这个小组举办了一个叫做&ldquo;计算机演讲大赛&rdquo;的节目。这个节目有好多人参加，这不，成绩出来了，&quot;老王&quot;当是很勇敢，自告奋勇接下了算出大家的总得分的任务。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n当时有7个评委，每个评委都要给选手打分，现在要求去掉一个最高分和去掉一个最低分，再算出平均分。结果精确到小数点后两位。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">测试数据包括多个实例。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n每组数据包括7个实数，代表评委们对该选手的评分。紧接着是选手的名字，名字的长度不超过30个字符。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n输入直到文件结束。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">算出每位选手名字和最终得分，结果保留两位有效数字</span></p>','10 10 10 10 10 10 9 xiaoyuanwang\n0 0 0 0 0 0 0 beast','xiaoyuanwang 10.00\nbeast 0.00','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1215,'班级人数','<p><font size=\"3\" face=\"Times New Roman\">某班学生参加程序设计大赛，最后结果及格有超过P%但不足Q%的人。现在给你P和Q，你要算出该班最少有多少人。（数据弱了一点，所以好通过）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">两个实数P，Q。用空格隔开。每个数最多有两位小数。0.00＜＝p＜q＜＝99.99 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">神风堂最少的人数。</font></p>','13    14.1\n67.73 67.92','15\n28','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1216,'生日日数','<p><font size=\"3\" face=\"Times New Roman\">CCC老师的生日是YY年MM月DD日，他想知道自己出生后第一万天纪念日的日期（出生日算第0天）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入有多行，格式为YY MM DD 其中1949&lt;=YY&lt;=2006，日期绝对合法。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出有多行。即CCC老师生日第一万天以后的日期，格式为 &ldquo;Y-M-D&rdquo;。</font></p>','1979 4 16','2006-9-1','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1217,'盐水的故事','<p><font size=\"3\" face=\"Times New Roman\">挂盐水的时候，如果滴起来有规律，先是滴一滴，停一下；然后滴二滴，停一 下；再滴三滴，停一下...，现在有一个问题：这瓶盐水一共有VUL毫升，每一滴是D毫升，每一滴的速度是一秒（假设最后一滴不到D毫升，则花费的时间也 算一秒），停一下的时间也是一秒这瓶水什么时候能挂完呢？</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据占一行,由VUL和D组成,其中0&lt; D&lt; VUL&lt; 5000。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">请输出挂完盐水需要的时间。</font></p>','10 1','13','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1218,'矩阵转置','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入N*N的矩阵，输出它的转置矩阵。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">第一行为整数N。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n接着是一个N*N的矩阵。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">转置矩阵</span></p>','2\n1 2\n1 2','1 1\n2 2','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1219,'破解平方数','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">给出m个数b1, b2,..., bm,每个数的素数因子都在前t个素数之内，任务是寻找这m个数的非空子集的个数x，使得每个子集的乘积都是一个完全平方数。例如t=3,则前3个素数为2, 3, 5。m=4，这4个数为9, 20, 500, 3， 每个数的素因子都是在前3个素数内，则有x=3个非空子集合{9}， {20， 500}， {9， 20， 500}，满足每个集合内的数的乘积是一个完全平方数，输出这样的集合的个数。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; font-size: medium;\" class=\"Apple-style-span\">每组测试数据的第一行为两个正整数t, m(1 &le; t &le; 100, 1 &le; m &le; 100) 第二行为m个数， 1 &lt;= bi &lt;= 109 处理至文件结束</span><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">每行输出一个整数x，对应每组测试数据</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: Simsun; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">\n<pre><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">每行输出一个整数x，对应每组测试数据</span></pre>\n</span></p>','3 4 \n9 20 500 3','3','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1220,'破解简单密码','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">密码是我们生活中非常重要的东东，我们的那么一点不能说的秘密就全靠它了。哇哈哈.<span class=\"Apple-converted-space\">&nbsp;</span><br />\n接下来渊子要在密码之上再加一套密码，虽然简单但也安全。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n假设老王原来一个BBS上的密码为zvbo941987,为了方便记忆，他通过一种算法把这个密码变换成YUANzi1987，这个密码是他的名字和出生年份，怎么忘都忘不了，而且可以明目张胆地放在显眼的地方而不被别人知道真正的密码。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n他是这么变换的，大家都知道手机上的字母： 1--1， abc--2, def--3, ghi--4, jkl--5, mno--6, pqrs--7, tuv--8 wxyz--9, 0--0,就这么简单，老王把密码中出现的小写字母都变成对应的数字，数字和其他的符号都不做变换，声明：密码中没有空格，而密码中出现的大写字母则边成小写之后往后移一位，如：X，先边成小写，再往后移一位，不就是y了嘛，简单吧。记住，z往后移是a哦。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入包括多个测试数据。输入是一个明文，密码长度不超过100个字符，输入直到文件结尾。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输出渊子真正的密文。</span></p>','YUANzi1987','zvbo941987','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1221,'神奇的fans','<p><font size=\"3\" face=\"Times New Roman\">传说fans是一个数学天才。在他五岁那年，从一堆数字卡片中选出了4张 卡片：5，7，6，8。这4个数字有什么神秘之处呢？如果把这4张卡片自左往右的排成：5，6，7，8。你就会发现：原来这4个数字构成了等差数列！当年 fans选出了n组卡片，据说都能够构成等差数列。但是事实真的是这样吗？fans真的有这么神奇吗？  n组数据就是fans选出的n组卡片，请你判断每一组卡片是否能构成等差数列.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一个数为数据的组数n，表示后面有n行，每行中的第一个数为该组数据的元素个数m（1&le;m&le;100），其后是m个正整数（不会超出int的表示范围）。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">如果能够构成等差数列，输出&ldquo;yes&rdquo;，否则输出&ldquo;no&rdquo;。</font></p>','2\n4 5 7 6 8\n8 1 7 3 2 8 12 78 3','yes\nno\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1222,'第几天','<p><font face=\"Times New Roman\">给定一个日期，输出这个日期是该年的第几天。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，数据格式为YYYY/MM/DD组成，具体参见sample input ,另外，可以向你确保所有的输入数据是合法的。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行，表示该日期是该年的第几天。</font></p>','1985/1/20\n2006/3/12\n\n','20\n71\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1223,'筛排处理','<p><font face=\"Times New Roman\">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N&lt;=100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每组输入数据的第一行含有一个正整数N，表示后面行中有N个随机整数。若N=0，表示处理结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对应每组输入数据，输出一组数据，该数据由单独一行开头，内含一个N，表示后面有N个排好序的整数，整数之间空一格。每组输出数据之间空一行。</font></p>','12\n2 4 6 17 20 40 43 45 60 64 85 98\n17\n35 75 40 61 56 21 85 61 50 83 52 22 44 68 51 80 38\n0\n','12\n2 4 6 17 20 40 43 45 60 64 85 98\n\n16\n21 22 35 38 40 44 50 51 52 56 61 68 75 80 83 85\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1224,'简单的事情','<p><font size=\"3\" face=\"Times New Roman\">数学天才fans曾经说过一句话：组合数的计算是一件非常简单的事情。组合数的计算真的是一件非常简单的事情吗？请你自己去尝试一下吧！ </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入中的一些整数对n，m（m&le;n&le;20）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出其组合数。</font></p>','5 2\n18 13','10\n8568','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1225,'简单编码','<p><font face=\"Times New Roman\">最近Kingly对编码很感兴趣，于是从网上找了一些编码原则来对字符串做实验。由于Kingly一直很忙，所以希望你这位编程高手来替他解决这个问题。下面是编码原则：（1） 如果访问到字符A，W，F就转化成I；（2） 如果访问到字符C，M，S就分别转化成L，o，v；（3） 如果访问到字符D，P，G，B就转化成e；（4） 如果访问到字符L，X就分别转化成Y，u；（5） 其他字符均保持不变。（6） 遇到END就结束！</font></p>','<p></p>\n<p></p>\n<p></p>','<p></p>\n<p></p>\n<p></p>','A\nCMSD\nLMX\nEND','I\nLove\nYou','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1226,'素数回文','<p><font size=\"3\" face=\"Times New Roman\">小王对既是素数又是回文的数特别感兴趣。比如说151既是素数又是个回文。现在小王想要你帮助他找出某个范围内的素数回文数，请你写个程序找出 a 跟b 之间满足条件的数。(5 &lt;= a &lt; b &lt;= 100,000,000);</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入a和b</font><font size=\"3\" face=\"Times New Roman\">(5 &lt;= a &lt; b &lt;= 100,000,000)</font></p>','<pre><font size=\"3\" face=\"Times New Roman\">按从小到大输出a，b之间所有满足条件的素数回文数</font></pre>','5 500','5\n7\n11\n101\n131\n151\n181\n191\n313\n353\n373\n383','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1227,'统计字母个数','<p><font face=\"Times New Roman\">给定一段文章，请输出每个字母出现的次数</font></p>','<p><font face=\"Times New Roman\">只有一组输入数据，该数据大小&lt;10KB。在文章中除最后一个字符外，只有小写字母、空格和换行符，没有另外的标点、数字和大写字母等。该文章以&rsquo;#&rsquo;结尾。</font></p>','<p><font face=\"Times New Roman\">输出格式为&ldquo;C A&rdquo;，C为&rsquo;a&rsquo;..&rsquo;z&rsquo;中的字母，A为出现次数，C和A之间空一格</font></p>','here is the input\nthis is the article#\n','a 1\nb 0\nc 1\nd 0\ne 5\nf 0\ng 0\nh 4\ni 5\nj 0\nk 0\nl 1\nm 0\nn 1\no 0\np 1\nq 0\nr 2\ns 3\nt 5\nu 1\nv 0\nw 0\nx 0\ny 0\nz 0\n\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1228,'统计立方数','<p><font size=\"3\" face=\"Times New Roman\">有一堆正整数，统计其中有多少立方数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有一些正整数，其每个数都小于2^32。若该数为0，则应结束统计。</font></p>','<p><font face=\"Times New Roman\">输出所统计的立方数个数</font></p>','1 3 5 7 9 11 15 17 19 21 23 25 27 0\n','2\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1229,'老王赛马','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">赛马是一古老的游戏，早在公元前四世纪的中国，处在诸侯割据的状态，历史上称为&ldquo;战国时期&rdquo;。在魏国作官的孙膑，因为受到同僚庞涓的迫害，被齐国使臣救出后，到达齐国国都。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n赛马是当时最受齐国贵族欢迎的娱乐项目。上至国王，下到大臣，常常以赛马取乐，并以重金赌输赢。田忌多次与国王及其他大臣赌输赢，屡赌屡输。一天他赛马又输了，回家后闷闷不乐。孙膑安慰他说：&ldquo;下次有机会带我到马场看看，也许我能帮你。&rdquo;<span class=\"Apple-converted-space\">&nbsp;</span><br />\n孙膑仔细观察后发现，田忌的马和其他人的马相差并不远，只是策略运用不当，以致失败。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n比赛前田忌按照孙膑的主意，用上等马鞍将下等马装饰起来，冒充上等马，与齐王的上等马比赛。第二场比赛，还是按照孙膑的安排，田忌用自己的上等马与国王的中等马比赛，在一片喝彩中，只见田忌的马竟然冲到齐王的马前面，赢了第二场。关键的第三场，田忌的中等马和国王的下等马比赛，田忌的马又一次冲到国王的马前面，结果二比一，田忌赢了国王。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n就是这么简单，现在老王也来赛一赛马。假设每匹马都有恒定的速度，所以速度大的马一定比速度小的马先到终点（没有意外！！）。不允许出现平局。最后谁赢的场数多于一半(不包括一半)，谁就是赢家(可能没有赢家)。老王有N(1&le;N&le;1000)匹马参加比赛。对手的马的数量与渊子马的数量一样，并且知道所有的马的速度。聪明的你来预测一下这场世纪之战的结果，看看老王能否赢得比赛。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入有多组测试数据。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n每组测试数据包括3行：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n第一行输入N(1&le;N&le;1000)。表示马的数量。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n第二行有N个整型数字，即渊子的N匹马的速度。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n第三行有N个整型数字，即对手的N匹马的速度。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n当N为0时退出。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">若通过聪明的你精心安排，如果渊子能赢得比赛，那么输出&ldquo;YES&rdquo;。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n否则输出&ldquo;NO&rdquo;。</span></p>','5\n2 3 3 4 5\n1 2 3 4 5\n4\n2 2 1 2\n2 2 3 1\n0','YES\nNO','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1230,'考试排名','<p><font size=\"3\" face=\"Times New Roman\">C++编程考试使用的实时提交系统，具有即时获得成绩排名的特点。它的功能是怎么实现的呢？  <br />\n我们做好了题目的解答，提交之后，要么&ldquo;AC&rdquo;，要么错误，不管怎样错法，总是给你记上一笔，表明你曾经有过一次错误提交，因而当你一旦提交该题 &ldquo;AC&rdquo;后，就要与你算一算帐了，总共该题错误提交了几回。虽然你在题数上，大步地跃上了一个台阶，但是在耗时上要摊上你共花去的时间。特别是，曾经有过 的错误提交，每次都要摊上一定的单位时间分。这样一来，你在做出的题数上，可能领先别人很多，但是，在做出同样题数的人群中，你可能会在耗时上处于排名的 劣势。  <br />\n例如：某次考试一共8题（A，B，C，D，E，F，G，H），每个人做的题都在对应的题号下有个数量标记，负数表示该学生在该题上有过的错误提交 次数，但到现在还没有AC，正数表示AC所耗的时间，如果正数a跟上一对括号，里面有个整数b，那就表示该学生提交该题AC了，耗去了时间a，同时，曾经 错误提交了b次，因此对于下述输入数据：  <br />\nname A B C D E F G H  <br />\nSmith -1 -16 8 0 0 120 39 0  <br />\nJohn 116 -2 11 0 0 82 55(1) 0  <br />\nJose 72(3) 126 10 -3 0 47 21(2) -2  <br />\nBush 0 -1 -8 0 0 0 0 0  <br />\nAlice -2 67(2) 13 -1 0 133 79(1) -1  <br />\nBob 0 0 57(5) 0 0 168 -7 0  <br />\n若每次错误提交的罚分为20分，则其排名从高到低应该是这样的：  <br />\nJose 5 376  <br />\nJohn 4 284  <br />\nAlice 4 352  <br />\nSmith 3 167  <br />\nBob 2 325  <br />\nBush 0 0 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据的第一行是考试题数n（1&le;n&le;12）以及单位罚分数 m（10&le;m&le;20），每行数据描述一个学生的用户名（不多于10个字符的字串）以及对所有n道题的答题现状，其描述采用问题描述中的数量标记的格式，见 上面的表格，提交次数总是小于100，AC所耗时间总是小于1000。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">将这些学生的考试现状，输出一个实时排名。实时排名显然先按AC题数的多 少排，多的在前，再按时间分的多少排，少的在前，如果凑巧前两者都相等，则按名字的字典序排，小的在前。每个学生占一行，输出名字（10个字符宽），做出 的题数（2个字符宽，右对齐）和时间分（4个字符宽，右对齐）。名字、题数和时间分相互之间有一个空格。</font></p>','8 20\nSmith     -1      -16     8       0      0      120     39      0\nJohn      116     -2      11      0      0      82      55(1)   0\nJosephus  72(3)   126     10      -3     0      47      21(2)   -2\nBush      0       -1      -8      0      0      0       0       0\nAlice     -2      67(2)   13      -1     0      133     79(1)   -1\nBob       0       0       57(5)   0      0      168     -7      0','Josephus    5  376\nJohn        4  284\nAlice       4  352\nSmith       3  167\nBob         2  325\nBush        0    0','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1231,'能量项链','<p><font size=\"3\" face=\"Times New Roman\">在Mars星球上，每个Mars人都随身佩带着一串能量项链。在项链上有 N颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标 记。因为只有这样，通过吸盘（吸盘是Mars人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗 能量珠的头标记为m，尾标记为r，后一颗能量珠的头标记为r，尾标记为n，则聚合后释放的能量为m*r*n（Mars单位），新产生的珠子的头标记为m， 尾标记为n。  <br />\n需要时，Mars人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。  <br />\n例如：设N=4，4颗珠子的头标记与尾标记依次为(2，3) (3，5) (5，10) (10，2)。我们用记号◎表示两颗珠子的聚合操作，(j◎k)表示第j，k两颗珠子聚合后所释放的能量。则第4、1两颗珠子聚合后释放的能量为：  <br />\n(4◎1)=10*2*3=60。  <br />\n这一串项链可以得到最优值的一个聚合顺序所释放的总能量为  <br />\n((4◎1)◎2)◎3）=10*2*3+10*3*5+10*5*10=710。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行是一个正整数N（4&le;N&le;100），表示项链上珠子的个数。第二行 是N个用空格隔开的正整数，所有的数均不超过1000。第i个数为第i颗珠子的头标记（1&le;i&le;N），当i〈N时，第i颗珠子的尾标记应该等于第i+1颗 珠子的头标记。第N颗珠子的尾标记应该等于第1颗珠子的头标记。  <br />\n至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一行，是一个正整数E（E&le;2.1*10^9），为一个最优聚合顺序所释放的总能量</font></p>','4\n2  3  5  10','710','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1232,'诡秘的余数','<p><font face=\"Times New Roman\">不可否认，小强是一名数学天才，大家都这么说。天才小强的两大最新发现如下：（1） 正整数n除3的余数，等价于，正整数n的各位数字之和除3的余数；（2） 正整数n除9的余数可以通过这样的方法来计算：计算n 的各位数之和，设为m，如果m已经是一位数，那么余数就是m；否则设n=m，重新进行计算n的各位数之和m，直到m是一个一位数。但是，正整数除1，2，4，5，6，7，8，也存在类似的性质吗？这真是一个难题啊！小强想睡觉了，不去管了。现在请你计算一下正整数n除一位数m的余数。文件中有一些数对，一为大整数（可能大到100位）n，另一为一位数m（&gt;0）。求其n除以m的余数。</font></p>','','','23 7\n123 9','2\n6','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1233,'超级楼梯','<p><font size=\"3\" face=\"Times New Roman\">有一楼梯共M级，刚开始时你在第一级，若每次只能跨上一级或二级，要走上第M级，共有多少种走法？ </font></p>','<p><font face=\"Times New Roman\">输入数据首先包含一个整数N，表示测试实例的个数，然后是N行数据，每行包含一个整数M（1&lt;=M&lt;=40）,表示楼梯的级数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，请输出不同走法的数量 </font></p>','2\n2\n3\n\n','1\n2\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1234,'连续自然数和','<p><font size=\"3\" face=\"Times New Roman\">对一个给定的自然数M，求出所有的连续的自然数段（连续个数大于1），这些连续的自然数段中的全部数之和为M。  <br />\n例子：1998+1999+2000+2001+2002 = 10000，所以从1998到2002的一个自然数段为M=10000的一个解。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">包含一个整数的单独一行给出M的值（10 &lt;= M &lt;= 2,000,000）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行两个自然数，给出一个满足条件的连续自然数段中的第一个数和最后一个数，两数之间用一个空格隔开，所有输出行的第一个按从小到大的升序排列，对于给定的输入数据，保证至少有一个解。</font></p>','10000\n\n21334\n\n2000000','18 142 \n297 328 \n388 412 \n1998 2002\n\n5332 5335\n\n923 2202\n2888 3512\n7685 7940\n15938 16062\n79988 80012\n399998 400002','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1235,'送分题素数','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输出100-&gt;200之间的素数的个数，以及所有的素数。</span></p>','','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">100-&gt;200之间的素数的个数，以及所有的素数。</span></p>','','21\n101 103 ... 197 199','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1236,'逆反的01串','<p><font size=\"3\" face=\"Times New Roman\">Fans是个ACM程序设计迷。有时侯，他表现出很强烈的逆反心理，你往东，他往西，你往南，他偏往北。这一次，不知道又是谁惹着他了，好端端的一个个01串，到了他的手里，都变成10串了。请你编个程序来模仿他的行为，将01串（长度&le;200），全变成10串吧。</font></p>','<pre><font><font size=\"3\" face=\"Times New Roman\">0110100100100 1000000010000000000</font></font></pre>','<pre><font><font size=\"3\" face=\"Times New Roman\">1001011011011 0111111101111111111</font></font></pre>','0110100100100\n1000000010000000000','1001011011011\n0111111101111111111','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1237,'速算24点','<p><font size=\"3\" face=\"Times New Roman\">速算24点相信绝大多数人都玩过。就是随机给你四张牌，包括 A(1),2,3,4,5,6,7,8,9,10,J(11),Q(12),K(13)。要求只用\'+\',\'-\',\'*\',\'/\'运算符以及括号改变运算 顺序，使得最终运算结果为24(每个数必须且仅能用一次)。游戏很简单，但遇到无解的情况往往让人很郁闷。你的任务就是针对每一组随机产生的四张牌，判断 是否有解。我们另外规定，整个计算过程中都不能出现小数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据占一行，给定四张牌。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">如果有解则输出&quot;Y&quot;，无解则输出&quot;N&quot;。</font></p>','A 2 3 6','Y','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1238,'邮局选址问题','<p><font face=\"Times New Roman\">问题描述： <br />\n在一个按照东西和南北方向划分成规整街区的城市里，n个居民点散乱地分布在不同的街区中。用x 坐标表示东西向，用y坐标表示南北向。各居民点的位置可以由坐标(x,y)表示。街区中任意2 点(x1,y1)和(x2,y2)之间的距离可以用数值|x1-x2|+|y1-y2|度量。 <br />\n居民们希望在城市中选择建立邮局的最佳位置，使n个居民点到邮局的距离总和最小。 <br />\n编程任务： <br />\n给定n 个居民点的位置,编程计算n 个居民点到邮局的距离总和的最小值。 </font></p>','<p><font face=\"Times New Roman\">第1 行是居民点数n，1<n></n>&lt;10000。&lt; 个整数x 行是居民点的位置，每行2&gt;</font></p>','<p><font face=\"Times New Roman\">n个居民点到邮局的距离总和的最小值。</font></p>','5\n1 2\n2 2\n1 3\n3 -2\n3 3\n','10','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1239,'金明的预算方案','<p><font size=\"3\" face=\"Times New Roman\">　金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专 用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早，金明就开始做 预算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子： <br />\n<br />\n主件 	附件  <br />\n电脑 	打印机，扫描仪  <br />\n书柜 	图书  <br />\n书桌 	台灯，文具  <br />\n工作椅 	无  <br />\n<br />\n如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有0个、1个或2个附件。附件不再有从属于自己的附件。金明想买的东西很 多，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格 （都是10元的整数倍）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />\n设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />\nv[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />\n请你帮助金明设计一个满足要求的购物单。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行，为两个正整数，用一个空格隔开：  <br />\nN m  <br />\n（其中N（&lt;32000）表示总钱数，m（&lt;60）为希望购买物品的个数。）  <br />\n从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数  <br />\nv p q  <br />\n（其中v表示该物品的价格（v&lt;10000），p表示该物品的重要度（1~5），q表示该物品是主件还是附件。如果q=0，表示该物品为主件，如果q&gt;0，表示该物品为附件，q是所属主件的编号）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;200000）。</font></p>','1000 5\n800 2 0\n400 5 1\n300 5 1\n400 3 0\n500 2 0','2200','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1240,'防御导弹','<p><font size=\"3\" face=\"Times New Roman\">某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截 系统有一个缺陷：虽然它的第一发炮弹能够达到任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试 用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">最多20个整数，分别表示导弹依次飞来的高度（雷达给出高度数据是不大于30000的正整数）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数M。表示：这套系统最多能拦截 M 枚导弹.</font></p>','300 250 275 252 200 138 245','5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1241,'青年歌手大奖赛_评委会打分','<p><font size=\"3\" face=\"Times New Roman\">青年歌手大奖赛中，评委会给参赛选手打分。选手得分规则为去掉一个最高分和一个最低分，然后计算平均得分，请编程输出某选手的得分</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，每行的第一个数是n(2＜n＜100)，表示评委的人数，然后是n个评委的打分。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出选手的得分，结果保留2位小数，每组输出占一行。</font></p>','3 99 98 97\n4 100 99 98 97','98.00\n98.50','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1242,'马拦过河卒','<p><font size=\"3\" face=\"Times New Roman\">棋盘上A点有一个过河卒，需要走到目标B点。卒行走的规则：可以向下、或者向右。同时在棋盘上C点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为&ldquo;马拦过河卒&rdquo;。  <br />\n棋盘用坐标表示，A点(0, 0)、B点(n, m)(n, m为不超过15的整数)，同样马的位置坐标是需要给出的。现在要求你计算出卒从A点能够到达B点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">一行四个数据，分别表示B点坐标和马的坐标。（保证所有的数据有解）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个数据，表示所有的路径条数。</font></p>','6 6 3 3','6','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0);
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
INSERT INTO `problem` VALUES (1000,'C语言程序设计教程（第三版）课后习题1.5','<p>请参照本章例题，编写一个C程序，输出以下信息：</p>\n<p>**************************</br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Very&nbsp;&nbsp;&nbsp; Good!</br>\n**************************</p>\n<p>数＊号可看出，Very前面9空格，Good前面&hellip;&hellip;</p>\n<p>*也是输出的一部分，别光打印Very Good!</p>','<p>无需输入</p>','<p>**************************</br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Very&nbsp;&nbsp;&nbsp; Good!</br>\n**************************</p>','','**************************\n         Very    Good!\n**************************','0','','','2017-04-30 03:06:25',1,128,'N',2,2,0),(1001,'C语言程序设计教程（第三版）课后习题1.6','编写一个程序，输入a、b、c三个值，输出其中最大值。','一行数组，分别为a b c','a b c其中最大的数','10 20 30','30','0','','','2017-04-30 03:06:25',1,128,'N',2,3,0),(1002,'C语言程序设计教程（第三版）课后习题3.7','<p>要将&quot;China&quot;译成密码，译码规律是：用原来字母后面的第4个字母代替原来的字母．例如，字母&quot;A&quot;后面第4个字母是&quot;E&quot;．&quot;E&quot;代替&quot;A&quot;。因此，&quot;China&quot;应译为&quot;Glmre&quot;。请编一程序，用赋初值的方法使cl、c2、c3、c4、c5五个变量的值分别为，&rsquo;C&rsquo;、&rsquo;h&rsquo;、&rsquo;i&rsquo;、&rsquo;n&rsquo;、&rsquo;a&rsquo;，经过运算，使c1、c2、c3、c4、c5分别变为&rsquo;G&rsquo;、&rsquo;l&rsquo;、&rsquo;m&rsquo;、&rsquo;r&rsquo;、&rsquo;e&rsquo;，并输出。</p>','<p>China</p>','<p>加密后的China</p>','China','Glmre','0','so easy','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1003,'C语言程序设计教程（第三版）课后习题4.8','设圆半径r，圆柱高h\n\n求圆周长C1、圆面积Sa、圆球表面积Sb、圆球体积Va、圆柱体积Vb。\n用scanf输入数据，输出计算结果，输出时要求文字说明，取小数点后两位数字。请编程序。\n\nPI＝3.14  ','两个浮点数，r和h','圆周长C1、圆面积Sa、圆球表面积Sb、圆球体积Va、圆柱体积Vb。\n保留两位小数，每个结果后换行。','1.5 3','C1=9.42\nSa=7.07\nSb=28.26\nVa=14.13\nVb=21.19\n\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1004,'C语言程序设计教程（第三版）课后习题4.9','输入一个华氏温度，要求输出摄氏温度。公式为  \nc=5(F-32)/9  \n输出要求有文字说明，取位2小数。','一个华氏温度，浮点数','摄氏温度，浮点两位小数','-40','c=-40.00','0','零下40度，可以不问是？氏','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1005,'C语言程序设计教程（第三版）课后习题5.4','有三个整数a b c,由键盘输入，输出其中的最大的数。','一行数组，分别为a b c','a b c其中最大的数','10 20 30','30','0','max ?\nif(a>b) ?\n\nint main(){\n\n  return 0;\n}','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1006,'C语言程序设计教程（第三版）课后习题5.5','<p>有一个函数<br />\ny={ x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x&lt;1<br />\n&nbsp;&nbsp; &nbsp;| 2x-1&nbsp;&nbsp; 1&lt;=x&lt;10<br />\n&nbsp;&nbsp;&nbsp; \\ 3x-11&nbsp; x&gt;=10</p>\n<p>写一段程序，输入x，输出y</p>','<p>一个数x</p>','<p>一个数y</p>','14\n','31','0','使用函数','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1007,'C语言程序设计教程（第三版）课后习题5.6','给出一百分制成绩，要求输出成绩等级‘A’、‘B’、‘C’、‘D’、‘E’。\n90分以上为A\n80-89分为B\n70-79分为C\n60-69分为D\n60分以下为E\n','一个整数0－100以内','一个字符，表示成绩等级','90','A','0','分段函数返回字符','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1008,'C语言程序设计教程（第三版）课后习题5.7','给出一个不多于5位的整数，要求\n1、求出它是几位数\n2、分别输出每一位数字\n3、按逆序输出各位数字，例如原数为321,应输出123','一个不大于5位的数字','三行\n第一行 位数\n第二行 用空格分开的每个数字，注意最后一个数字后没有空格\n第三行 按逆序输出这个数','12345','5\n1 2 3 4 5\n54321','0','哈姆雷特：数字还是字符？这是一个问题！','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1009,'C语言程序设计教程（第三版）课后习题5.8','<p>企业发放的奖金根据利润提成。利润低于或等于100000元的，奖金可提10%;<br />\n利润高于100000元，低于200000元（100000&lt;I&le;200000）时，低于100000元的部分按10％提成，高于100000元的部分，可提成 7.5%;<br />\n200000&lt;I&le;400000时，低于200000元部分仍按上述办法提成，（下同），高于200000元的部分按5％提成；<br />\n400000&lt;I&le;600000元时，高于400000元的部分按3％提成；600000&lt;I&le;1000000时，高于600000元的部分按1.5%提成；<br />\nI&gt;1000000时，超过1000000元的部分按1%提成。从键盘输入当月利润I,求应发奖金总数。</p>','<p>一个整数，当月利润。</p>','<p>一个整数，奖金。</p>','900','90','0','用Switch要比用if的看起来更清晰。','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1010,'C语言程序设计教程（第三版）课后习题6.1','输入两个正整数m和n，求其最大公约数和最小公倍数。','两个整数','最大公约数，最小公倍数','5 7','1 35','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1011,'C语言程序设计教程（第三版）课后习题6.2','输入一行字符，分别统计出其中英文字母、空格、数字和其他字符的个数。','一行字符','统计值','aklsjflj123 sadf918u324 asdf91u32oasdf/.\';123\n','23 16 2 4','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1012,'C语言程序设计教程（第三版）课后习题6.3','求Sn=a+aa+aaa+…+aa…aaa（有n个a）之值，其中a是一个数字。\n例如：2+22+222+2222+22222（n=5），n由键盘输入。','a','和','5','24690','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1013,'C语言程序设计教程（第三版）课后习题6.4','求Sn=1!+2!+3!+4!+5!+…+n!之值，其中n是一个数字。\n','n','和','5','153','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1014,'C语言程序设计教程（第三版）课后习题6.5','求以下三数的和,保留2位小数\n1~a之和\n1~b的平方和\n1~c的倒数和','a b c','1+2+...+a + 1^2+2^2+...+b^2 + 1/1+1/2+...+1/c','100 50 10','47977.93','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1015,'C语言程序设计教程（第三版）课后习题6.6','打印出所有\"水仙花数\"，所谓\"水仙花数\"是指一个三位数，其各位数字立方和等于该本身。\n例如：153是一个水仙花数，因为153=1^3+5^3+3^3。\nOutput:<pre>\n153\n???\n???\n??? </pre>','无','所有的水仙花数，从小的开始。\n每行一个','','','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1016,'C语言程序设计教程（第三版）课后习题6.7','<p>一个数如果恰好等于它的因子之和，这个数就称为&quot;完数&quot;。 例如，6的因子为1、2、3，而6=1+2+3，因此6是&quot;完数&quot;。 编程序找出N之内的所有完数，并按下面格式输出其因子：</p>','<p>N</p>','<p>? its factors are ? ? ?</p>','1000','6 its factors are 1 2 3 \n28 its factors are 1 2 4 7 14 \n496 its factors are 1 2 4 8 16 31 62 124 248 ','0','','','2017-04-30 03:06:25',10,128,'N',1,1,0),(1017,'C语言程序设计教程（第三版）课后习题6.8','有一分数序列：  \n2/1 3/2 5/3 8/5 13/8 21/13......\n求出这个数列的前N项之和，保留两位小数。  ','N','数列前N项和','10','16.48','0','','','2017-04-30 03:06:25',1,128,'N',0,1,0),(1018,'C语言程序设计教程（第三版）课后习题6.9','一球从M米高度自由下落，每次落地后返回原高度的一半，再落下。\n它在第N次落地时反弹多高？共经过多少米？\n保留两位小数','M N','它在第N次落地时反弹多高？共经过多少米？\n保留两位小数，空格隔开，放在一行','1000 5','31.25 2875.00','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1019,'C语言程序设计教程（第三版）课后习题6.10','猴子吃桃问题。猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个。\n第二天早上又将剩下的桃子吃掉一半，又多吃一个。以后每天早上都吃了前一天剩下的一半零一个。\n到第N天早上想再吃时，见只剩下一个桃子了。求第一天共摘多少桃子。','N','桃子总数','10','1534','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1020,'C语言程序设计教程（第三版）课后习题6.11','用迭代法求 。求平方根的迭代公式为：  \nX[n+1]=1/2(X[n]+a/X[n])\n要求前后两次求出的得差的绝对值少于0.00001。\n输出保留3位小数','X','X的平方根','4','2.000','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1021,'C语言程序设计教程（第三版）课后习题7.1','用筛法求之N内的素数。 ','N','0～N的素数','100','2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97','0','数组大小动态定义？函数？','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1022,'C语言程序设计教程（第三版）课后习题7.2','用选择法对10个整数从小到大排序。  ','10个整数','排序好的10个整数','4 85  3 234 45 345 345 122 30 12','3\n4\n12\n30\n45\n85\n122\n234\n345\n345','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1023,'C语言程序设计教程（第三版）课后习题7.3','求一个3×3矩阵对角线元素之和。  ','矩阵','主对角线 副对角线 元素和','1 2 3\n1 1 1\n3 2 1','3 7','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1024,'C语言程序设计教程（第三版）课后习题7.4','已有一个已排好的9个元素的数组，今输入一个数要求按原来排序的规律将它插入数组中。','第一行，原始数列。\n第二行，需要插入的数字。','排序后的数列','1 7 8 17 23 24 59 62 101\n50','1\n7\n8\n17\n23\n24\n50\n59\n62\n101\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1025,'C语言程序设计教程（第三版）课后习题7.5','输入10个数字，然后逆序输出。','十个整数','逆序输出，空格分开','1 2 3 4 5 6 7 8 9 0','0 9 8 7 6 5 4 3 2 1','0','数组？堆栈？','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1026,'C语言程序设计教程（第三版）课后习题8.1','写两个函数，分别求两个整数的最大公约数和最小公倍数，用主函数调用这两个函数，并输出结果两个整数由键盘输入。','两个数','最大公约数 最小公倍数','6 15','3 30','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1027,'C语言程序设计教程（第三版）课后习题8.2','求方程 的根，用三个函数分别求当b^2-4ac大于0、等于0、和小于0时的根，并输出结果。从主函数输入a、b、c的值。 ','a b c','x1=? x2=?','4 1 1','x1=-0.125+0.484i x2=-0.125-0.484i','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1028,'C语言程序设计教程（第三版）课后习题8.3','写一个判断素数的函数，在主函数输入一个整数，输出是否是素数的消息。','一个数','如果是素数输出prime\n如果不是输出not prime','97','prime','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1029,'C语言程序设计教程（第三版）课后习题8.4','写一个函数，使给定的一个二维数组（３×３）转置，即行列互换。','一个3x3的矩阵','转置后的矩阵','1 2 3\n4 5 6\n7 8 9\n','1 4 7 \n2 5 8 \n3 6 9 \n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1030,'C语言程序设计教程（第三版）课后习题8.5','写一函数，使输入的一个字符串按反序存放，在主函数中输入输出反序后的字符串。  ','一行字符','逆序后的字符串','123456abcdef \n','fedcba654321\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1031,'C语言程序设计教程（第三版）课后习题8.6','写一函数，将两个字符串连接','两行字符串','链接后的字符串','123\nabc','123abc','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1032,'C语言程序设计教程（第三版）课后习题8.7','写一函数，将两个字符串中的元音字母复制到另一个字符串，然后输出。','一行字符串','顺序输出其中的元音字母（aeiuo）','abcde','ae','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1033,'C语言程序设计教程（第三版）课后习题8.8','写一函数，输入一个四位数字，要求输出这四个数字字符，但每两个数字间空格。如输入1990，应输出\"1 9 9 0\"。','一个四位数','增加空格输出','1990','1 9 9 0 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1034,'C语言程序设计教程（第三版）课后习题8.9','编写一函数，由实参传来一个字符串，统计此字符串中字母、数字、空格和其它字符的个数，在主函数中输入字符串以及输出上述结果。\n\n只要结果，别输出什么提示信息。','一行字符串','统计数据，4个数字，空格分开。','!@#$%^QWERT    1234567','5 7 4 6 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1035,'C语言程序设计教程（第三版）课后习题9.1','定义一个带参的宏，使两个参数的值互换，并写出程序，输入两个数作为使用宏时的实参。输出已交换后的两个值。  ','两个数，空格隔开','交换后的两个数，空格隔开','1 2','2 1','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1036,'C语言程序设计教程（第三版）课后习题9.2','输入两个整数，求他们相除的余数。用带参的宏来实现，编程序。  ','a b两个数','a/b的余数','3 2','1','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1037,'C语言程序设计教程（第三版）课后习题9.3','三角形面积=SQRT(S*(S-a)*(S-b)*(S-c))\n其中S=(a+b+c)/2，a、b、c为三角形的三边。\n定义两个带参的宏，一个用来求area，\n另一个宏用来求S。\n\n写程序，在程序中用带实参的宏名来求面积area。 ','a b c三角形的三条边,可以是小数。','三角形面积，保留3位小数','3 4 5','6.000','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1038,'C语言程序设计教程（第三版）课后习题9.4','给年份year，定义一个宏，以判别该年份是否闰年。提示：宏名可以定义为LEAP_YEAR，形参为y，既定义宏的形式为  \n#define LEAP_YEAR(y) （读者设计的字符串）','一个年份','根据是否闰年输出，是输出\"L\",否输出\"N\"','2000','L','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1039,'C语言程序设计教程（第三版）课后习题9.6','请设计输出实数的格式，包括：⑴一行输出一个实数；⑵一行内输出两个实数；⑶一行内输出三个实数。实数用\"6.2f\"格式输出。','一个实数，float范围','输出3行，第一行打印一遍输入的数，第二行打印两遍，第三行打印三遍。\n第二行和第三行，用空格分隔同一行的数字。\n实数用\"6.2f\"格式输出。','0.618','  0.62\n  0.62   0.62\n  0.62   0.62   0.62\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1040,'C语言程序设计教程（第三版）课后习题9.8','分别用函数和带参的宏，从三个数中找出最大的数。','3个实数','最大的数,输出两遍，先用函数，再用宏。\n保留3位小数。','1 2 3','3.000\n3.000','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1041,'C语言程序设计教程（第三版）课后习题9.10','输入一行电报文字，将字母变成其下一字母（如’a’变成’b’……’z’变成’ａ’其它字符不变）。','一行字符','加密处理后的字符','a b','b c','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1042,'C语言程序设计教程（第三版）课后习题10.1','输入三个整数，按由小到大的顺序输出。','三个整数','由小到大输出成一行，每个数字后面跟一个空格','2 3 1','1 2 3 ','0','','','2017-04-30 03:06:25',1,128,'N',0,1,0),(1043,'C语言程序设计教程（第三版）课后习题10.2','输入三个字符串，按由小到大的顺序输出 ','3行字符串','按照从小到大输出成3行','cde\nafg\nabc\n','abc\nafg\ncde','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1044,'C语言程序设计教程（第三版）课后习题10.3','输入10个整数，将其中最小的数与第一个数对换，把最大的数与最后一个数对换。写三个函数；\n①输入10个数；②进行处理；③输出10个数。','10个整数','整理后的十个数，每个数后跟一个空格（注意最后一个数后也有空格）','2 1 3 4 5 6 7 8 10 9','1 2 3 4 5 6 7 8 9 10 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1045,'C语言程序设计教程（第三版）课后习题10.4','有n个整数，使前面各数顺序向后移m个位置，最后m个数变成前面m个数，见图。写一函数：实现以上功能，在主函数中输入n个数和输出调整后的n个数。','输入数据的个数n\nn个整数\n移动的位置m','移动后的n个数','10\n1 2 3 4 5 6 7 8 9 10\n2','9 10 1 2 3 4 5 6 7 8 ','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1046,'C语言程序设计教程（第三版）课后习题10.5','有n人围成一圈，顺序排号。从第1个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来的第几号的那位。','初始人数n','最后一人的初始编号','3','2','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1047,'C语言程序设计教程（第三版）课后习题10.7','有一字符串，包含n个字符。写一函数，将此字符串中从第m个字符开始的全部字符复制成为另一个字符串。','数字n\n一行字符串\n数字m','从m开始的子串','6\nabcdef\n3','cdef','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1048,'C语言程序设计教程（第三版）课后习题11.1','定义一个结构体变量（包括年、月、日）。计算该日在本年中是第几天，注意闰年问题。  \n','年月日','当年第几天','2000 12 31','366','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1049,'C语言程序设计教程（第三版）课后习题11.3','现有有N个学生的数据记录，每个记录包括学号、姓名、三科成绩。\n编写一个函数input,用来输入一个学生的数据记录。\n编写一个函数print,打印一个学生的数据记录。\n在主函数调用这两个函数，读取N条记录输入，再按要求输出。\nN<100','学生数量N占一行\n每个学生的学号、姓名、三科成绩占一行，空格分开。','每个学生的学号、姓名、三科成绩占一行，逗号分开。','2\na100 zhblue 70 80 90\nb200 newsclan 90 85 75\n','a100,zhblue,70,80,90\nb200,newsclan,90,85,75\n','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1050,'C语言程序设计教程（第三版）课后习题11.5','有N个学生，每个学生的数据包括学号、姓名、3门课的成绩，从键盘输入N个学生的数据，要求打印出3门课的总平均成绩，以及最高分的学生的数据（包括学号、姓名、3门课成绩）','学生数量N占一行每个学生的学号、姓名、三科成绩占一行，空格分开。','各门课的平均成绩\n最高分的学生的数据（包括学号、姓名、3门课成绩）','2\n1 blue 90 80 70\nb clan 80 70 60','85 75 65\n1 blue 90 80 70','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1051,'C语言程序设计教程（第三版）课后习题11.8','已有a、b两个链表，每个链表中的结点包括学好、成绩。要求把两个链表合并，按学号升序排列。  ','第一行，a、b两个链表元素的数量N、M,用空格隔开。\n接下来N行是a的数据\n然后M行是b的数据\n每行数据由学号和成绩两部分组成\n\n','按照学号升序排列的数据','2 3\n5 100\n6 89\n3 82\n4 95\n2 10','2 10\n3 82\n4 95\n5 100\n6 89','0','','','2017-04-30 03:06:25',1,128,'N',1,1,0),(1052,'通话记录','<p>使用3个队列，分别保留手机上最近10个，（0）未接来电、（1）已接来电、（2）已拨电话。</p>\n<p></p>','<p>全部通话记录，每行一条记录。</p>\n<p>每条记录包含两个数字，第一个数代表记录类型，第二个数代表手机号码。</p>','<p>分3列输出未接来电、已接来电、已拨电话。</p>\n<p>列之间用空格分割，后接电话在最先输出，不足10条用0占位。</p>','2	18270477699\n1	10149800116\n0	19906559817\n1	16209018105\n1	16804212234\n2	19289130583\n1	17982711123\n0	10897630486\n1	11860787674\n0	15192777554\n','15192777554 11860787674 19289130583\n10897630486 17982711123 18270477699\n19906559817 16804212234 0\n0 16209018105 0\n0 10149800116 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1053,'使用栈实现进制转换','<p>使用栈将一个很长（&gt;30）的十进制数转换为二进制数</p>','<p>若干个很长的十进制数</p>\n<p>每行一个</p>','<p>转换为二进制，每行输出一个</p>','123456789012345678901234567890\n753951684269875454652589568545854758545824','1100011101110100100001111111101101100001101110011111000001110111001001110001111110000101011010010\n10001010011110101010001101001000100100100000101001011010001010101001000100111101011001110001000111110010001000101101111110110110100110100000','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1054,'判断升序','<p>实现public static boolean isSorted(int[] table)</p>\n<p>判断整数数组元素是否已经按升序排序。</p>','<p>一列数，需要判断的数组元素。</p>','<p>如果已经排序输出YES</p>\n<p>如果没有排序输出NO</p>','1\n2\n3\n4\n5\n6\n','YES\n','0','<p>import java.util.*;</p>\n<p>public class Main{</p>\n<p>&nbsp;&nbsp; public static void main(String args[]){</p>\n<p>&nbsp; Scanner cin = new Scanner(System.in);</p>\n<p>&nbsp; int a, b;<br />\n&nbsp; b=-1;<br />\n&nbsp; while (cin.hasNext()){</p>\n<p>&nbsp; a = cin.nextInt();</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(??????????){<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;????????;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;????????????????????;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }<br />\n&nbsp;????????????;</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>\n<p>&nbsp;if(!cin.hasNext())<br />\n&nbsp;&nbsp;????????????????????????</p>\n<p>&nbsp; }</p>\n<p>}</p>\n<p><br />\n</p>','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1055,'金额的中文大写','<p>读入一个浮点数值，将其转化为金额的中文大写形式。<br />\n例如：<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 123.45转化为&ldquo;壹佰贰拾叁元肆角伍分&rdquo;。</p>\n<p>1）当金额为整数时，只表示整数部分，省略小数部分，并添加&ldquo;整&rdquo;字。<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 例如：123表示为&ldquo;壹佰贰拾叁元整&rdquo;</p>\n<p>2）当金额中有连续的0时（含一个0），只需写一个&ldquo;零&rdquo;即可。<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 例如：10005表示为&ldquo;壹万零伍元整&rdquo;</p>\n<p>3）10元缩写为&ldquo;拾元整&rdquo;。</p>','<p>表示金额的浮点数若干，每行一个</p>','<p>各金额的中文大写形式，每行一个</p>\n<p>注：数字&ldquo;壹贰叁肆伍陆柒捌玖拾佰仟万亿&rdquo;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 单位&ldquo;元角分&rdquo;</p>','123.45\n123\n10005\n10','壹佰贰拾叁元肆角伍分\n壹佰贰拾叁元整\n壹万零伍元整\n拾元整','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1056,'复数加法','<p>数集拓展到实数范围内，仍有些运算无法进行。比如判别式小于0的<a href=\"http://baike.baidu.com/view/397767.htm\" target=\"_blank\"><font color=\"#136ec2\">一元二次方程</font></a>仍<a href=\"http://baike.baidu.com/view/1203270.htm\" target=\"_blank\"><font color=\"#136ec2\">无解</font></a>，因此将数集再次扩充，达到复数范围。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：形如z=a+bi的数称为复数(complex number)</b>，其中规定<b>i</b>为<b>虚数单位</b>，且i^2=i*i=-1（a，b是任意<a href=\"http://baike.baidu.com/view/14749.htm\" target=\"_blank\"><font color=\"#136ec2\">实数</font></a>）</p>\n<div class=\"spctrl\"></div>\n<p>　　我们将复数z=a+bi中的实数a称为复数z的实部（real part)记作Rez=a</p>\n<div class=\"spctrl\"></div>\n<p>　　实数b称为复数z的<a href=\"http://baike.baidu.com/view/2441262.htm\" target=\"_blank\"><font color=\"#136ec2\">虚部</font></a>（imaginary part)记作 Imz=b.</p>\n<div class=\"spctrl\"></div>\n<p>　　已知：当b=0时，z=a，这时复数成为实数；</p>\n<div class=\"spctrl\"></div>\n<p>　　当a=0且b&ne;0时 ，z=bi，我们就将其称为<a href=\"http://baike.baidu.com/view/899964.htm\" target=\"_blank\"><b><font color=\"#136ec2\">纯虚数</font></b></a>。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义： 对于复数z=a+bi，称复数z\'=a-bi为z的</b><a href=\"http://baike.baidu.com/view/137793.htm\" target=\"_blank\"><b><font color=\"#136ec2\">共轭复数</font></b></a><b>。</b></p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：将复数的实部与虚部的平方和的正的平方根的值称为该复数的模，记作∣z∣</b></p>\n<div class=\"spctrl\"></div>\n<p>　　即对于复数z=a+bi，它的模</p>\n<div class=\"spctrl\"></div>\n<p>　　∣z∣=&radic;(a^2+b^2)</p>\n<div class=\"spctrl\"></div>\n<p>　　复数的集合用C表示，显然，R是C的真子集</p>\n<div class=\"spctrl\"></div>\n<p>　　复数集是无序集，不能建立大小顺序。</p>\n<div class=\"spctrl\"></div>\n<p>　　共轭复数有些有趣的性质: ︱x+yi︱=︱x-yi︱ (x+yi)*(x-yi)=x^2+y^2=︱x+yi︱^2=︱x-yi︱^2</p>','<p>两个复数分两行，每行两个数，代表复数的实部和虚部。</p>','<p>两个复数的和。</p>','1 2\n3 4','4 6','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1057,'复数乘积','<p>数集拓展到实数范围内，仍有些运算无法进行。比如判别式小于0的<a href=\"http://baike.baidu.com/view/397767.htm\" target=\"_blank\"><font color=\"#136ec2\">一元二次方程</font></a>仍<a href=\"http://baike.baidu.com/view/1203270.htm\" target=\"_blank\"><font color=\"#136ec2\">无解</font></a>，因此将数集再次扩充，达到复数范围。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：形如z=a+bi的数称为复数(complex number)</b>，其中规定<b>i</b>为<b>虚数单位</b>，且i^2=i*i=-1（a，b是任意<a href=\"http://baike.baidu.com/view/14749.htm\" target=\"_blank\"><font color=\"#136ec2\">实数</font></a>）</p>\n<div class=\"spctrl\"></div>\n<p>　　我们将复数z=a+bi中的实数a称为复数z的实部（real part)记作Rez=a</p>\n<div class=\"spctrl\"></div>\n<p>　　实数b称为复数z的<a href=\"http://baike.baidu.com/view/2441262.htm\" target=\"_blank\"><font color=\"#136ec2\">虚部</font></a>（imaginary part)记作 Imz=b.</p>\n<div class=\"spctrl\"></div>\n<p>　　已知：当b=0时，z=a，这时复数成为实数；</p>\n<div class=\"spctrl\"></div>\n<p>　　当a=0且b&ne;0时 ，z=bi，我们就将其称为<a href=\"http://baike.baidu.com/view/899964.htm\" target=\"_blank\"><b><font color=\"#136ec2\">纯虚数</font></b></a>。</p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义： 对于复数z=a+bi，称复数z\'=a-bi为z的</b><a href=\"http://baike.baidu.com/view/137793.htm\" target=\"_blank\"><b><font color=\"#136ec2\">共轭复数</font></b></a><b>。</b></p>\n<div class=\"spctrl\"></div>\n<p>　　<b>定义：将复数的实部与虚部的平方和的正的平方根的值称为该复数的模，记作∣z∣</b></p>\n<div class=\"spctrl\"></div>\n<p>　　规定复数的乘法按照以下的法则进行：</p>\n<div class=\"spctrl\"></div>\n<p>　　设z1=a+bi，z2=c+di(a、b、c、d&isin;R)是任意两个复数，那么它们的积(a+bi)(c+di)=(ac－bd)+(bc+ad)i.</p>\n<div class=\"spctrl\"></div>\n<p>　　其实就是把两个复数相乘，类似两个多项式相乘，在所得的结果中把i2换成－1，并且把实部与虚部分别合并.两个复数的积仍然是一个复数.</p>','<p>两个复数分两行，每行两个数，代表复数的实部和虚部。</p>','<p>两个复数的乘积。</p>','1 1\n1 1','0 2','0','','数据结构Java版\n\n数据结构Java版\n\n数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1058,'多项式相加','<p>一条单链表可以表示一个一元多项式，每个节点包含三个域：指数、系数和后继节点（指针或引用）。</p>\n<p>表示多项式3X<sup>4</sup>-6X<sup>2</sup>+5X-10的单链表如图所示。给定两个多项式，实现两个多项式相加算法。</p>\n<p></p>\n<p><img alt=\"\" width=\"600\" height=\"103\" src=\"/admin/../upload/pimg1058_1.png\" /></p>','<p>第一行输入包含两个整数m,n</p>\n<p>后续为m行和n行数据</p>\n<p>m，n分别代表两个多项式的项数</p>\n<p>后续每一行代表多项式的项，包含a,b两个数据，表示该项的系数和指数。</p>\n<p></p>','<p>从较高指数到较低指数，依次输出求得的和。</p>\n<p>每行一项，格式与输入相同，但无需输出项数，系数为0的项也不输出。</p>','2 3\n1 2\n1 1\n2 2\n1 1\n2 0\n','3 2\n2 1\n2 0','0','','数据结构Java版','2017-04-30 03:06:40',1,128,'N',1,1,0),(1059,'VIJOS-P1000','输入两个自然数，输出他们的和\n','两个自然数x和y(0&lt; =x,y&lt; =32767)\n','一个数，即x和y的和\n','123 500\n','623\n','0','[b]Free&nbsp Pascal&nbsp Code:[/b]\n-------------------\nprogram&nbsp Plus;\nvar&nbsp a,b:longint;\nbegin\n&nbsp &nbsp readln(a,b);\n&nbsp &nbsp writeln(a+b);\nend.\n\n[b]C++&nbsp Code:[/b]\n-------------------\n#include&nbsp &lt; iostream&gt; \nusing&nbsp namespace&nbsp std;\nint&nbsp main(){\n&nbsp &nbsp int&nbsp a,b;\n&nbsp &nbsp cin&gt; &gt; a&gt; &gt; b;\n&nbsp &nbsp cout&lt; &lt; a+b&lt; &lt; endl;\n&nbsp &nbsp return&nbsp 0;\n}\n','','2017-04-30 04:23:46',0,128,'N',0,0,0),(1060,'VIJOS-P1001','&nbsp &nbsp &nbsp &nbsp 某校的惯例是在每学期的期末考试之后发放奖学金。发放的奖学金共有五种，获取的条件各自不同：\n\n&nbsp &nbsp &nbsp &nbsp 1)&nbsp &nbsp 院士奖学金，每人8000元，期末平均成绩高于80分（&gt; 80），并且在本学期内发表1篇或1篇以上论文的学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 2)&nbsp &nbsp 五四奖学金，每人4000元，期末平均成绩高于85分（&gt; 85），并且班级评议成绩高于80分（&gt; 80）的学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 3)&nbsp &nbsp 成绩优秀奖，每人2000元，期末平均成绩高于90分（&gt; 90）的学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 4)&nbsp &nbsp 西部奖学金，每人1000元，期末平均成绩高于85分（&gt; 85）的西部省份学生均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 5)&nbsp &nbsp 班级贡献奖，每人850元，班级评议成绩高于80分（&gt; 80）的学生干部均可获得；\n\n&nbsp &nbsp &nbsp &nbsp 只要符合条件就可以得奖，每项奖学金的获奖人数没有限制，每名学生也可以同时获得多项奖学金。例如姚林的期末平均成绩是87分，班级评议成绩82分，同时他还是一位学生干部，那么他可以同时获得五四奖学金和班级贡献奖，奖金总数是4850元。\n\n&nbsp &nbsp &nbsp &nbsp 现在给出若干学生的相关数据，请计算哪些同学获得的奖金总数最高（假设总有同学能满足获得奖学金的条件）。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行是一个整数N（1&nbsp &lt; =&nbsp N&nbsp &lt; =&nbsp 100），表示学生的总数。接下来的N行每行是一位学生的数据，从左向右依次是姓名，期末平均成绩，班级评议成绩，是否是学生干部，是否是西部省份学生，以及发表的论文数。姓名是由大小写英文字母组成的长度不超过20的字符串（不含空格）；期末平均成绩和班级评议成绩都是0到100之间的整数（包括0和100）；是否是学生干部和是否是西部省份学生分别用一个字符表示，Y表示是，N表示不是；发表的论文数是0到10的整数（包括0和10）。每两个相邻数据项之间用一个空格分隔。\n','&nbsp &nbsp &nbsp &nbsp 输出包括三行，第一行是获得最多奖金的学生的姓名，第二行是这名学生获得的奖金总数。如果有两位或两位以上的学生获得的奖金最多，输出他们之中在输入文件中出现最早的学生的姓名。第三行是这N个学生获得的奖学金的总数。\n','4\nYaoLin 87 82 Y N 0\nChenRuiyi 88 78 N Y 1\nLiXin 92 88 N N 0\nZhangQin 83 87 Y N 1\n','ChenRuiyi\n9000\n28700\n','0','','NOIp2005&nbsp 第一题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1061,'VIJOS-P1002','&nbsp &nbsp &nbsp &nbsp 在河上有一座独木桥，一只青蛙想沿着独木桥从河的一侧跳到另一侧。在桥上有一些石子，青蛙很讨厌踩在这些石子上。由于桥的长度和青蛙一次跳过的距离都是正整数，我们可以把独木桥上青蛙可能到达的点看成数轴上的一串整点：0，1，……，L（其中L是桥的长度）。坐标为0的点表示桥的起点，坐标为L的点表示桥的终点。青蛙从桥的起点开始，不停的向终点方向跳跃。一次跳跃的距离是S到T之间的任意正整数（包括S,T）。当青蛙跳到或跳过坐标为L的点时，就算青蛙已经跳出了独木桥。\n\n&nbsp &nbsp &nbsp &nbsp 题目给出独木桥的长度L，青蛙跳跃的距离范围S,T，桥上石子的位置。你的任务是确定青蛙要想过河，最少需要踩到的石子数。\n\n&nbsp &nbsp &nbsp &nbsp 对于30%的数据，L&nbsp &lt; =&nbsp 10000；\n&nbsp &nbsp &nbsp &nbsp 对于全部的数据，L&nbsp &lt; =&nbsp 10^9。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行有一个正整数L（1&nbsp &lt; =&nbsp L&nbsp &lt; =&nbsp 10^9），表示独木桥的长度。第二行有三个正整数S，T，M，分别表示青蛙一次跳跃的最小距离，最大距离，及桥上石子的个数，其中1&nbsp &lt; =&nbsp S&nbsp &lt; =&nbsp T&nbsp &lt; =&nbsp 10，1&nbsp &lt; =&nbsp M&nbsp &lt; =&nbsp 100。第三行有M个不同的正整数分别表示这M个石子在数轴上的位置（数据保证桥的起点和终点处没有石子）。所有相邻的整数之间用一个空格隔开。\n','&nbsp &nbsp &nbsp &nbsp 输出只包括一个整数，表示青蛙过河最少需要踩到的石子数。\n','10\n2 3 5\n2 3 5 6 7\n','2\n','0','','NOIp2005&nbsp 第二题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1062,'VIJOS-P1003','&nbsp &nbsp &nbsp &nbsp 明明进了中学之后，学到了代数表达式。有一天，他碰到一个很麻烦的选择题。这个题目的题干中首先给出了一个代数表达式，然后列出了若干选项，每个选项也是一个代数表达式，题目的要求是判断选项中哪些代数表达式是和题干中的表达式等价的。\n\n&nbsp &nbsp &nbsp &nbsp 这个题目手算很麻烦，因为明明对计算机编程很感兴趣，所以他想是不是可以用计算机来解决这个问题。假设你是明明，能完成这个任务吗？\n\n&nbsp \n\n&nbsp &nbsp &nbsp &nbsp 这个选择题中的每个表达式都满足下面的性质：\n\n&nbsp &nbsp &nbsp &nbsp 1．&nbsp &nbsp 表达式只可能包含一个变量‘a’。\n\n&nbsp &nbsp &nbsp &nbsp 2．&nbsp &nbsp 表达式中出现的数都是正整数，而且都小于10000。\n\n&nbsp &nbsp &nbsp &nbsp 3．&nbsp &nbsp 表达式中可以包括四种运算‘+’（加），‘-’（减），‘*’（乘），‘^’（乘幂），以及小括号‘(’，‘)’。小括号的优先级最高，其次是‘^’，然后是‘*’，最后是‘+’和‘-’。‘+’和‘-’的优先级是相同的。相同优先级的运算从左到右进行。（注意：运算符‘+’，‘-’，‘*’，‘^’以及小括号‘(’，‘)’都是英文字符）\n\n&nbsp &nbsp &nbsp &nbsp 4．&nbsp &nbsp 幂指数只可能是1到10之间的正整数（包括1和10）。\n\n&nbsp &nbsp &nbsp &nbsp 5．&nbsp &nbsp 表达式内部，头部或者尾部都可能有一些多余的空格。\n\n&nbsp &nbsp &nbsp &nbsp 下面是一些合理的表达式的例子：\n\n((a^1)&nbsp ^&nbsp 2)^3，a*a+a-a，((a+a))，9999+(a-a)*a，1&nbsp +&nbsp (a&nbsp -1)^3，1^10^9……\n\n\n对于30%的数据，表达式中只可能出现两种运算符‘+’和‘-’；\n\n对于其它的数据，四种运算符‘+’，‘-’，‘*’，‘^’在表达式中都可能出现。\n\n对于全部的数据，表达式中都可能出现小括号‘(’和‘)’。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行给出的是题干中的表达式。第二行是一个整数n（2&nbsp &lt; =&nbsp n&nbsp &lt; =&nbsp 26），表示选项的个数。后面n行，每行包括一个选项中的表达式。这n个选项的标号分别是A，B，C，D……\n\n&nbsp &nbsp &nbsp &nbsp 输入中的表达式的长度都不超过50个字符，而且保证选项中总有表达式和题干中的表达式是等价的。\n','&nbsp &nbsp &nbsp &nbsp 输出包括一行，这一行包括一系列选项的标号，表示哪些选项是和题干中的表达式等价的。选项的标号按照字母顺序排列，而且之间没有空格。\n','( a + 1) ^2\n3\n(a-1)^2+4*a\na  + 1+ a\na^2 + 2 * a * 1 + 1^2 + 10 -10 +a -a\n','AC\n','0','','NOIp2005&nbsp 第四题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1063,'VIJOS-P1004','&nbsp &nbsp &nbsp Adam和Eve玩一个游戏，他们先从1900.1.1到2001.11.4这个日期之间随意抽取一个日期出来。然后他们轮流对这个日期进行操作：\n\n&nbsp &nbsp &nbsp 1&nbsp ：&nbsp 把日期的天数加1，例如1900.1.1变到1900.1.2\n\n&nbsp &nbsp &nbsp 2&nbsp ：&nbsp 把月份加1，例如：1900.1.1变到1900.2.1\n\n&nbsp &nbsp &nbsp 其中如果天数超过应有天数则日期变更到下个月的第1天。月份超过12则变到下一年的1月。而且进行操作二的时候，如果有这样的日期：1900.1.31，则变成了1900.2.31，这样的操作是非法的，我们不允许这样做。而且所有的操作均要考虑历法和闰年的规定。\n\n&nbsp &nbsp &nbsp 谁先将日期变到2001.11.4谁就赢了。\n\n&nbsp &nbsp &nbsp 每次游戏都是Adam先操作，问他有没有必胜策略？\n','&nbsp &nbsp 一个测试点。多组数据。\n&nbsp &nbsp 第一行为数据组数。\n&nbsp &nbsp 接下来一行X&nbsp Y&nbsp Z表示X年Y月Z日\n','&nbsp &nbsp 输出“YES”or“NO”表示亚当是否有必胜策略。&nbsp \n','3\n2001 11 3\n2001 11 2\n2001 10 3\n','YES\nNO\nNO\n','0','&nbsp &nbsp 建议先把所有情况都算出来^_^\n','From&nbsp ZJU\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1064,'VIJOS-P1005','他最喜欢的是数字的无穷序列，结果是把所有的自然数按升序排列。这个序列开始是：&nbsp 1234567891011121314...&nbsp 我们叫序列&nbsp S。然后&nbsp S[1]&nbsp =&nbsp 1,&nbsp S[2]&nbsp =&nbsp 2,&nbsp ...&nbsp ,&nbsp S[10]&nbsp =&nbsp 1,&nbsp S[11]&nbsp =&nbsp 0,&nbsp ...&nbsp ,&nbsp 以此类推。&nbsp \nGeorge&nbsp 现有一个数字系列&nbsp A&nbsp ，他想知道在S中最早出现的位置。帮助他解决这个难题。\n','输入文件包含&nbsp A&nbsp -&nbsp 给出的数字系列。位数不超过&nbsp 200。没有空格。\n','输出一个整数。-&nbsp 最小的&nbsp k&nbsp ，使&nbsp A[1]&nbsp =&nbsp S[k],&nbsp A[2]&nbsp =&nbsp S[k+1],&nbsp ...&nbsp A[len(A)]&nbsp =&nbsp S[k&nbsp +&nbsp len(A)&nbsp －1],&nbsp len(A)&nbsp 表示&nbsp A&nbsp 的长度。\n','101\n','10\n','0','','Ural&nbsp State&nbsp University&nbsp Problem&nbsp Archive\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1065,'VIJOS-P1006','&nbsp &nbsp &nbsp &nbsp 这一天，他来到了一座深山的山脚下，因为只有这座深山中的一位隐者才知道这种药草的所在。但是上山的路错综复杂，由于小小猪的病情，晴天小猪想找一条需时最少的路到达山顶，但现在它一头雾水，所以向你求助。\n&nbsp &nbsp &nbsp &nbsp 山用一个三角形表示，从山顶依次向下有1段、2段、3段等山路，每一段用一个数字T（1&lt; =T&lt; =100）表示，代表晴天小猪在这一段山路上需要爬的时间，每一次它都可以朝左、右、左上、右上四个方向走（**注意**：在任意一层的第一段也可以走到本层的最后一段或上一层的最后一段）。\n&nbsp &nbsp &nbsp &nbsp 晴天小猪从山的左下角出发，目的地为山顶，即隐者的小屋。\n','&nbsp &nbsp &nbsp &nbsp 第一行有一个数n（2&lt; =n&lt; =1000），表示山的高度。\n&nbsp &nbsp &nbsp &nbsp 从第二行至第n+1行，第i+1行有i个数，每个数表示晴天小猪在这一段山路上需要爬的时间。\n','&nbsp &nbsp &nbsp &nbsp 一个数，即晴天小猪所需要的最短时间。\n','5\n1\n2 3\n4 5 6\n10 1 7 8\n1 1 4 5 6\n','10\n','0','在山的两侧的走法略有特殊，请自己模拟一下，开始我自己都弄错了……\n','Sunnypig\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1066,'VIJOS-P1007','求出绳子的长度\n','第1行两个数：整数N(1&lt; =N&lt; =100)和实数R。\n接下来N行按逆时针顺序给出N个钉子中心的坐标\n坐标的绝对值不超过100。\n','一个数，绳子的长度，精确到小数点后2位。\n','4 1\n0.0 0.0\n2.0 0.0\n2.0 2.0\n0.0 2.0\n','14.28\n','0','如果你用比较复杂的方法AC了，请想一想有没有更加简便的方法。\n','Ural\n','2017-04-30 04:23:46',0,128,'N',0,0,0),(1067,'VIJOS-P1008','&nbsp &nbsp &nbsp &nbsp 佳佳刚进高中，在军训的时候，由于佳佳吃苦耐劳，很快得到了教官的赏识，成为了“小教官”。在军训结束的那天晚上，佳佳被命令组织同学们进行篝火晚会。一共有n个同学，编号从1到n。一开始，同学们按照1，2，……，n的顺序坐成一圈，而实际上每个人都有两个最希望相邻的同学。如何下命令调整同学的次序，形成新的一个圈，使之符合同学们的意愿，成为摆在佳佳面前的一大难题。\n\n&nbsp &nbsp &nbsp &nbsp 佳佳可向同学们下达命令，每一个命令的形式如下：\n\n&nbsp &nbsp &nbsp &nbsp (b1,&nbsp b2,...&nbsp bm&nbsp -1,&nbsp bm)\n\n&nbsp &nbsp &nbsp &nbsp 这里m的值是由佳佳决定的，每次命令m的值都可以不同。这个命令的作用是移动编号是b1，b2，……&nbsp bm&nbsp –1，bm的这m个同学的位置。要求b1换到b2的位置上，b2换到b3的位置上，……，要求bm换到b1的位置上。\n\n&nbsp &nbsp &nbsp &nbsp 执行每个命令都需要一些代价。我们假定如果一个命令要移动m个人的位置，那么这个命令的代价就是m。我们需要佳佳用最少的总代价实现同学们的意愿，你能帮助佳佳吗?\n\n&nbsp &nbsp &nbsp &nbsp 对于30%的数据，n&nbsp &lt; =&nbsp 1000；\n\n&nbsp &nbsp &nbsp &nbsp 对于全部的数据，n&nbsp &lt; =&nbsp 50000。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行是一个整数n（3&nbsp &lt; =&nbsp n&nbsp &lt; =&nbsp 50000），表示一共有n个同学。其后n行每行包括两个不同的正整数，以一个空格隔开，分别表示编号是1的同学最希望相邻的两个同学的编号，编号是2的同学最希望相邻的两个同学的编号，……，编号是n的同学最希望相邻的两个同学的编号。\n','&nbsp &nbsp &nbsp &nbsp 输出包括一行，这一行只包含一个整数，为最小的总代价。如果无论怎么调整都不能符合每个同学的愿望，则输出-1。\n','4\n3 4\n4 3\n1 2\n1 2\n','2\n','0','','NOIp2005&nbsp 第三题\n','2017-04-30 04:23:46',1,128,'N',0,0,0),(1068,'VIJOS-P1009','&nbsp &nbsp &nbsp &nbsp 话说西汉时期，汉武帝刘彻派遣张骞出使西域，欲同月氏国结交而共驱匈奴。同时，月氏国也欲同大汉结交，也派出使者康破伦出使大汉，可是因为月氏国对于大汉的认知甚少，康破伦同样向西出使大汉。一开始，张骞从大汉出发，康破伦从月氏国出发，两人都在同一纬度线上，张骞所处的经度为x，康破伦所处的经度为y；接下来，两人同时向西走，而且只能向西走，张骞每天走m公里，康破伦每天走n公里，且每天走路的速度不变，也不停下来休息；这样两人就在这一条长为L的纬度线上一直向西走。问：过了多少天之后张骞和康破伦会碰面，并磋商两国结交之事（所谓碰面，是指两人处在同一经度上）。\n&nbsp &nbsp &nbsp &nbsp 这下，康熙犯难了，他还是个不大的青年，怎么可能做得出这么难的题目；但是，他又是统领全国的帝皇，怎么能在老师面前丢这么大一个面子。康熙想：不行！一定得把这个题做出来！（然后就有了下面这段记录）\n&nbsp &nbsp &nbsp &nbsp 第一天，……\n&nbsp &nbsp &nbsp &nbsp 第二天，…………\n&nbsp &nbsp &nbsp &nbsp 第三天，………………\n&nbsp &nbsp &nbsp &nbsp 第四天，……………………\n&nbsp &nbsp &nbsp &nbsp 第五天，…………………………\n&nbsp &nbsp &nbsp &nbsp 第六天，………………………………\n&nbsp &nbsp &nbsp &nbsp 第七天，……………………………………！！！！！！！\n&nbsp &nbsp &nbsp &nbsp 啊！第七天，康熙终于打了7个感叹号，得出了一个重要的结论！！！！！那就是——做不出来。（汗），没办法，他只有请教你，他的挚友，帮他解决这一难题。康熙答应你，如果你把这一题做出来了，你将得到御赐赏银一万万两！$$$$$$$$-$$$$$$$$。为了改变你生活的现状——衣衫褴褛、闻鼠起舞、蟑螂为伴，你下定了决心——我一定得把这题解决！\n','&nbsp &nbsp &nbsp &nbsp 输入只包括一行5个整数x，y，m，n，L\n&nbsp &nbsp &nbsp &nbsp 其中0&lt; x≠y&nbsp &lt; &nbsp =2000000000，0&nbsp &lt; &nbsp m、n&nbsp &lt; &nbsp =2000000000，0&nbsp &lt; &nbsp L&nbsp &lt; &nbsp =2100000000。\n','&nbsp &nbsp &nbsp &nbsp 输出碰面所需要的天数，如果永远不可能碰面则输出一行&quot; Impossible&quot; 。\n','1 2 3 4 5\n','4\n','0','','From&nbsp PKU&nbsp 1061\n','2017-04-30 04:26:32',0,128,'N',0,0,0),(1069,'VIJOS-P1010','&nbsp &nbsp &nbsp &nbsp 话说乾隆带着他的宰相刘罗锅和你出巡江南，被杭州城府邀请去听戏，至于什么戏，那就不知了。乾隆很高兴，撒酒与君臣共享。三更欲回住处，可是乾隆这人挺怪，他首先要到西湖边散散步，而且命令不准有人跟着他。\n&nbsp &nbsp &nbsp &nbsp 小醉，步于西湖岸，停于断桥前，突闻琴声悠悠，歌儿婉婉。这乐曲不哀伤不愁怅，少了一分怨女的羁绊，多了一分少女的期盼。乾隆走上前去，视其背影，为一女子手抚古琴，悠悠而唱。可是这么晚了，小女怎么还不回家呢，莫非是她起早床？乾隆走上前去，小声问道：“伊为何未宿？”，小女沉默片刻，转身而来。顿时，顿时，顿时！！！！！乾隆惊呆了！！！！哇！！！！噻！！！！！！这人，这伊！！！！原来！！！！！！！不是一个美女（狂汗ing）。小女并未回答她的话，只是与乾隆侃了侃诗。乾隆兴哉，问其曰：“不知偶能助伊否？”，小女曰：“偶无所以助，且有一事相求，愿君能解之。”\n&nbsp &nbsp &nbsp &nbsp 乾隆一看，立刻晕到在地，片刻而起，曰：“明日必解之”，且去。\n&nbsp &nbsp &nbsp &nbsp 回到家中，乾隆夜召你“入寝”，曰：“如此姑娘，如此情调，如此罗曼蒂克，竟然丢一个如此煞风景之问”，一边发气，一边把这个问题交给你。你一看，顿然发现，原来是用蝌蚪文写的：\n&nbsp &nbsp &nbsp &nbsp Problems&nbsp involving&nbsp the&nbsp computation&nbsp of&nbsp exact&nbsp values&nbsp of&nbsp very&nbsp large&nbsp magnitude&nbsp and&nbsp precision&nbsp are&nbsp common.&nbsp For&nbsp example,&nbsp the&nbsp computation&nbsp of&nbsp the&nbsp national&nbsp debt&nbsp is&nbsp a&nbsp taxing&nbsp experience&nbsp for&nbsp many&nbsp computer&nbsp systems.&nbsp \n&nbsp &nbsp &nbsp &nbsp This&nbsp problem&nbsp requires&nbsp that&nbsp you&nbsp write&nbsp a&nbsp program&nbsp to&nbsp compute&nbsp the&nbsp exact&nbsp value&nbsp of&nbsp Rn&nbsp where&nbsp R&nbsp is&nbsp a&nbsp real&nbsp number&nbsp (&nbsp 0.0&nbsp &lt; &nbsp R&nbsp &lt; =&nbsp 9999.9)&nbsp and&nbsp n&nbsp is&nbsp an&nbsp integer&nbsp such&nbsp that&nbsp 0&nbsp &lt; &nbsp n&nbsp &lt; =&nbsp 200.&nbsp \n&nbsp &nbsp &nbsp &nbsp 此时的你，已经是皇帝身边的小太监，自然有必要为皇上解决此题。\n','&nbsp &nbsp &nbsp &nbsp The&nbsp input&nbsp will&nbsp consist&nbsp of&nbsp a&nbsp set&nbsp (less&nbsp than&nbsp 11)&nbsp of&nbsp pairs&nbsp of&nbsp values&nbsp for&nbsp R&nbsp and&nbsp n.&nbsp The&nbsp R&nbsp value&nbsp will&nbsp occupy&nbsp columns&nbsp 1&nbsp through&nbsp 6,&nbsp and&nbsp the&nbsp n&nbsp value&nbsp will&nbsp be&nbsp in&nbsp columns&nbsp 8&nbsp and&nbsp 9.\n','&nbsp &nbsp &nbsp &nbsp The&nbsp output&nbsp will&nbsp consist&nbsp of&nbsp one&nbsp line&nbsp for&nbsp each&nbsp line&nbsp of&nbsp input&nbsp giving&nbsp the&nbsp exact&nbsp value&nbsp of&nbsp R^n.&nbsp Leading&nbsp zeros&nbsp should&nbsp be&nbsp suppressed&nbsp in&nbsp the&nbsp output.&nbsp Insignificant&nbsp trailing&nbsp zeros&nbsp must&nbsp not&nbsp be&nbsp printed.&nbsp Don\'t&nbsp print&nbsp the&nbsp decimal&nbsp point&nbsp if&nbsp the&nbsp result&nbsp is&nbsp an&nbsp integer.\n','95.123  2\n0.4321  5\n5.1234  7\n6.7592  3\n98.999  5\n1.0100 10\n','9048.385129\n.01506334182914325601\n92663.3181348508776705891407804544\n308.806114738688\n9509420210.697891990494999\n1.10462212541120451001\n','0','','Vivian&nbsp Snow\n','2017-04-30 04:26:32',0,128,'N',0,0,0),(1070,'VIJOS-P1011','&nbsp &nbsp &nbsp &nbsp 顺治喜欢滑雪，这并不奇怪，&nbsp 因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待太监们来载你。顺治想知道载一个区域中最长的滑坡。\n&nbsp &nbsp &nbsp &nbsp 区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子：\n\n\n&nbsp &nbsp &nbsp &nbsp &nbsp 1&nbsp &nbsp 2&nbsp &nbsp 3&nbsp &nbsp 4&nbsp 5\n&nbsp &nbsp &nbsp &nbsp 16&nbsp 17&nbsp 18&nbsp 19&nbsp 6\n&nbsp &nbsp &nbsp &nbsp 15&nbsp 24&nbsp 25&nbsp 20&nbsp 7\n&nbsp &nbsp &nbsp &nbsp 14&nbsp 23&nbsp 22&nbsp 21&nbsp 8\n&nbsp &nbsp &nbsp &nbsp 13&nbsp 12&nbsp 11&nbsp 10&nbsp 9\n\n&nbsp &nbsp &nbsp &nbsp 顺治可以从某个点滑向上下左右相邻四个点之一，当且仅当高度减小。在上面的例子中，一条可滑行的滑坡为24-17-16-1。当然25-24-23-...-3-2-1更长。事实上，这是最长的一条。\n','&nbsp &nbsp &nbsp &nbsp 输入的第一行表示区域的行数R和列数C(1&nbsp &lt; =&nbsp R,C&nbsp &lt; =&nbsp 500)。下面是R行，每行有C个整数，代表高度h，0&lt; =h&lt; =10000。\n','&nbsp &nbsp &nbsp &nbsp 输出最长区域的长度。\n','5 5\n1 2 3 4 5\n16 17 18 19 6\n15 24 25 20 7\n14 23 22 21 8\n13 12 11 10 9\n','25\n','0','','Vivian&nbsp Snow\n','2017-04-30 04:26:32',0,128,'N',0,0,0),(1071,'VIJOS-P1012','&nbsp &nbsp &nbsp &nbsp 话说雍正为了实施促进城市间沟通的政策，他计划在所有的大城市里挑选两个城市，在两个城市之间修建一条运河，这条运河要求是笔直的，以加强这两个城市的经济往来。但雍正希望这条运河长度越短越好，他请来了宰相和大学士帮他解决这个问题——到底挑哪两个大城市，在其间建造运河，使得其长度最小，最小为多少？可是经过长时间的计算和判断，仍然没有得出结果。此时，雍正想到了当初为康熙解决难题的你，是如此的智慧，如此的聪明绝顶。他亲自来到茅厕，找到了你（你当时已然是一个扫厕所的了），希望你能帮他解决这个问题，必定“厚”谢。你欣然答应了。\n&nbsp &nbsp &nbsp &nbsp 雍正将大致的情况告诉了你，并且说：大清一共有n个大城市，所有的大城市都不在同一个地点，同时我们对这n个城市从1到n进行编号；对于一个城市k，他有两个属性，一个是Xk，一个是Yk，分别表示这个城市所处的经度和纬度。请你告诉他问题的结果：L，即运河长度。（你可以假定地球是平面的）\n','&nbsp &nbsp &nbsp &nbsp 第1行，一个整数n。\n&nbsp &nbsp &nbsp &nbsp 从第2行到n+1行，按照i从小到大顺序，每行两个整数Xi，Yi，代表编号为i的城市的经度和纬度。\n&nbsp &nbsp &nbsp &nbsp 其中2&lt; =n&nbsp &lt; =100000，1&lt; =Xi,Yi&lt; 2^31。\n','&nbsp &nbsp &nbsp &nbsp 一个实数L（保留三位小数）。\n','2\n1 1\n2 2\n','1.414\n','0','','Vivian&nbsp Snow\n','2017-04-30 04:27:14',0,128,'N',0,0,0),(1072,'A MST Problem','<p>It is just a mining spanning tree ( 最小生成树 ) problem, what makes you a little difficult is that you are in a 3D space.</p>','<div>The first line of the input contains the number of test cases in the file. And t he first line of each case</div>\n<div>contains one integer numbers n(0&lt;n&lt;30) specifying the number of the point . The n next n line s, each line</div>\n<div>contain s Three Integer Numbers xi,yi and zi, indicating the position of point i.</div>','<p>For each test case, output a line with the answer, which should accurately rounded to two decimals .</p>\n<p></p>','2\n2\n1 1 0\n2 2 0\n3\n1 2 3\n0 0 0\n1 1 1','1.41\n3.97','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1073,'Border ','<div>You are to write a program that draws a border around a closed path into a bitmap, as displayed in the</div>\n<div>following figure:</div>\n<div><img width=\"303\" height=\"306\" alt=\"\" src=\"/admin/../upload/pimg1073_1.png\" /></div>\n<div>The path is closed and runs along the grid lines, i.e. between the squares of the grid. The path runs</div>\n<div>counter-clockwise, so if following the path is considered as going &rdquo; forward &rdquo; , the border pixels are always</div>\n<div>to the &rdquo; right &rdquo; of the path. The bitmap always covers 32 by 32 squares and has its lower left corner at (0,0).</div>\n<div>You can safely assume that the path never touches the bounding rectangle of the bitmap and never</div>\n<div>touches or crosses itself. Note that a bit gets set if it is on the outside of the area surrounded by the path</div>\n<div>and if at least one of its edges belongs to the path, but not if only one of its corners is in the path. (A look</div>\n<div>at the convex corners in the figure should clarify that statement.)</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. Each test case that follows</div>\n<div>consists of two lines. The first line of each case contains two integer numbers x and y specifying the</div>\n<div>starting point of the path. The second line contains a string of variable length. Every letter in the string</div>\n<div>symbolizes a move of length one along the grid. Only the letters `W\' (``west\'\'), `E\' (``east\'\'), `N\' (``north\'\'),</div>\n<div>`S\' (``south\'\'), and `.\' (``end of path\'\', no move) appear in the string. The end-of-path character (`.\') is&nbsp;immediately followed by the end of the line.</div>\n<div></div>\n<p></p>','<div>For each test case, output a line with the number of the case (`Bitmap #1\', `Bitmap #2\', etc.). For each</div>\n<div>row of the bitmap from top to bottom, print a line where you print a character for every bit in that row</div>\n<div>from left to right. Print an uppercase `X\' for set bits and a period `.\' for unset bits. Output a blank line</div>\n<div>after each bitmap.</div>\n<p></p>','1\n2 1\nEENNWNENWWWSSSES.','Bitmap #1\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n................................\n.XXX............................\nX...X...........................\nX..X............................\nX...X...........................\n.X..X...........................\n..XX............................\n','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1074,'C hicken and rabbit s','<div>Chicken and rabbits are in a same cage. As we all know, chicken has two legs but rabbit has four. Now</div>\n<div>we know the number of legs in the cage is A, please tell me how many animals may in the cage at least</div>\n<div>and at most.</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. Each test case that follows</div>\n<div>consists of one lines. each case contains only one integer numbers A specifying the total legs in the</div>\n<div>cage .</div>\n<p></p>','<p>For each test case, print a line contains the answer</p>\n<p></p>','2\n3\n20','0 0\n5 10','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1075,'Diamond ','<div>Diamond mine is a mini-game which is played on an 8 * 8 board as you can see below.</div>\n<div><img width=\"219\" height=\"213\" alt=\"\" src=\"/admin/../upload/pimg1075_1.png\" /></div>\n<div><img width=\"0\" height=\"0\" alt=\"\" src=\"/admin/../upload/pimg1075_2.png\" /></div>\n<div>The board is filled with different colors of diamonds. The player can make one move at a time. A move is</div>\n<div>legal if it swaps two adjacent diamonds(not diagonally) and after that, there are three or more adjacent</div>\n<div>diamonds in a row or column with the same color. Those diamonds will be taken away and new</div>\n<div>diamonds will be put in their positions. The game continues until no legal moves exist.</div>\n<div>Given the board description. You are going to determine whether a move is legal.</div>\n<p></p>','<div>The input contains several cases. Each case has exactly 9 lines. The first 8 lines each contains a string</div>\n<div>of 8 characters. The characters are \'R\'(Red), \'O\'(Orange), \'G\'(Green), \'P\'(Purple), \'W\'(White), \'Y\'(Yellow)</div>\n<div>or \'B\'(Blue). All characters are uppercase. No 3 diamonds of the same color are initially in adjacent</div>\n<div>positions in a row or column. The last line has 4 integers in the form &quot; row1 column1 row2 column2&quot;</div>\n<div>describing the postions of the 2 diamonds that the player wants to swap. Rows are marked 1 to 8</div>\n<div>increasingly from top to bottom while columns from left to right. Input is terminated by EOF.</div>\n<p></p>','<p>For each case, output &quot;Ok!&quot; if the move is legal or &quot;Illegal move!&quot; if it is not.</p>\n<p></p>','PBPOWBGW\nRRPRYWWP\nYGBYYGPP\nOWYGGRWB\nGBBGBGGR\nGBWPPORG\nPPGORWOG\nWYWGYWBY\n4 3 3 3\nPBPOWBGW\nRRPRYWWP\nYGBYYGPP\nOWYGGRWB\nGBBGBGGR\nGBWPPORG\nPPGORWOG\nWYWGYWBY\n5 5 6 5','Ok!\nIllegal move!','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1076,'Easy List Operations','<div>A list is a sequence of or more elements, expressed in this form: [a 1 , a 2 , a 3 , ... , a n ], where each a i</div>\n<div>is or more consecutive digits or lowercase letters. i.e. each list begins with a left square bracket,</div>\n<div>then zero or more elements separated by a single comma, followed by a right square bracket. There will</div>\n<div>be no whitespace characters (spaces, TABs etc) within a list.</div>\n<div>In this problem, we use two list operations: append (++) and remove (--).</div>\n<div>1. A ++ B: append elements in B to the end of A.</div>\n<div>2. A -- B: remove all the elements in B, from A. If something appears more than once in B, remove it that</div>\n<div>many times in A. If there are many equal elements in A to choose from, remove them from left to right</div>\n<div>(until all occurrences are removed, or there is no need to remove more elements).</div>\n<div>Your task is to write a calculator, evaluating simple expressions or the form &quot;list1 ++ list2&quot; or &quot;list1 --</div>\n<div>list2&quot;.</div>\n<p></p>','<div>There will be at most 10 expressions, one in each line, each having the form &quot;list1 ++ list2&quot; or &quot;list1 --</div>\n<div>list2&quot;, with no more than 80 characters in total (not counting the newline character). There will be exactly</div>\n<div>two spaces in each line: one before and one after the operator. Input ends with a single <strong>dot</strong>. The input is</div>\n<div>guaranteed to satisfy the restrictions stated above.</div>\n<p></p>','<p>For each expression, print its result on a single line.</p>\n<p></p>','[1,2,3] ++ [1,2,3]\n[a,b,c,t,d,e,t,x,y,t] -- [t]\n[a,b,c,t,d,e,t,x,y,t] -- [t,t,t,t]\n[123] ++ [456]\n.','[1,2,3,1,2,3]\n[a,b,c,d,e,t,x,y,t]\n[a,b,c,d,e,x,y]\n[123,456]','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1077,'Fortun e Test','<div>A lot of people have played fortune Test(or called RP Test) before. Let &rsquo; s create a new Test below.</div>\n<div>Suppose the worth of a=1, b=4,c=9 &hellip; and z=26^2. Then abc can describe as 149,and abd describe as</div>\n<div>1416. As it is too large ,we take it mod 101 as ours fortune worth. S o abd has only 2 RP. Now I give you</div>\n<div>a name, please tell me the worth of it.</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. Each test case that follows</div>\n<div>consists of one lines. each case contains only one string s specifying a person &rsquo; s name, which only</div>\n<div>contains lower-case .</div>\n<p></p>','<p>For each test case, print a line contains the answer.</p>\n<p></p>','1\na','1','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1078,'Give me the answer','<div>Farmer John commanded his cows to search for different sets of numbers that sum to a given number.</div>\n<div>The cows use only numbers that are an integer power of 2. Here are the possible sets of numbers that</div>\n<div>sum to 7:</div>\n<div>1) 1+1+1+1+1+1+1</div>\n<div>2) 1+1+1+1+1+2</div>\n<div>3) 1+1+1+2+2</div>\n<div>4) 1+1+1+4</div>\n<div>5) 1+2+2+2</div>\n<div>6) 1+2+4</div>\n<div>Help FJ count all possible representations for a given integer N (1 &lt;= N &lt;= 1 ,000,000)</div>\n<p></p>','<div>The first line of the input contains the number of test cases in the file. And t he first line of each case</div>\n<div>contains one integer numbers n</div>\n<p></p>','<p>For each test case, output a line with the ans % 1000000000.</p>\n<p></p>','1\n7','6','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1079,'Hidden Number','<p>Your job is to find out the secret number hidden in a matrix, each of whose element is a digit (\'0\'-\'9\') or a letter (\'A\'-\'Z\'). You can see an example matrix in Figure 1.&nbsp;</p>\n<p>&nbsp;<img width=\"497\" height=\"337\" alt=\"\" src=\"/admin/../upload/pimg1079_1.png\" /></p>\n<p></p>\n<div><span style=\"font-size:12.0pt;\">The hidden number and other non-secret ones are coded in a matrix as sequences of digits in a decimal format. You should only consider sequences of digits D1 D2 ... Dn such that Dk+1 (1 &lt;= k &lt; n) is either right next to or immediately below Dk in the matrix. The secret you are seeking is the largest number coded in this manner. </span></div>\n<div><span style=\"font-size:12.0pt;\">Four coded numbers in the matrix in Figure 1, i.e., 908820, 23140037, 23900037, and 9930, are depicted in Figure 2. As you may see, in general, two or more coded numbers may share a common subsequence. In this case, the secret number is 23900037, which is the largest among the set of all coded numbers in the matrix.&nbsp;</span></div>\n<div></div>\n<div><img width=\"542\" height=\"419\" alt=\"\" src=\"/admin/../upload/pimg1079_2.png\" /></div>\n<div>In contrast, the sequences illustrated in Figure 3 should be excluded: 908A2 includes a letter; the fifth digit of 23149930 is above the fourth; the third digit of 90037 is below right of the second.</div>\n<div></div>\n<div><img width=\"563\" height=\"346\" alt=\"\" src=\"/admin/../upload/pimg1079_3.png\" /></div>\n<div>Write a program to figure out the secret number from a given matrix.</div>\n<p class=\"MsoNormal\"><span lang=\"EN-US\" style=\"font-size:12.0pt;font-family:宋体;mso-bidi-font-family:宋体\"><o:p></o:p></span></p>\n<div></div>\n<p class=\"MsoNormal\"><span lang=\"EN-US\" style=\"font-size:12.0pt;font-family:宋体;mso-bidi-font-family:宋体\"><o:p></o:p></span></p>\n<div></div>\n<p></p>','<div>The input consists of multiple data sets, each data set representing a matrix. The format of each data</div>\n<div>set is as follows.</div>\n<div>W H</div>\n<div>C11C12 ... C1W</div>\n<div>C21C22 ... C2W</div>\n<div>...</div>\n<div>CH1CH2 ... CHW</div>\n<div>In the first line of a data set, two positive integers W and H are given. W indicates the width (the number</div>\n<div>of columns) of the matrix, and H indicates the height (the number of rows) of the matrix. W+H is less</div>\n<div>than or equal to 70.</div>\n<div>H lines follow the first line, each of which corresponds to a row of the matrix in top to bottom order. The</div>\n<div>i-th row consists of W characters Ci1Ci2 ... CiW in left to right order. You may assume that the matrix</div>\n<div>includes at least one non-zero digit.</div>\n<div>Following the last data set, two zeros in a line indicate the end of the input.</div>\n<p></p>','<p>For each data set, print the hidden number on a line. Leading zeros should be suppressed.</p>\n<p></p>','7 4\n9R2A993\n0E314A0\n8A900DE\n820R037\n6 7\nJH03HE\nID7722\n0DA1AH\n30C9G5\n99971A\nCA7EAI\nAHLBEM\n20 2\nA1234567891234CBDEGH\nBDEDF908034265091499\n0 0\n','23900037\n771971\n12345908034265091499','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1080,'I think it\'s hard','<div>Xiao Ming is only seven years old, Now I give him some numbers, and ask him what is the second</div>\n<div>largest sum if he can choose a part of them. For example, if I give him 1 、 2 、 3 ， then he should tell</div>\n<div>me 5 as 6 is the largest and 5 is the second. I think it is too hard for him, isn &rsquo; t it?</div>\n<p></p>','<div>Standard input will contain multiple test cases. The first line of the input is a single integer T (1 &lt;= T &lt;=</div>\n<div>10) which is the number of test cases. And it will be followed by T consecutive test cases.</div>\n<div>Each test case starts with a line containing an integer N (1&lt;N&lt;10) , the number I give Xiao Ming . The</div>\n<div>second line contains N Integer numbers ai (-10&lt;ai&lt;10),</div>\n<p></p>','<p>For each test case, output the answer.</p>\n<p></p>','2\n3\n1 2 3\n4\n0 1 2 3','5\n5','0','','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1081,'Just Pour the Water','<div>Shirly is a very clever girl. Now she has two containers (A and B), each with some water. Every minute,</div>\n<div>she pours half of the water in A into B, and simultaneous pours half of the water in B into A. As the</div>\n<div>pouring continues, she finds it is very easy to calculate the amount of water in A and B at any time. It is</div>\n<div>really an easy job :).</div>\n<div>But now Shirly wants to know how to calculate the amount of water in each container if there are more</div>\n<div>than two containers. Then the problem becomes challenging.</div>\n<div>Now Shirly has N (2 &lt;= N &lt;= 20) containers (numbered from 1 to N ). Every minute, each container is</div>\n<div>supposed to pour water into another K containers ( K may vary for different containers). Then the water</div>\n<div>will be evenly divided into K portions and accordingly poured into anther K containers. Now the question</div>\n<div>is: how much water exists in each container at some specified time?</div>\n<div>For example, container 1 is specified to pour its water into container 1, 2, 3. Then in every minute,</div>\n<div>container 1 will pour its 1/3 of its water into container 1, 2, 3 separately (actually, 1/3 is poured back to</div>\n<div>itself, this is allowed by the rule of the game).</div>\n<p></p>','<div>Standard input will contain multiple test cases. The first line of the input is a single integer T (1 &lt;= T &lt;=</div>\n<div>10) which is the number of test cases. And it will be followed by T consecutive test cases.</div>\n<div>Each test case starts with a line containing an integer N , the number of containers. The second line</div>\n<div>contains N floating numbers, denoting the initial water in each container. The following N lines describe</div>\n<div>the relations that one container(from 1 to N ) will pour water into the others. Each line starts with an</div>\n<div>integer K (0 &lt;= K &lt;= N ) followed by K integers. Each integer ([1, N ]) represents a container that should</div>\n<div>pour water into by the current container. The last line is an integer M (1&lt;= M &lt;= 1,000,000,000) denoting</div>\n<div>the pouring will continue for M minutes.</div>\n<p></p>','<div>For each test case, output contains N floating numbers to two decimal places, the amount of water</div>\n<div>remaining in each container after the pouring in one line separated by one space. There is no space at</div>\n<div>the end of the line.</div>\n<p></p>','1\n2\n100.00 100.00\n1 2\n2 1 2\n2','75.00 125.00','0','<div>the capacity of the container is not limited and all the pouring at every minute is processed at the</div>\n<div>same time.</div>\n<p></p>','20100831湖工大校赛','2017-04-30 15:03:39',1,32,'N',1,1,0),(1082,'2^k进制数','<p><font face=\"Times New Roman\">设r是个2^k 进制数，并满足以下条件： <br />\n（1）r至少是个2位的2^k 进制数。 <br />\n（2）作为2^k 进制数，除最后一位外，r的每一位严格小于它右边相邻的那一位。 <br />\n（3）将r转换为2进制数q后，则q的总位数不超过w。 <br />\n在这里，正整数k（1&le;k&le;9）和w（k〈w&le;30000）是事先给定的。 <br />\n<br />\n问：满足上述条件的不同的r共有多少个？ <br />\n我们再从另一角度作些解释：设S是长度为w 的01字符串（即字符串S由w个&ldquo;0&rdquo;或&ldquo;1&rdquo;组成），S对应于上述条件（3）中的q。将S从右起划分为若干个长度为k 的段，每段对应一位2^k进制的数，如果S至少可分成2段，则S所对应的二进制数又可以转换为上述的2^k 进制数r。 <br />\n例：设k=3，w=7。则r是个八进制数（2^3=8）。由于w=7，长度为7的01字符串按3位一段分，可分为3段（即1，3，3，左边第一段只有一个二进制位），则满足条件的八进制数有： <br />\n2位数：高位为1：6个（即12，13，14，15，16，17），高位为2：5个，&hellip;，高位为6：1个（即67）。共6+5+&hellip;+1=21个。 <br />\n3位数：高位只能是1，第2位为2：5个（即123，124，125，126，127），第2位为3：4个，&hellip;，第2位为6：1个（即167）。共5+4+&hellip;+1=15个。 <br />\n所以，满足要求的r共有36个。 </font></p>','<p><font face=\"Times New Roman\">只有1行，为两个正整数，用一个空格隔开： <br />\nk w </font></p>','<p><font face=\"Times New Roman\">1行，是一个正整数，为所求的计算结果，即满足条件的不同的r的个数（用十进制数表示），要求最高位不得为0，各数字之间不得插入数字以外的其他字符（例如空格、换行符、逗号等）。 <br />\n（提示：作为结果的正整数可能很大，但不会超过200位） </font></p>','3  7','36','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1083,'Cylinder','<p><font face=\"Times New Roman\">Using a sheet of paper and scissors, you can cut out two faces to form a cylinder in the following way: <br />\n<br />\n<br />\nCut the paper horizontally (parallel to the shorter side) to get two rectangular parts. <br />\n<br />\nFrom the first part, cut out a circle of maximum radius. The circle will form the bottom of the cylinder. <br />\n<br />\nRoll the second part up in such a way that it has a perimeter of equal length with the circle\'s circumference, and attach one end of the roll to the circle. Note that the roll may have some overlapping parts in order to get the required length of the perimeter. <br />\n<br />\nGiven the dimensions of the sheet of paper, can you calculate the biggest possible volume of a cylinder which can be constructed using the procedure described above? </font><br />\n<br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">The input consists of several test cases. Each test case consists of two numbers w and h (1 &le; w &le; h &le; 100), which indicate the width and height of the sheet of paper. <br />\n<br />\nThe last test case is followed by a line containing two zeros. <br />\n</font></p>','<p><font face=\"Times New Roman\">For each test case, print one line with the biggest possible volume of the cylinder. Round this number to 3 places after the decimal point. </font><br />\n<br />\n</p>','10 10\n10 50\n10 30\n0 0\n\n','54.247\n785.398\n412.095\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1084,'C语言考试练习题_一元二次方程','<p><font size=\"3\" face=\"Times New Roman\">解一元二次方程ax^2+bx+c=0的解。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">\n<p><font size=\"3\" face=\"Times New Roman\">a,b,c的值。</font></p>\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">两个根X1和X2，其中X1&gt;=X2。。 <br />\n结果保留两位小数</font></p>','1 5 -2\n','0.37 -5.37\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1085,'C语言考试练习题_保留字母','<p><font size=\"3\" face=\"Times New Roman\">编一个程序，输入一个字符串，将组成字符串的所有非英文字母的字符删除后输出。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个字符串，长度不超过80个字符</font></p>','<p><font size=\"3\" face=\"Times New Roman\">删掉非英文字母后的字符串。</font></p>','abc123+xyz.5\n','abcxyz\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1086,'C语言考试练习题_排列','<p><font size=\"3\" face=\"Times New Roman\">有4个互不相同的数字，输出由其中三个不重复数字组成的排列。 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">4个整数。</font></p>','<pre><p><font size=\"3\" face=\"Times New Roman\">所有排列。</font></p></pre>','1 2 3 4\n','1 2 3\n1 3 2\n2 1 3\n2 3 1\n3 1 2\n3 2 1\n1 2 4\n1 4 2\n2 1 4\n2 4 1\n4 1 2\n4 2 1\n1 3 4\n1 4 3\n3 1 4\n3 4 1\n4 1 3\n4 3 1\n2 3 4\n2 4 3\n3 2 4\n3 4 2\n4 2 3\n4 3 2\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1087,'DNA','<p><font face=\"Times New Roman\">小强从小就喜欢生命科学，他总是好奇花草鸟兽从哪里来的。终于， 小强上中学了，接触到了神圣的名词--DNA.它有一个双螺旋的结构。这让一根筋的小强抓破头皮，&ldquo;要是能画出来就好了&rdquo; 小强喊道。现在就请你帮助他吧</font></p>','<p><font face=\"Times New Roman\">输入包含多组测试数据。第一个整数N（N&lt;=15）,N表示组数，每组数据包含两个整数a,b。a表示一个单位的DNA串的行数，a为奇数且 3&lt;=a&lt;=39。b表示重复度(1&lt;=b&lt;=20)。</font></p>','<p><font face=\"Times New Roman\">输出DNA的形状，每组输出间有一空行。 </font></p>','2\n3 1\n5 4','X X\n X\nX X\n\nX   X\n X X\n  X\n X X\nX   X\n X X\n  X\n X X\nX   X\n X X\n  X\n X X\nX   X\n X X\n  X\n X X\nX   X\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1088,'IP判断','<p><font size=\"3\" face=\"Times New Roman\">在基于Internet的程序中，我们常常需要判断一个IP字符串的合法性。  <br />\n合法的IP是这样的形式：  <br />\nA.B.C.D  <br />\n其中A、B、C、D均为位于[0, 255]中的整数。为了简单起见，我们规定这四个整数中不允许有前导零存在，如001这种情况。  <br />\n现在，请你来完成这个判断程序吧^_^ </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入由多行组成，每行是一个字符串，输入由&ldquo;End of file&rdquo;结束。  <br />\n字符串长度最大为30，且不含空格和不可见字符</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每一个输入，单独输出一行  <br />\n如果该字符串是合法的IP，输出Y，否则，输出N</font></p>','1.2.3.4\na.b.c.d\n267.43.64.12\n12.34.56.bb\n210.43.64.129\n-123.4.5.6','Y\nN\nN\nN\nY\nN','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1089,'Jam的计数法','<p><font size=\"3\" face=\"Times New Roman\">Jam是个喜欢标新立异的科学怪人。他不使用阿拉伯数字计数，而是使用小 写英文字母计数，他觉得这样做，会使世界更加丰富多彩。在他的计数法中，每个数字的位数都是相同的（使用相同个数的字母），英文字母按原先的顺序，排在前 面的字母小于排在它后面的字母。我们把这样的&ldquo;数字&rdquo;称为Jam数字。在Jam数字中，每个字母互不相同，而且从左到右是严格递增的。每次，Jam还指定 使用字母的范围，例如，从2到10，表示只能使用{b,c,d,e,f,g,h,i,j}这些字母。如果再规定位数为5，那么，紧接在Jam数字 &ldquo;bdfij&rdquo;之后的数字应该是&ldquo;bdghi&rdquo;。（如果我们用U、V依次表示Jam数字&ldquo;bdfij&rdquo;与&ldquo;bdghi&rdquo;，则U〈V，且不存在Jam数字 P，使U〈P〈V）。你的任务是：对于从文件读入的一个Jam数字，按顺序输出紧接在后面的5个Jam数字，如果后面没有那么多Jam数字，那么有几个就 输出几个。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">有2行，第1行为3个正整数，用一个空格隔开：  <br />\ns t w  <br />\n（其中s为所使用的最小的字母的序号，t为所使用的最大的字母的序号。w为数字的位数，这3个数满足：1&le;s〈t&le;26, 2&le;w&le;t-s ）  <br />\n第2行为具有w个小写字母的字符串，为一个符合要求的Jam数字。  <br />\n所给的数据都是正确的，不必验证。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">最多为5行，为紧接在输入的Jam数字后面的5个Jam数字，如果后面没有那么多Jam数字，那么有几个就输出几个。每行只输出一个Jam数字，是由w个小写字母组成的字符串，不要有多余的空格。</font></p>','2 10 5\nbdfij','bdghi\nbdghj\nbdgij\nbdhij','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1090,'K-进制数','<p><font size=\"3\" face=\"Times New Roman\">考虑包含N位数字的K-进制数. 定义一个数有效, 如果其K-进制表示不包含两连续的0.</font></p>\n<p><font size=\"3\" face=\"Times New Roman\">考虑包含N位数字的K-进制数. 定义一个数有效, 如果其K-进制表示不包含两连续的0.  <br />\n<br />\n例:  <br />\n1010230 是有效的7位数  <br />\n1000198 无效  <br />\n0001235 不是7位数, 而是4位数.  <br />\n<br />\n给定两个数N和K, 要求计算包含N位数字的有效K-进制数的总数.  <br />\n<br />\n假设2 &lt;= K &lt;= 10; 2 &lt;= N; 4 &lt;= N+K &lt;= 18.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">两个十进制整数N和K</font></p>','<p>十进制表示的结果</p>','2\n10','90','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1091,'Tom数','<p><font face=\"Times New Roman\">正整数的各位数字之和被Tom称为Tom数。求输入数（&lt;2^32）的Tom数!</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行一个整数(&lt;2^32).</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行一个输出,对应该数的各位数之和.</font></p>','12345\n56123\n82\n','15\n17\n10\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1092,'【C语言训练】\"水仙花数\"问题1','<p><font size=\"3\" face=\"Times New Roman\">判断一个数是否为&quot;水仙花数&quot;，所谓&quot;水仙花数&quot;是指这样的一人数：其各位数字的立方和等于该数本身。例如：371是一个&quot;水仙花数&quot;，371=3^3+7^3+1^3. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个三位数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1或者0(1代表此数为水仙花数,0代表此数不是水仙花数)</font></p>','371','1','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1093,'【C语言训练】\"水仙花数\"问题2','<p><font size=\"3\" face=\"Times New Roman\">输出所有的&quot;水仙花数&quot;.所谓&quot;水仙花数&quot;是指这样的一个三位数：其各位数字的立方和等于该数本身。例如：371是一个&quot;水仙花数&quot;，371=3^3+7^3+1^3.</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">输出所有的&quot;水仙花数&quot;(从小到大的顺序输出)</font></p>','','','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1094,'【C语言训练】8除不尽的数','<p><font size=\"3\" face=\"Times New Roman\">一个自然数被8除余1,所得的商被8除也余1, <br />\n再将第二次的商被8除后余7,最后得到一个商为a. <br />\n又知这上自然数被17除余4.所得的商被17除余15, <br />\n最的得到一个商是a的2倍. <br />\n<br />\n求这个自然数.</font></p>','','<p>1993</p>','','','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1095,'【C语言训练】亲密数','<p><font size=\"3\" face=\"Times New Roman\">两个不同的自然数A和B，如果整数A的全部因子(包括1，不包括A本身)之和等于B；且整数B的全部因子(包括1，不包括B本身)之和等于A，则将整数A和B称为亲密数。求3000以内的全部亲密数。</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">3000以内的全部亲密数(输出格式:(A,B)，不加换行，不加分隔符号) <br />\n一对亲密数只输出一次, 小的在前</font></p>','','(220,284)(1184,1210)(2620,2924)','0','<p><font size=\"3\" face=\"Times New Roman\">按照亲密数定义，要判断数a是否有亲密数，只要计算出a的全部因子的累加和为b，再计算b的全部因子的累加和为n，若n等于a则可判定a和b是亲密数。计算数a的各因子的算法： <br />\n用a依次对i(i=1~a/2)进行模运算，若模运算结果等于0，则i为a的一个因子；否则i就不是a的因子。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1096,'【C语言训练】列出最简真分数序列*','<p><font size=\"3\" face=\"Times New Roman\">按递增顺序依次列出所有分母为40，分子小于40的最简分数。</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">分数之间用逗号分开(含最末逗号)</font></p>','','1/40,3/40,7/40,9/40,11/40,13/40,17/40,19/40,21/40,23/40,27/40,29/40,31/40,33/40,37/40,39/40,','0','<p><font size=\"3\" face=\"Times New Roman\">对分子采用穷举法，利用最大公约数的方法，判断分子与40是否构成真分数。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1097,'【C语言训练】大、小写问题','<p><font size=\"3\" face=\"Times New Roman\">输入一串字符,将其中的大写变成小写，若不为大写则原样输出</font></p>','<p><font size=\"3\" face=\"Times New Roman\">任意字符串(长度在100以内)以回车表示输入结束</font></p>','<p><font size=\"3\" face=\"Times New Roman\">将其中的大写 输出相应的小写，若不为大写则原样输出</font></p>','A123b','a123b','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1098,'【C语言训练】委派任务*','<p><font face=\"Times New Roman\">某侦察队接到一项紧急任务，要求在A、B、C、D、E、F六个队员中尽可能多地挑若干人，但有以下限制条件： <br />\n1)A和B两人中至少去一人； <br />\n2)A和D不能一起去； <br />\n3)A、E和F三人中要派两人去； <br />\n4)B和C都去或都不去； <br />\n5)C和D两人中去一个； <br />\n6)若D不去，则E也不去。 <br />\n问应当让哪几个人去？ </font><br />\n</p>','','<p><font size=\"3\" face=\"Times New Roman\">要派出的人 <br />\n若有多个，按字母递增顺序排列，用逗号分开（含末尾逗号） <br />\n<br />\n</font></p>','','A,B,C,F,','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1099,'【C语言训练】字符串正反连接','<p><font size=\"3\" face=\"Times New Roman\">所给字符串正序和反序连接，形成新串并输出</font></p>','<p><font size=\"3\" face=\"Times New Roman\">任意字符串（长度&lt;=50）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">字符串正序和反序连接所成的新字符串</font></p>','123abc','123abccba321','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1100,'【C语言训练】尼科彻斯定理','<p><font size=\"3\" face=\"Times New Roman\">验证尼科彻斯定理，即：任何一个正整数的立方都可以写成一串连续奇数的和。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">任一正整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">该数的立方分解为一串连续奇数的和</font></p>','13','13*13*13=219=157+159+161+163+165+167+169+171+173+175+177+179+181','0','<p><font size=\"3\" face=\"Times New Roman\">本题是一个定理，我们先来证明它是成立的。  <br />\n对于任一正整数a,不论a是奇数还是偶数，整数(a&times;a-a+1)必然为奇数。  <br />\n构造一个等差数列，数列的首项为(a&times;a-a+1),等差数列的差值为2(奇数数列)，则前a项的和为：  <br />\na&times;((a&times;a-a+1))+2&times;a(a-1)/2  <br />\n=a&times;a&times;a-a&times;a+a+a&times;a-a  <br />\n=a&times;a&times;a  <br />\n定理成立。证毕。  <br />\n通过定理的证明过程可知L所要求的奇数数列的首项为(a&times;a-a+1)，长度为a。编程的算法不需要特殊设计，可按照定理的证明过直接进行验证。  </font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1101,'【C语言训练】排序问题<1>','<p><font size=\"3\" face=\"Times New Roman\">将四个整数进行从小到大的顺序排列,</font></p>','<p><font size=\"3\" face=\"Times New Roman\">四个整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">从小到大输出这四个数</font></p>','5 3 4 2\n','2 3 4 5\n\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1102,'【C语言训练】排序问题<2>','<p><font size=\"3\" face=\"Times New Roman\">将十个数进行从大到小的顺序进行排列</font></p>','<p><font size=\"3\" face=\"Times New Roman\">十个整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">以从大到小的顺序输出这个十个数</font></p>','1 2 3 4 5 6 7 8 9 10\n','10 9 8 7 6 5 4 3 2 1\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1103,'【C语言训练】数字母','<p><font size=\"3\" face=\"Times New Roman\">输入一个字符串,数出其中的字母的个数.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个字符串，不包含空格（长度小于100）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">字符串中的字母的个数</font></p>','124lfdk54AIEJ92854&%$GJ','10','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1104,'【C语言训练】斐波纳契数列','<p><font size=\"3\" face=\"Times New Roman\">斐波纳契数列  <br />\n1，1，2，3，5，8，13，21，34，55，89&hellip;&hellip;这个数列则称为&ldquo;斐波纳契数列&rdquo;，其中每个数字都是&ldquo;斐波纳契数&rdquo;。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个整数N(N不能大于40)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">由N个&ldquo;斐波纳契数&rdquo;组成的&ldquo;斐波纳契数列&rdquo;。</font></p>','6','1 1 2 3 5 8','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1105,'【C语言训练】最大数问题','<p><font size=\"3\" face=\"Times New Roman\">输入若干个整数,以-1标记输入结束。输出其中的最大数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">若干个整数。（以-1标记输入结束）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">其中的最大数</font></p>','1 2 5 7 8 6 1 -6 -1','8','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1106,'【C语言训练】求1+2!+3!+...+N!的和','<p><font size=\"3\" face=\"Times New Roman\">求1+2!+3!+...+N!的和 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">正整数N（N〈=20）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1+2!+3!+...+N!的和 (结果为整数形式)</font></p>','3','9','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1107,'【C语言训练】求PI*','','','','','','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1108,'【C语言训练】求s=a+aa+aaa+aaaa+aa...a的值','<p><font size=\"3\" face=\"Times New Roman\">求s=a+aa+aaa+aaaa+aa...a的值，其中a是一个一位的整数。  <br />\n例如2+22+222+2222+22222(此时共有5个数相加)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数a和n（n个数相加，1&lt;= n, a&lt;=9）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">s的值</font></p>','2 2','24','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1109,'【C语言训练】求具有abcd=(ab+cd)2性质的四位数','<p><font size=\"3\" face=\"Times New Roman\">3025这个数具有一种独特的性质：将它平分为二段，即30和25，使之相加后求平方，即(30+25)2，恰好等于3025本身。请求出具有这样性质的全部四位数</font></p>','','<p><font face=\"Times New Roman\">满足题意的数全部四位数(从小到大输出,且数之间用两个空格分开) </font><br />\n<br />\n</p>','','2025  3025  9801  ','0','<p><font size=\"3\" face=\"Times New Roman\">根据题意可以采用穷举法，对所有四位数进行判断，从而筛选出符合这种性质的四位数。具体算法实现，可任取一个四位数，将其截为两部分，前两位为a，后两位为b，然后套用公式计算并判断。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1110,'【C语言训练】求函数值','<p><font size=\"3\" face=\"Times New Roman\">按如下递归公式求函数值。  <br />\nx=1时 f(x)=10；x&gt;1时 f(x)=f(x-1)+2</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整型变量x</font></p>','<p><font size=\"3\" face=\"Times New Roman\">f(x)</font></p>','10','28','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1111,'【C语言训练】求矩阵的两对角线上的元素之和','<p><font size=\"3\" face=\"Times New Roman\">求矩阵的两对角线上的元素之和</font></p>','<p><font size=\"3\" face=\"Times New Roman\">矩阵的行数N  <br />\n和一个N*N的整数矩阵a[N][N](N&lt;=10) </font></p>','<p><font size=\"3\" face=\"Times New Roman\">所输矩阵的两对角线上的元素之和</font></p>','3\n1 2 3 \n4 5 6 \n7 8 9','25','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1112,'【C语言训练】求素数问题','<p><font size=\"3\" face=\"Times New Roman\">求出1-N中的所有素数 <br />\n<br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">大于1的正整数N</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1-N中的所有素数,(以从小到大的格式输出)</font></p>','9\n','2 3 5 7 \n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1113,'【C语言训练】求车速','<p><font size=\"3\" face=\"Times New Roman\">一辆以固定速度行驶的汽车，司机在上午10点看到里程表上的读数是一个对称数(即这个数从左向右读和从右向左读是完全一样的)，为95859。两小时后里程表上出现了一个新的对称数。问该车的速度是多少？新的对称数是多少？</font></p>','','','','95959','0','<p><font size=\"3\" face=\"Times New Roman\">根据题意，设所求对称数为i，其初值为95589，对其依次递增取值，将i值的每一位分解后与其对称位置上的数进行比较，若每个对称位置上的数皆相等，则可判定i即为所求的对称数。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1114,'【C语言训练】百钱百鸡问题','<p><font size=\"3\" face=\"Times New Roman\">中国古代数学家张丘建在他的《算经》中提出了著名的&ldquo;百钱买百鸡问题&rdquo;：鸡翁一，值钱五，鸡母一，值钱三，鸡雏三，值钱一，百钱买百鸡，问翁、母、雏各几何？</font></p>','<p><font size=\"3\" face=\"Times New Roman\"><br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">给出所有的解，每组解占一行  <br />\n解的顺序：按&ldquo;字典序&rdquo;排列，即公鸡数少的在前；公鸡数相同，母鸡数少的在前  <br />\n格式:  <br />\ncock=%d,hen=%d,chicken=%d\\n</font></p>','13 14.1\n12.2 12.3\n15 18\n22.2 23.5\n33.45 33.56\n67.73 67.92','cock=0,hen=25,chicken=75\ncock=4,hen=18,chicken=78\ncock=8,hen=11,chicken=81\ncock=12,hen=4,chicken=84','0','<p><font size=\"3\" face=\"Times New Roman\">设鸡翁、鸡母、鸡雏的个数分别为x,y,z，题意给定共100钱要买百鸡，若全买公鸡最多买20只，显然x的值在0~20之间；同理，y的取值范围在0~33之间，可得到下面的不定方程：  <br />\n5x+3y+z/3=100  <br />\nx+y+z=100  <br />\n所以此问题可归结为求这个不定方程的整数解。  <br />\n由程序设计实现不定方程的求解与手工计算不同。在分析确定方程中未知数变化范围的前提下，可通过对未知数可变范围的穷举，验证方程在什么情况下成立，从而得到相应的解。  <br />\n<br />\n注意：浮点数的比较不准确  <br />\n</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1115,'【C语言训练】立方和不等式','<p><font size=\"3\" face=\"Times New Roman\">试求满足下述立方和不等式的m的整数解。  <br />\n1^3+2^3+...+m^3〈=n  <br />\n本题算法如下：  <br />\n对指定的n，设置求和循环，从i=1开始，i递增1取值，把i3(或i*i*i)累加到s，直至s&gt;=n，脱离循环作相应的打印输出。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">正整数n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">不等式的整数解 </font></p>','10','2','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1116,'【C语言训练】素数问题','<p><font size=\"3\" face=\"Times New Roman\">编写一个程序判断一个数是否为素数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数</font></p>','<p><font face=\"Times New Roman\">1或0(其中1表示此数为素数,0为表示为不是素数) </font><br />\n<br />\n</p>','5\n','1\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1117,'【C语言训练】自守数问题','<p><font size=\"3\" face=\"Times New Roman\">自守数是指一个数的平方的尾数等于该数自身的自然数。 <br />\n例如： <br />\n25^2=625 <br />\n76^2=5776 <br />\n9376^2=87909376 <br />\n请求出200000以内的自守数?</font></p>','','<p><font face=\"Times New Roman\">200000以内的自守数(包括0, 数之间用两个空格分开) </font><br />\n<br />\n</p>','','0  1  5  6  25  76  376  625  9376  90625  109376  ','0','<p><font face=\"Times New Roman\">若采用&ldquo;求出一个数的平方后再截取最后相应位数&rdquo;的方法显然是不可取的，因为计算机无法表示过大的整数。 <br />\n分析手工方式下整数平方(乘法)的计算过程，以376为例： <br />\n376 被乘数 <br />\nX 376 乘数 <br />\n---------- <br />\n2256 第一个部分积=被乘数*乘数的倒数第一位 <br />\n2632 第二个部分积=被乘数*乘数的倒数第二位 <br />\n1128 第三个部分积=被乘数*乘数的倒数第三位 <br />\n---------- <br />\n141376 积 <br />\n本问题所关心的是积的最后三位。分析产生积的后三位的过程，可以看出，在每一次的部分积中，并不是它的每一位都会对积的后三位产生影响。总结规律可以得到：在三位数乘法中，对积的后三位产生影响的部分积分别为： <br />\n第一个部分积中：被乘数最后三位*乘数的倒数第一位 <br />\n第二个部分积中：被乘数最后二位*乘数的倒数第二位 <br />\n第三个部分积中：被乘数最后一位*乘数的倒数第三位 <br />\n将以上的部分积的后三位求和后截取后三位就是三位数乘积的后三位。这样的规律可以推广到同样问题的不同位数乘积。 <br />\n按照手工计算的过程可以设计算法编写程序。 </font><br />\n<br />\n</p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1118,'【C语言训练】自由落体问题','<p><font size=\"3\" face=\"Times New Roman\">一个球从100m高度自由落下,每次落地后反跳回原来高度的一半,再落下,再反弹.求它在第N次落地时共经过多少米? <br />\n</font></p>','<p><b> </b></p>\n<p><font size=\"3\" face=\"Times New Roman\"> 反弹的次数N</font></p>','<p><font size=\"3\" face=\"Times New Roman\">小球经过的路程(保留四位小数)</font></p>','2','200.0000','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1119,'【C语言训练】舍罕王的失算','<p><font size=\"3\" face=\"Times New Roman\">相传国际象棋是古印度舍罕王的宰相达依尔发明的.舍罕王十分喜爱象棋,决定让宰相自己选择何种赏赐.这位聪明的宰相指着8*8共64格的象棋说:陛下,请您赏给我一些麦子吧.就在棋盘的第1格放1粒,第2格放2粒,第三格放4粒,以后每一格都比前一格增加一位,依此放完棋盘一64格,我就感激不尽了.舍罕王让人扛了一袋麦子,他要兑现他的许诺. <br />\n请问,国王要兑现他的许诺共要多少粒麦子赏赐他的宰相?</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">以整数形式输出,不要其它符号</font></p>','','18446744073709552000','0','<p><font size=\"3\" face=\"Times New Roman\">应该是个很大的数,要考虑数的精度问题! 用double类型，输出尽可能精确的结果。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1120,'【C语言训练】角谷猜想','<p><font size=\"3\" face=\"Times New Roman\">角谷猜想:  <br />\n日本一位中学生发现一个奇妙的&ldquo;定理&rdquo;，请角谷教授证明，而教授无能为力，于是产生角谷猜想。猜想的内容是：任给一个自然数，若为偶数除以2，若为奇数则乘3加1，得到一个新的自然数后按照上面的法则继续演算，若干次后得到的结果必然为1。请编程验证。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">任一正整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">演算的过程</font></p>','10','10/2=5\n5*3+1=16\n16/2=8\n8/2=4\n4/2=2\n2/2=1','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1121,'【C语言训练】计算1977！*','<p><font size=\"3\" face=\"Times New Roman\">编写一个程序，计算1977！的值，</font></p>','','','','','0','<p><font size=\"3\" face=\"Times New Roman\">1977！的值超过计算机所能表示的整数范围，请考虑其他技巧，假设 1977！之值不超过10000位用一个含有10000个元素的整型数组num表示其结果，每个元素存放一位，num[0]存入个位数，num[]存入十 位数，依次类推&hellip;&hellip;8！=40320，当前最高位len=4，求9！与各位依次相乘rum保存当前的进位数字。（0&lt;=rem&lt;9）.  <br />\n1)rem置初始值0.  <br />\n2）i=0:rem=rem+num[0]*9=0+0=0。num[0]=rem%10=0，rem=rem/10=0。  <br />\n3）i=1:rem=rem+num[1]*9=0+18=18。num[1]=rem%10=8，rem=rem/10=1。  <br />\n4）i=2:rem=rem+num[2]*9=1+27=28。num[2]=rem%10=8，rem=rem/10=2。  <br />\n5）i=3:rem=rem+num[3]*9=2+0=2。num[3]=rem%10=2，rem=rem/10=0。  <br />\n6）i=4:rem=rem+num[4]*9=0+36=36。num[4]=rem%10=6，rem=rem/10=3。  <br />\n7）rem=3，说明有进位，数组最高位增加1，len=len+1=5，num[5]=rem%10=3，rem=rem/10=0，结束。  <br />\nnum各位结果为：3、6、2、8、8、0。即9！=362880 </font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1122,'【C语言训练】计算1~N之间所有奇数之和','<p><font size=\"3\" face=\"Times New Roman\">计算1~N之间所有奇数之和</font></p>','<p><font size=\"3\" face=\"Times New Roman\">正整数N</font></p>','<p><font size=\"3\" face=\"Times New Roman\">1~N之间所有奇数之和</font></p>','10','25','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1123,'【C语言训练】计算t=1+1/2+1/3+...+1/n','<p><font size=\"3\" face=\"Times New Roman\">计算t=1+1/2+1/3+...+1/n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整型变量n </font></p>','<p><font size=\"3\" face=\"Times New Roman\">t(保留六位小数)</font></p>','10','2.928968 ','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1124,'【C语言训练】计算一个整数N的阶乘','<p><font size=\"3\" face=\"Times New Roman\">计算一个整数N的阶乘</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个整数N, (0〈=N〈=12)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数N的阶乘.</font></p>','5','120','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1125,'【C语言训练】计算：t=1-1/(2*2)-1/(3*3)-...-1/(m*m)','<p><font size=\"3\" face=\"Times New Roman\">计算：t=1-1/(2*2)-1/(3*3)-...-1/(m*m)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整型变量m</font></p>','<p><font size=\"3\" face=\"Times New Roman\">t(保留六位小数)</font></p>','10','0.450232','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1126,'【C语言训练】谁家孩子跑最慢* ','<p><font size=\"3\" face=\"Times New Roman\">张王李三家各有三个小孩。一天，三家的九个孩子在一起比赛短跑，规定不分年龄大小，跑第一得9分，跑第2得8分，依此类推。比赛结果各家的总分相同，且这些孩子没有同时到达终点的，也没有一家的两个或三个孩子获得相连的名次。已知获第一名的是李家的孩子，获得第二的是王家的孩子。问获得最后一名的是谁家的孩子？</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">输出最后一名的那家的姓的一个字母且以大写输出(若为张家,则输出Z)</font></p>','','W','0','<p><font size=\"3\" face=\"Times New Roman\">按题目的条件，共有1+2+3+...+9=45分，每家的孩子的得分应为15分。根据题意可知：获第一名的是李家的孩子，获第二名的是王家的孩子，则可推出：获第三名的一定是张家的孩子。由&ldquo;这些孩子没有同时到达终点的&rdquo;可知：名次不能并列，由&ldquo;没有一家的两个或三个孩子获得相连的名次&rdquo;可知：第四名不能是张家的孩子。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1127,'【C语言训练】邮票组合问题*','<p><font size=\"3\" face=\"Times New Roman\">某人有四张3分的邮票和三张5分的邮票，用这些邮票中的一张或若干张可以得到多少种不同的邮资？</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">可得到多少种 <br />\n</font></p>','','19','0','<p><font size=\"3\" face=\"Times New Roman\">将问题进行数学分析，不同张数和面值的邮票组成的邮资可用下列公式计算：  <br />\nS=3*i+5*j  <br />\n其中i为3分邮柰的张数，j为5分的张数  <br />\n按题目的要求，3分的邮票可以取0、1、2、3、4张，5分的邮票可以取0、1、2、3张。采用穷举方法进行组合，可以求出这些不同面值不同张数的邮标组合后的邮资。  </font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1128,'【C语言训练】阶乘和数*','<p><font size=\"3\" face=\"Times New Roman\">一个正整数如果等于组成它的各位数字的阶乘之和，该整数称为阶乘和数。 <br />\n例如，145=1!+4!+5!，则145是一个三位阶详细和数。 <br />\n请问:共有多少个阶乘和数？</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">所有的阶乘和数(按字典序，即1打头的在前，2打头的次之,..., 空格分隔)</font></p>','','1 145 2 40585 ','0','<p><font size=\"3\" face=\"Times New Roman\">提示：8*9!=8*362880&lt;10000000</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1129,'【C语言训练】阿姆斯特朗数','<p><font size=\"3\" face=\"Times New Roman\">如果一个正整数等于其各个数字的立方和，则称该数为阿姆斯特朗数(亦称为自恋性数)。 <br />\n如 407=4^3+0^3+7^3就是一个阿姆斯特朗数。试编程求大于1小于1000的所有阿姆斯特朗数。</font></p>','','<p><font size=\"3\" face=\"Times New Roman\">从小到大输出,数之间用两个空格分开</font></p>','','153  370  371  407  ','0','<p><font size=\"3\" face=\"Times New Roman\">可采用穷举法，依次取1000以内的各数(设为i)，将i的各位数字分解后，据阿姆斯特朗数的性质进行计算和判断。</font></p>','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1130,'【亲和数】','<p><font size=\"3\" face=\"Times New Roman\">古希腊数学家毕达哥拉斯在自然数研究中发现，220的所有真约数(即不是自身的约数)之和为：  <br />\n<br />\n1+2+4+5+10+11+20+22+44+55+110＝284。  <br />\n<br />\n而284的所有真约数为1、2、4、71、 142，加起来恰好为220。人们对这样的数感到很惊奇，并称之为亲和数。一般地讲，如果两个数中任何一个数都是另一个数的真约数之和，则这两个数就是亲和数。  <br />\n你的任务就编写一个程序，判断给定的两个数是否是亲和数  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据第一行包含一个数M，接下有M行，每行一个实例,包含两个整数A,B； 其中 0 ＜＝A,B ＜＝600000 ; </font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，如果A和B是亲和数的话输出YES，否则输出NO。</font></p>','2\n220 284\n100 200','YES\nNO','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1131,'【作业调度方案】','<p><font size=\"3\" face=\"Times New Roman\">我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。  <br />\n每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。  <br />\n例如，当n=3，m=2时，&ldquo;1-1，1-2，2-1，3-1，3-2，2-2&rdquo;就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。  <br />\n一方面，每个操作的安排都要满足以下的两个约束条件。  <br />\n(1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；  <br />\n(2) 同一时刻每一台机器至多只能加工一个工件。  <br />\n另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。  <br />\n由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为&ldquo;1 1 2 3 3 2&rdquo;。  <br />\n还要注意，&ldquo;安排顺序&rdquo;只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。  <br />\n例如，取n=3,m=2，已知数据如下：  <br />\n<br />\n则对于安排顺序&ldquo;1 1 2 3 3 2&rdquo;，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。 <br />\n<br />\n当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题 简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条 件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。  <br />\n显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行为两个正整数，用一个空格隔开：  <br />\nm n  <br />\n（其中m（〈20）表示机器数，n（〈20）表示工件数）  <br />\n第2行： 2n个用空格隔开的数，为给定的安排顺序。  <br />\n接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。  <br />\n其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。  <br />\n后n行依次表示每个工件的每个工序的加工时间。  <br />\n可以保证，以上各数据都是正确的，不必检验。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为最少的加工时间。</font></p>','2 3\n1 1 2 3 3 2\n1 2 \n1 2 \n2 1\n3 2 \n2 5 \n2 4\n','10','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1132,'【偶数求和】','<p><font size=\"3\" face=\"Times New Roman\">有一个长度为n(n&lt;=100)的数列，该数列定义为从2开始的递增有序偶数（公差为2的等差数列），现在要求你按照顺序每m个数求出一个平均值，如果最后不足m个，则以实际数量求平均值。编程输出该平均值序列。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，包含两个正整数n和m，n和m的含义如上所述。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一个平均值序列，每组输出占一行</font></p>','3 2\n4 2','3 6\n3 7','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1133,'【出圈】','<p><font size=\"3\" face=\"Times New Roman\">设有n个人围坐一圈并按顺时针方向从1到n编号，从第1个人开始进行1到m的报数，报数到第个m人，此人出圈，再从他的下一个人重新开始1到m的报数，如此进行下去直到所剩下一人为止。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入多行，每行２个数，分别表示n和m.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">计算每一行中最后剩下这个人的编号．</font></p>','10 3','4','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1134,'【回文数(二)】','<p><font size=\"3\" face=\"Times New Roman\">若一个数（首位不为零）从左向右读与从右向左读都一样，我们就将其称之为回文数。  <br />\n例如：给定一个10进制数56，将56加65（即把56从右向左读），得到121是一个回文数。  <br />\n又如：对于10进制数87：  <br />\nSTEP1：87+78 = 165　　　　　　　　 STEP2：165+561 = 726  <br />\nSTEP3：726+627 = 1353　　　　　　　　STEP4：1353+3531 = 4884  <br />\n在这里的一步是指进行了一次N进制的加法，上例最少用了4步得到回文数4884。  <br />\n写一个程序，给定一个N（2&lt;=N&lt;=16）进制数M，求最少经过几步可以得到回文数。如果在30步以内（包含30步）不可能得到回文数，则输出&ldquo;Impossible!&rdquo;  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">共两行  <br />\n第一行为进制数N（2&lt;=N&lt;=16）  <br />\n第二行为N进制数M（0&lt;=M&lt;=maxlongint）  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">共一行，为&ldquo;STEP=经过的步数&rdquo;或&ldquo;Impossible!&rdquo;</font></p>','9\n87','STEP=6','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1135,'【密码】','<p><font size=\"3\" face=\"Times New Roman\">网上流传一句话:&quot;常在网上飘啊，哪能不挨刀啊～&quot;。其实要想能安安心心地上网其实也不难，学点安全知识就可以。  <br />\n首先，我们就要设置一个安全的密码。那什么样的密码才叫安全的呢？一般来说一个比较安全的密码至少应该满足下面两个条件：  <br />\n(1).密码长度大于等于8，且不要超过16。  <br />\n(2).密码中的字符应该来自下面&ldquo;字符类别&rdquo;中四组中的至少三组。  <br />\n这四个字符类别分别为：  <br />\n1.大写字母：A,B,C...Z;  <br />\n2.小写字母：a,b,c...z;  <br />\n3.数字：0,1,2...9;  <br />\n4.特殊符号：~,!,@,#,$,%,^;  <br />\n给你一个密码，你的任务就是判断它是不是一个安全的密码。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据第一行包含一个数M，接下有M行，每行一个密码（长度最大可能为50），密码仅包括上面的四类字符。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，判断这个密码是不是一个安全的密码，是的话输出YES，否则输出NO。</font></p>','3\na1b2c3d4\nLinle@ACM\n^~^@^@!%','NO\nYES\nNO','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1136,'【排队买票】','<p><font size=\"3\" face=\"Times New Roman\">有M个小孩到公园玩，门票是1元。其中N个小孩带的钱为1元，K个小孩带的钱为2元。售票员没有零钱，问这些小孩共有多少种排队方法，使得售票员总能找得开零钱。注意：两个拿一元零钱的小孩，他们的位置互换，也算是一种新的排法。（M&lt;=10） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入一行，M,N,K(其中M=N+K,M&lt;=10).</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出一行，总的排队方案。</font></p>','4 2 2','8','0','','吉首大学软件学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1137,'【数组的距离】','<p><font size=\"3\" face=\"Times New Roman\">已知元素从小到大排列的两个数组x[]和y[]，请写出一个程序算出两个数组彼此之间差的绝对值中最小的一个，这叫做数组的距离</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行为两个整数m, n(1&le;m, n&le;1000)，分别代表数组f[], g[]的长度。 <br />\n第二行有m个元素，为数组f[]。 <br />\n第三行有n个元素，为数组g[]。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">数组的最短距离</font></p>','5 5\n1 2 3 4 5\n6 7 8 9 10\n','1','0','','吉首大学软件服务外包学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1138,'【明明的随机数】','<p><font size=\"3\" face=\"Times New Roman\">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用 计算机生成了N个1到1000之间的随机整数（N&le;100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然 后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">有2行，第1行为1个正整数，表示所生成的随机数的个数：  <br />\nN  <br />\n第2行有N个用空格隔开的正整数，为所产生的随机数。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">也是2行，第1行为1个正整数M，表示不相同的随机数的个数。第2行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</font></p>','10\n20 40 32 67 40 20 89 300 400 15','8\n15 20 32 40 67 89 300 400','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1139,'【求[X,Y]内被除3余1并且被除5余3的整数的和】','<p><font face=\"Times New Roman\" size=\"3\">输入两个正整数X,Y,求出[X,Y]内被除3余1并且被除5余3的整数的和</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入两个正整数X,Y</font></p>','<p><font face=\"Times New Roman\" size=\"3\">求所有满足条件的数的和</font></p>','200 800\n','20020\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1140,'【矩阵】','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">给一个n*n的矩阵A，它的每一个元素Ai,j都是整数( 0 &lt;= i &lt; n, 0 &lt;= j &lt; n )。在每一行i( 0 &lt;= i &lt; n )给一个右移操作，使第i行的整数整体向右移动一个位置，最右边的整数将会移动到最左端的那一列。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n你可以在任意行做右移操作，这样你会得到一个新的矩阵，对于新的矩阵你当然也可以做右移操作。你的任务就是求列最小值ColMin,它是每个矩阵的列最大值，但同时又是所有矩阵中的列最小值。<span class=\"Apple-converted-space\">&nbsp;</span><br />\nmax(0 &lt;= j &lt; n){Cj|Cj=&Sigma;0&lt;=i &lt; nAi,j}<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">可能包含多次输入。第一行是一个整数n，接下来n行每行包含n个整数，这些数据就是n*n的矩阵A的元素。如果输入仅含有-1的一行，就表示输入终止。其中1 &lt;= n &lt;= 7 而且 |Ai,j| &lt; 104 。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">对于每组测试，打印一行包含一个数值，它在一个矩阵中是列最大值，但是在所有的变换矩阵中又是列最小值。</span></p>','2 \n4 6 \n3 7 \n3 \n1 2 3 \n4 5 6 \n7 8 9 \n-1\n','11 \n15','0','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">例如：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n2<span class=\"Apple-converted-space\">&nbsp;</span><br />\n4 6<span class=\"Apple-converted-space\">&nbsp;</span><br />\n3 7<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是：13<span class=\"Apple-converted-space\">&nbsp;</span><br />\n右移操作：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n6 4<span class=\"Apple-converted-space\">&nbsp;</span><br />\n3 7<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是：11<span class=\"Apple-converted-space\">&nbsp;</span><br />\n右移操作：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n4 6<span class=\"Apple-converted-space\">&nbsp;</span><br />\n7 3<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是：11<span class=\"Apple-converted-space\">&nbsp;</span><br />\n右移操作：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n6 4<span class=\"Apple-converted-space\">&nbsp;</span><br />\n7 3<span class=\"Apple-converted-space\">&nbsp;</span><br />\n列最大值是13<span class=\"Apple-converted-space\">&nbsp;</span><br />\n显然在所有的变换矩阵中列最大值是小是11<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1141,'【简单计算】','<p><font face=\"Times New Roman\">有一个n+2个元素a[0], a[1], ..., a[n+1] (n &lt;= 3000, -1000 &lt;= a[i] &lt;=1000)构成的数列. <br />\n已知对i=1, 2, ..., n有a[i] = (a[i-1] + a[i+1])/2 - c[i]. <br />\n<br />\n给定a0, a[n+1], c[1], ... , c[n]. 写一个程序计算a[1]. </font><br />\n</p>','<p><font face=\"Times New Roman\" size=\"3\">第一行是整数n. 接下来两行是a[0]和a[n+1], 其小数点后有两位数字. 其后的n行为c[i](同样是两位小数), 每行一个数.</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输出为a[1], 格式与a[0], a[n+1]相同.</font></p>','1\n50.50\n25.50\n10.15\n','27.85\n','0','','吉首大学软件学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1142,'【绝对值排序】','<p><font size=\"3\" face=\"Times New Roman\">输入n(n&lt;=100)个整数，按照绝对值从大到小排序后输出。题目保证对于每一个测试实例，所有的数的绝对值都不相等。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，每行的第一个数字为n,接着是n个整数，n=0表示输入数据的结束，不做处理。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，输出排序后的结果，两个数之间用一个空格隔开。每个测试实例占一行</font></p>','3 3 -4 2\n4 0 1 2 -3\n0','-4 3 2\n-3 2 1 0','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1143,'【能量项链】','<p><font face=\"Times New Roman\">在Mars星球上，每个Mars人都随身佩带着一串能量项链。在项链上有N颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标记。因为只有这样，通过吸盘（吸盘是Mars人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗能量珠的头标记为m，尾标记为r，后一颗能量珠的头标记为r，尾标记为n，则聚合后释放的能量为m*r*n（Mars单位），新产生的珠子的头标记为m，尾标记为n。 <br />\n需要时，Mars人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。 <br />\n例如：设N=4，4颗珠子的头标记与尾标记依次为(2，3) (3，5) (5，10) (10，2)。我们用记号◎表示两颗珠子的聚合操作，(j◎k)表示第j，k两颗珠子聚合后所释放的能量。则第4、1两颗珠子聚合后释放的能量为： <br />\n(4◎1)=10*2*3=60。 <br />\n这一串项链可以得到最优值的一个聚合顺序所释放的总能量为 <br />\n((4◎1)◎2)◎3）=10*2*3+10*3*5+10*5*10=710。</font></p>','<p><font face=\"Times New Roman\">第一行是一个正整数N（4&le;N&le;100），表示项链上珠子的个数。第二行是N个用空格隔开的正整数，所有的数均不超过1000。第i个数为第i颗珠子的头标记（1&le;i&le;N），当i〈N时，第i颗珠子的尾标记应该等于第i+1颗珠子的头标记。第N颗珠子的尾标记应该等于第1颗珠子的头标记。 <br />\n至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">只有一行，是一个正整数E（E&le;2.1*10^9），为一个最优聚合顺序所释放的总能量。</font></p>','4\n2  3  5  10\n\n','710\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1144,'【蟠桃记】','<p><font size=\"3\" face=\"Times New Roman\">喜欢西游记的同学肯定都知道悟空偷吃蟠桃的故事，你们一定都觉得这猴子太闹腾了，其实你们是有所不知：悟空是在研究一个数学问题！  <br />\n什么问题？他研究的问题是蟠桃一共有多少个！  <br />\n不过，到最后，他还是没能解决这个难题，呵呵^-^  <br />\n当时的情况是这样的：  <br />\n第一天悟空吃掉桃子总数一半多一个，第二天又将剩下的桃子吃掉一半多一个，以后每天吃掉前一天剩下的一半多一个，到第n天准备吃的时候只剩下一个桃子。聪明的你，请帮悟空算一下，他第一天开始吃的时候桃子一共有多少个呢？  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，包含一个正整数n（1＜n＜30），表示只剩下一个桃子的时候是在第n天发生的</font></p>','<p><font size=\"3\" face=\"Times New Roman\"> 对于每组输入数据，输出第一天开始吃的时候桃子的总数，每个测试实例占一行。</font></p>\n<p align=\"left\"><b><font size=\"5\" color=\"#333399\"><br />\n</font> </b></p>','2\n4','4\n22','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1145,'【计算两点间的距离】','<p><font size=\"3\" face=\"Times New Roman\">输入两点坐标（X1,Y1）,（X2,Y2）,计算并输出两点间的距离。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，由4个实数组成，分别表示x1,y1,x2,y2,数据之间用空格隔开。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行，结果保留两位小数。</font></p>','0 0 0 1\n0 1 1 0','1.00\n1.41','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1146,'【计算球体积】','<p><font size=\"3\" face=\"Times New Roman\">根据输入的半径值，计算球的体积。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，每行包括一个实数，表示球的半径。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出对应的球的体积，对于每组输入数据，输出一行，计算结果保留三位小数。</font></p>','1\n1.5','4.189\n14.137','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1147,'【计算直线的交点数】','<p><font size=\"3\" face=\"Times New Roman\">平面上有n条直线，且无三线共点，问这些直线能有多少种不同交点数。  <br />\n比如,如果n=2,则可能的交点数量为0(平行)或者1(不平行)。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个测试实例,每个测试实例占一行,每行包含一个正整数n（n&lt;=20）,n表示直线的数量.</font></p>','<p align=\"left\"><b><font size=\"5\" color=\"#333399\">Output</font> </b></p>\n<p><font size=\"3\" face=\"Times New Roman\"> 每个测试实例对应一行输出，从小到大列出所有相交方案，其中每个数为可能的交点数,每行的整数之间用一个空格隔开。 </font></p>','2\n3','0 1\n0 2 3','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1148,'【金明的预算方案】','<p><font size=\"3\" face=\"Times New Roman\">金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专用 的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早，金明就开始做预 算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子： <br />\n<br />\n主件 	附件  <br />\n电脑 	打印机，扫描仪  <br />\n书柜 	图书  <br />\n书桌 	台灯，文具  <br />\n工作椅 	无  <br />\n<br />\n如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有0个、1个或2个附件。附件不再有从属于自己的附件。金明想买的东西很 多，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格 （都是10元的整数倍）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />\n设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />\nv[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />\n请你帮助金明设计一个满足要求的购物单。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行，为两个正整数，用一个空格隔开：  <br />\nN m  <br />\n（其中N（&lt;32000）表示总钱数，m（&lt;60）为希望购买物品的个数。）  <br />\n从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数  <br />\nv p q  <br />\n（其中v表示该物品的价格（v&lt;10000），p表示该物品的重要度（1~5），q表示该物品是主件还是附件。如果q=0，表示该物品为主件，如果q&gt;0，表示该物品为附件，q是所属主件的编号）  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;200000）。</font></p>','1000 5\n800 2 0\n400 5 1\n300 5 1\n400 3 0\n500 2 0\n','2200','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1149,'【魔板】','<p><font size=\"3\" face=\"Times New Roman\">在魔方风靡全球之后不久，Rubik先生发明了它的简化版――魔板。魔板 由8个同样大小的方块组成，每个方块颜色均不相同，可用数字1-8分别表示。任一时刻魔板的状态可用方块的颜色序列表示：从魔板的左上角开始，按顺时针方 向依次写下各方块的颜色代号，所得到的数字序列即可表示此时魔板的状态。例如，序列(1,2,3,4,5,6,7,8)表示魔板状态为：  <br />\n1 2 3 4  <br />\n8 7 6 5  <br />\n对于魔板，可施加三种不同的操作，具体操作方法如下：  <br />\nA: 上下两行互换,如上图可变换为状态87654321  <br />\nB: 每行同时循环右移一格,如上图可变换为41236785  <br />\nC: 中间4个方块顺时针旋转一格,如上图可变换为17245368  <br />\n给你魔板的初始状态与目标状态，请给出由初态到目态变换数最少的变换步骤，若有多种变换方案则取字典序最小的那种。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">每组测试数据包括两行，分别代表魔板的初态与目态。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对每组测试数据输出满足题意的变换步骤。</font></p>','12345678\n17245368\n12345678\n82754631','C\nAC','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1150,'三角形','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">7<span class=\"Apple-converted-space\">&nbsp;</span><br />\n3 8<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n8 1 0<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n2 7 4 4<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n4 5 2 6 5<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n(图一)<span class=\"Apple-converted-space\">&nbsp;</span><br />\n<br />\n图一表示一个5行的数字三角形。假设给定一个n行数字三角形,计算出从三角形顶至底的一条路径，使该路径经过的数字总和最大。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n每一步只能由当前位置向左下或右下。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">你的程序要能接受标准输入。第一行包含一个整数T，表示总的测试次数。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n对于每一种情况：第一行包含一个整数N,其中1 &lt; N &lt; 100,表示三角形的行数。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n接下来的N行输入表示三角形的每一行的元素Ai,j，其中0 &lt; Ai,j &lt; 100。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输出每次测试的最大值并且占一行。</span></p>','1 \n5 \n7 \n3 8 \n8 1 0  \n2 7 4 4 \n4 5 2 6 5','30','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1151,'三进制小数','<p><font face=\"Times New Roman\">你的任务呢，是将一个有理数转换成三进制小数。&ldquo;什么是三进制小数呢？&rdquo;你一定会问，这很明白，就是以三为基（二进制数以2为基，而十进制数则以10为基）的小数。 </font><br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">有理数的值都是在0与1之间的，每个有理数都由一个分子和一个分母表示，分子与分母之间隔着一个斜杠。有理数的个数不会超过1000个。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出格式见样本输出，它是以小数点开头的具有10位精度的3进制数。 <br />\n<br />\n</font></p>','1/3\n1/4\n1/6\n7/8','.1000000000\n.0202020202\n.0111111111\n.2121212122\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1152,'上车人数','<p><font size=\"3\" face=\"Times New Roman\">公共汽车从始发站(称为第1站)开出,在始发站上车的人数为a,然后到达 第2站,在第2站有人上、下车,但上、下车的人数相同，因此在第2站开出时（即在到达第3站之前）车上的人数保持为a人。从第3站起（包括第3站）上、下 车的人数有一定的规律：上车的人数都是前两站上车人数之和，而下车人数等于上一站上车人数，一直到终点站的前一站（第n-1站），都满足此规律。现给出的 条件是：共有n个车站，始发站上车的人数为a,最后一站下车的人数是m（全部下车）。试问从x站开出时车上的人数是多少？</font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一行，四个整数a,n,m和x </font></p>','<p><font size=\"3\" face=\"Times New Roman\">x站开出时车上的人数</font></p>','5 7 32 4','13','0','','吉首大学软件学院\n','2017-04-30 15:05:04',1,128,'N',0,0,0),(1153,'不容易系列','<p><font face=\"Times New Roman\">你活的不容易，我活的不容易，他活的也不容易。不过，如果你看了下面的故事，就会知道，有位老汉比你还不容易。 <br />\n重庆市郊黄泥板村的徐老汉（大号徐东海，简称XDH）这两年辛辛苦苦养了不少羊，到了今年夏天，由于众所周知的高温干旱，实在没办法解决牲畜的饮水问题，就决定把这些羊都赶到集市去卖。从黄泥板村到交易地点要经过N个收费站，按说这收费站和徐老汉没什么关系，但是事实却令徐老汉欲哭无泪： <br />\n（镜头回放） <br />\n近景：老汉，一群羊 <br />\n远景：公路，收费站 <br />\n...... <br />\n收费员（彬彬有礼+职业微笑）：&ldquo;老同志，请交过路费！&rdquo; <br />\n徐老汉（愕然，反应迟钝状）：&ldquo;锅，锅，锅，锅-炉-费？我家不烧锅炉呀？&rdquo; <br />\n收费员（职业微笑依然）：&ldquo;老同志，我说的是过-路-费，就是你的羊要过这个路口必须交费，understand?&rdquo; <br />\n徐老汉（近镜头10秒，嘴巴张开）：&ldquo;我-我-我知道汽车过路要收费，这羊也要收费呀？&rdquo; <br />\n收费员（居高临下+不解状）：&ldquo;老同志，你怎么就不明白呢，那么我问你，汽车几个轮子？&rdquo; <br />\n徐老汉（稍放松）：&ldquo;这个我知道，今天在家里我孙子还问我这个问题，4个！&rdquo; <br />\n收费员（生气，站起）：&ldquo;嘿！老头，你还骂人不带脏字，既然知道汽车四个轮子，难道就不知道这羊有几条腿吗？！&rdquo; <br />\n徐老汉（尴尬，依然不解状）：&ldquo;也，也，也是4个呀，这有关系吗？&rdquo; <br />\n收费员（生气，站起）：&ldquo;怎么没关系！我们头说了，只要是4条腿的都要收费！&rdquo; <br />\n...... <br />\n(画外音) <br />\n由于徐老汉没钱，收费员就将他的羊拿走一半，看到老汉泪水涟涟，犹豫了一下，又还给老汉一只。巧合的是，后面每过一个收费站，都是拿走当时羊的一半，然后退还一只，等到老汉到达市场，就只剩下3只羊了。 <br />\n你,当代有良知的青年，能帮忙算一下老汉最初有多少只羊吗？ </font><br />\n</p>','<p><font face=\"Times New Roman\">输入数据第一行是一个整数N，下面由N行组成， <br />\n每行包含一个整数a(0＜a＜=30),表示收费站的数量。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，请输出最初的羊的数量,每个测试实例的输出占一行。</font></p>','2\n1\n2\n\n','4\n6\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1154,'不容易系列2','<p><font size=\"3\" face=\"Times New Roman\">大家常常感慨，要做好一件事情真的不容易，确实，失败比成功容易多了！ <br />\n做好&ldquo;一件&rdquo;事情尚且不易，若想永远成功而总从不失败，那更是难上加难了，就像花钱总是比挣钱容易的道理一样。 <br />\n话虽这样说，我还是要告诉大家，要想失败到一定程度也是不容易的。比如，我高中的时候，就有一个神奇的女生，在英语考试的时候，竟然把40个单项选择题全部做错了！大家都学过概率论，应该知道出现这种情况的概率，所以至今我都觉得这是一件神奇的事情。如果套用一句经典的评语，我们可以这样总结：一个人做错一道选择题并不难，难的是全部做错，一个不对。 <br />\n不幸的是，这种小概率事件又发生了，而且就在我们身边： <br />\n事情是这样的――HDU有个网名叫做8006的男性同学，结交网友无数，最近该同学玩起了浪漫，同时给n个网友每人写了一封信，这都没什么，要命的是，他竟然把所有的信都装错了信封！注意了，是全部装错哟！ <br />\n现在的问题是：请大家帮可怜的8006同学计算一下，一共有多少种可能的错误方式呢？ <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个多个测试实例，每个测试实例占用一行，每行包含一个正整数n（２＜n＜=20），n表示8006的网友的人数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每行输入请输出可能的错误方式的数量，每个实例的输出占用一行。</font></p>','2\n3\n\n','1\n2\n\n','0','<p><font face=\"Times New Roman\">装错信封问题 <br />\n这个问题是由 18 世纪初的法国数学家蒙摩提出来的。 <br />\n<br />\n某人给五个朋友写信，邀请他们来家中聚会。请柬和信封交由助手去处理。粗心的助手却把请柬全装错了信封。请问：助手会有多少种装错的可能呢？ <br />\n<br />\n<br />\n-------------------------------------------------------------------------------- <br />\n<br />\n<br />\n瑞士数学家欧拉按一般情况给出了一个递推公式： <br />\n<br />\n用Ａ、Ｂ、Ｃ&hellip;&hellip;表示写着ｎ位友人名字的信封，ａ、ｂ、ｃ&hellip;&hellip;表示ｎ份相应的写好的信纸。把错装的总数为记作 f(n) 。假设把ａ错装进Ｂ里了，包含着这个错误的一切错装法分两类： <br />\n<br />\n（１）ｂ装入Ａ里，这时每种错装的其余部分都与Ａ、Ｂ、ａ、ｂ无关，应有 f(n-2) 种错装法。　　　　 <br />\n<br />\n（２）ｂ装入Ａ、Ｂ之外的一个信封，这时的装信工作实际是把（除ａ之外的）　　份信纸ｂ、ｃ&hellip;&hellip;装入（除Ｂ以外的）ｎ－１个信封Ａ、Ｃ&hellip;&hellip;，显然这时装错的方法有 f(n-1) 种。 <br />\n<br />\n总之在ａ装入Ｂ的错误之下，共有错装法 f(n-2)+f(n-1) 种。ａ装入Ｃ，装入Ｄ&hellip;&hellip;的ｎ－２种错误之下，同样都有 f(n-2)+f(n-1) 种错装法，因此 : <br />\n<br />\nf(n)=(n-1) {f(n-1)+f(n-2)} <br />\n<br />\n这是递推公式，令ｎ＝１、２、３、４、５逐个推算就能解答蒙摩的问题。 <br />\n<br />\nf(1)= 0， f (2)= 1， f (3)= 2， f (4)= 9， f (5)=44。 </font><br />\n<br />\n</p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1155,'人民币问题','<p><font face=\"Times New Roman\" size=\"3\">给出任意的人民币(&gt;10元)的整币兑换成5元、2元和1元币值（要求三种币值均有）的方法有多少种。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入任意的人民币(&gt;10元)的整币100,50,20,10</font></p>','<p><font face=\"Times New Roman\" size=\"3\">计算出兑换成5元、2元和1元币值（要求三种币值均有）的方法有多少种</font></p>','50\n','106\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1156,'人见人爱A+B','<p><font size=\"3\" face=\"Times New Roman\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 北大的acm上面已经有10来道A+B的题目了，相信这些题目曾经是大家的最爱，希望今天的这个A+B能给大家带来好运，也希望这个题目能唤起大家对ACM曾经的热爱。 <br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这个题目的A和B不是简单的整数，而是两个时间，A和B 都是由3个整数组成，分别表示时分秒，比如，假设A为34 45 56，就表示A所表示的时间是34小时 45分钟 56秒。 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多行组成，首先是一个整数N，表示测试实例的个数，然后是N行数据，每行有6个整数AH,AM,AS,BH,BM,BS，分别表示时间A和B所对应的时分秒。题目保证所有的数据合法。 </font></p>','<p>对于每个测试实例，输出A+B，每个输出结果也是由时分秒3部分组成，同时也要满足时间的规则（即：分和秒的取值范围在0~59），每个输出占一行，并且所有的部分都可以用32位整数表示。</p>','1\n1 2 3 4 5 6\n','5 7 9\n','0','','软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1157,'众数问题','<p><font face=\"Times New Roman\">问题描述： <br />\n给定含有n个元素的多重集合S，每个元素在S中出现的次数称为该元素的重数。多重集S中重数最大的元素称为众数。 <br />\n例如，S={1，2，2，2，3，5}。多重集S的众数是2，其重数为3。 <br />\n编程任务： <br />\n对于给定的由n 个自然数组成的多重集S，编程计算S 的众数及其重数。 </font></p>','<p><font face=\"Times New Roman\">第1行多重集S中元素个数n(n&lt;=50000)；接下来的n 行中，每行有一个自然数。</font></p>','<p><font face=\"Times New Roman\">输出文件有2 行，第1 行给出众数，第2 行是重数。(如果有多个众数，只输出最小的)</font></p>','6\n1\n2\n2\n2\n3\n5\n','2\n3','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1158,'作业调度方案','<p><font size=\"3\" face=\"Times New Roman\">我们现在要利用m台机器加工n个工件，每个工件都有m道工序，每道工序都在不同的指定的机器上完成。每个工件的每道工序都有指定的加工时间。  <br />\n每个工件的每个工序称为一个操作，我们用记号j-k表示一个操作，其中j为1到n中的某个数字，为工件号；k为1到m中的某个数字，为工序号，例如2-4表示第2个工件第4道工序的这个操作。在本题中，我们还给定对于各操作的一个安排顺序。  <br />\n例如，当n=3，m=2时，&ldquo;1-1，1-2，2-1，3-1，3-2，2-2&rdquo;就是一个给定的安排顺序，即先安排第1个工件的第1个工序，再安排第1个工件的第2个工序，然后再安排第2个工件的第1个工序，等等。  <br />\n一方面，每个操作的安排都要满足以下的两个约束条件。  <br />\n(1) 对同一个工件，每道工序必须在它前面的工序完成后才能开始；  <br />\n(2) 同一时刻每一台机器至多只能加工一个工件。  <br />\n另一方面，在安排后面的操作时，不能改动前面已安排的操作的工作状态。  <br />\n由于同一工件都是按工序的顺序安排的，因此，只按原顺序给出工件号，仍可得到同样的安排顺序，于是，在输入数据中，我们将这个安排顺序简写为&ldquo;1 1 2 3 3 2&rdquo;。  <br />\n还要注意，&ldquo;安排顺序&rdquo;只要求按照给定的顺序安排每个操作。不一定是各机器上的实际操作顺序。在具体实施时，有可能排在后面的某个操作比前面的某个操作先完成。  <br />\n例如，取n=3,m=2，已知数据如下：  <br />\n<br />\n则对于安排顺序&ldquo;1 1 2 3 3 2&rdquo;，下图中的两个实施方案都是正确的。但所需要的总时间分别是10与12。 <br />\n<br />\n当一个操作插入到某台机器的某个空档时（机器上最后的尚未安排操作的部分也可以看作一个空档），可以靠前插入，也可以靠后或居中插入。为了使问题 简单一些，我们约定：在保证约束条件（1）（2）的条件下，尽量靠前插入。并且，我们还约定，如果有多个空档可以插入，就在保证约束条件（1）（2）的条 件下，插入到最前面的一个空档。于是，在这些约定下，上例中的方案一是正确的，而方案二是不正确的。  <br />\n显然，在这些约定下，对于给定的安排顺序，符合该安排顺序的实施方案是唯一的，请你计算出该方案完成全部任务所需的总时间。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行为两个正整数，用一个空格隔开：  <br />\nm n  <br />\n（其中m（〈20）表示机器数，n（〈20）表示工件数）  <br />\n第2行： 2n个用空格隔开的数，为给定的安排顺序。  <br />\n接下来的2n行，每行都是用空格隔开的m个正整数，每个数不超过20。  <br />\n其中前n行依次表示每个工件的每个工序所使用的机器号，第1个数为第1个工序的机器号，第2个数为第2个工序机器号，等等。  <br />\n后n行依次表示每个工件的每个工序的加工时间。  <br />\n可以保证，以上各数据都是正确的，不必检验。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为最少的加工时间。</font></p>','2 3\n1 1 2 3 3 2\n1 2 \n1 2 \n2 1\n3 2 \n2 5 \n2 4','10','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1159,'倒杨辉三角形','<p><font size=\"3\" face=\"Times New Roman\">Fans喜欢图形，而且喜欢把图形倒过来欣赏。有一次，他看见杨辉三角形 了，觉得很新鲜，于是就把它们大大小小地摆布出来。输入一些整数n（1&le;n&le;10），读入其每个整数，以该整数为行数，其画出来的倒杨辉三角形（每个数据 占三个字符）就是fans所喜欢欣赏的。Fans是手工做的，你却可以用编程更快捷地做出来，多爽啊! </font></p>','','','5\n3','1 4 6 4 1\n 1 3 3 1\n  1 2 1\n   1 1\n    1\n\n1 2 1\n 1 1\n  1','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1160,'假币问题','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">居然有假币！！！<span class=\"Apple-converted-space\">&nbsp;</span><br />\n事情是这样的，现在猪肉涨了，但是农民的工资却不见涨啊，没钱怎么买猪肉啊。老王这就去买猪肉，结果找来的零钱中有假币！！！可惜老王一不小心把它混进了一堆真币里面去了。现在知道假币的重量比真币的质量要轻。给你一个天平，请用最快的时间把那个可恶的假币找出来。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入有多行,每一行的值为硬币的数目n,1&le;n&le;2^30,输入0结束程序</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">最少要称多少次一定能把那个假币找出来。输出对应输入行数.</span></p>','3\n12\n0\n','1\n3','0','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">示例1中共有3枚硬币，所以任意取2个放天平上称量一下。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n因为假币的重量比较轻。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n如果天平不平衡，则较轻的那枚就是假币。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n如果天平平衡，则说明这两枚硬币都是真的，而剩下那枚是假币。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1161,'做幻方','<p><font size=\"3\" face=\"Times New Roman\">Apple最近迷上了做幻方，Apple还是个中高手，只要你说个奇数N就能把N*N的幻方做出来。其实你可以比他做得更好的。Apple总是画得很乱，而你可以利用程序排得很整齐^_^ 幻方的要求：每一行，每一列，还有两条斜线上数字的和都相等. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行一个奇数N(0&lt; N &lt; 30),输入0结束  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入一个奇数，输出一个幻方，顺序参照样板输出；同一列的数右对齐，数与数用一个空格分开；输出完以后加一个回车。</font></p>','5\n1\n0','11 18 25  2  9\n10 12 19 21  3\n 4  6 13 20 22\n23  5  7 14 16\n17 24  1  8 15\n\n1','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1162,'内码对称','<p><font size=\"3\" face=\"Times New Roman\">C++中int型整数内码是一个32位的01序列，该01序列有些是对称的，有些是不对称的。对于给定的一个整数，在一些场合，需要判断其整数内码的对称性。这个事情要做好还非你不行呢。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入中含有一些整数n（0&le;n〈2^32）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">统计其中一共有多少个其内码对称的整数，输出之。</font></p>','0\n1\n2147483649\n2\n3','2','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1163,'剔除相关数','<p><font face=\"Times New Roman\">一个数与另一个数如果含有相同数字和个数的字符，则称两数相关。现有一堆乱七八糟的整数，里面可能充满了彼此相关的数，请你用一下手段，自动地将其剔除。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每组数据前有一个N(&lt;1000)，表示跟随的整数P(0</font>\n<p></p>\n</p>','<p>按从小到大的顺序输出非相关数，若没有非相关数，则输出None</p>','8\n213 667 3 213 43 34 677 2\n3\n322 232 232\n0\n\n','2 3 667 677\nNone\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1164,'化学品问题','<p><font size=\"3\" face=\"Times New Roman\">一个实验室有N个放化学品的试管，排列在一条直线上。如果连续M个试管中放入药品，则会发生爆炸，于是，在某些试管中可能不放药品。 <br />\n任务：对于给定的N和M，求不发生爆炸的放置药品的方案总数 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行是一个正整数L，代表输入数据的组数 <br />\n接下来L行，每行有两个正整数N，M( 1＜N＜32，2&le;M&le;5) <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出L行，每行只有一个正整数S，表示对应输入数据的方案总数。</font></p>','2\n4 3\n3 2\n\n','13\n5\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1165,'十->二进制转换','<p><font face=\"Times New Roman\">将十进制整数转换成二进制数</font></p>','<p><font face=\"Times New Roman\">输入数据中含有不多于50个整数n（-2^16＜n＜2^16）。</font></p>','<p><font face=\"Times New Roman\">对于每个n，以11位的宽度右对齐输出n值，然后输出&ldquo;--&gt;&rdquo;，再然后输出二进制数。每个整数n的输出，独立占一行。</font></p>','2\n0\n-12\n1\n','2―->10\n0-->0\n-12-->-1100\n1-->1\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1166,'半数集问题','<p><font face=\"Times New Roman\">问题描述： <br />\n给定一个自然数n，由n开始可以依次产生半数集set(n)中的数如下。 <br />\n(1) n&isin;set(n)； <br />\n(2) 在n的左边加上一个自然数，但该自然数不能超过最近添加的数的一半； <br />\n(3) 按此规则进行处理，直到不能再添加自然数为止。 <br />\n例如，set(6)={6,16,26,126,36,136}。半数集set(6)中有6 个元素。 <br />\n注意半数集是多重集。 <br />\n<br />\n编程任务： <br />\n对于给定的自然数n，编程计算半数集set(n)中的元素个数。 </font></p>','<p><font face=\"Times New Roman\">输入数据m行，每行给出一个整数n。(0〈n〈1000)</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出只有m行，每行给出半数集set(n)中的元素个数。</font></p>','6\n99\n','6\n9042\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1167,'去括号','<p><font size=\"3\" face=\"Times New Roman\">当老师不容易，尤其是当小学的老师更难:现在的小朋友做作业喜欢滥用括号。 <br />\n虽然不影响计算结果，但不够美观，容易出错，而且可读性差。但又不能一棒子打死，也许他们就是将来的&ldquo;陈景润&rdquo;呢！ <br />\n为了减轻老师的工作，不至于他们工作到深夜，我们来写个程序把小朋友的作业做一下简单地处理，去掉那些多余的括号。 <br />\n为了简化问题，所有式子里只存在小括号，运算符号包括+(加)、-(减)、*(乘)、/(除)、^(幂)。 <br />\n注意：去掉多余的小括号不是指运算结果一样就可以。 <br />\n比如：(1+2)^1 = 3。虽然把括号去掉1+2^1也等于3，但我们说这个括号不能去。 <br />\n但如：1+(2+3) = 1+2+3只要是允许的，因为加法是满足交换律和结合律的。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入包括多组测试数据。 <br />\n每组测试数据为一行算术表达式，只包括数字和运算符号，长度小于16。 <br />\n输入以#行结束，该行不做处理。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对应每组数据输入都有一行输出。 <br />\n输出去掉多余的括号后的表达式。</font></p>','((((1))))+((((1))))\n1\n1+1+1+1\n((1+2)+3)*4\n(1+(2+3))*4\n((1*2)*3)*4\n(1*(2*3))*4\n((1*2)*(3*4))\n1*((2*3)*4)\n1*(2*(3*4))\n((1*2)*4)*3\n(1*(2*4))*3\n((1*2)*(4*3))\n1*((2*4)*3)\n1*(2*(4*3))\n((1+3)+2)*4\n(1+(3+2))*4\n((1+3)*(2+4))\n((1*3)*2)*4\n(1*(3*2))*4\n((1*3)*(2*4))\n1*((3*2)*4)\n1*(3*(2*4))\n((1+3)*(4+2))\n((1*3)*4)*2\n(1*(3*4))*2\n((1*3)*(4*2))\n1*((3*4)*2)\n1*(3*(4*2))\n((1*4)*3)*2\n(1*(4*3))*2\n((1*4)*(3*2))\n1*((4*3)*2)\n1*(4*(3*2))\n((1*4)*2)*3\n(1*(4*2))*3\n((1*4)*(2*3))\n1*((4*2)*3)\n1*(4*(2*3))\n((2+1)+3)*4\n(2+(1+3))*4\n((2*1)*3)*4\n(2*(1*3))*4\n((2*1)*(3*4))\n2*((1*3)*4)\n2*(1*(3*4))\n((2/1)*3)*4\n((2/1)*(3*4))\n(2/(1/3))*4\n2/(1/(3*4))\n2/((1/3)/4)\n((2^1)*3)*4\n((2^1)*(3*4))\n((2*1)*4)*3\n(2*(1*4))*3\n((2*1)*(4*3))\n2*((1*4)*3)\n2*(1*(4*3))\n((2/1)*4)*3\n((2/1)*(4*3))\n(2/(1/4))*3\n2/(1/(4*3))\n2/((1/4)/3)\n((2^1)*4)*3\n((2^1)*(4*3))\n((2+3)+1)*4\n(2+(3+1))*4\n((2*3)*1)*4\n(2*(3*1))*4\n((2*3)*(1*4))\n2*((3*1)*4)\n2*(3*(1*4))\n((2*3)/1)*4\n(2*(3/1))*4\n2*((3/1)*4)\n((2*3)/(1/4))\n2*(3/(1/4))\n((2*3)^1)*4\n(2*(3^1))*4\n2*((3^1)*4)\n((2*3)*4)*1\n(2*(3*4))*1\n((2*3)*(4*1))\n2*((3*4)*1)\n2*(3*(4*1))\n((2*3)*4)/1\n(2*(3*4))/1\n((2*3)*(4/1))\n2*((3*4)/1)\n2*(3*(4/1))\n((2*3)*4)^1\n(2*(3*4))^1\n((2*3)*(4^1))\n2*((3*4)^1)\n2*(3*(4^1))\n((2^3)*(4-1))\n((2+4)*(3+1))\n((2*4)*3)*1\n(2*(4*3))*1\n((2*4)*(3*1))\n2*((4*3)*1)\n2*(4*(3*1))\n((2*4)*3)/1\n(2*(4*3))/1\n((2*4)*(3/1))\n2*((4*3)/1)\n2*(4*(3/1))\n((2*4)*3)^1\n(2*(4*3))^1\n((2*4)*(3^1))\n2*((4*3)^1)\n2*(4*(3^1))\n((2+4)*(1+3))\n((2*4)*1)*3\n(2*(4*1))*3\n((2*4)*(1*3))\n2*((4*1)*3)\n2*(4*(1*3))\n((2*4)/1)*3\n(2*(4/1))*3\n2*((4/1)*3)\n((2*4)/(1/3))\n2*(4/(1/3))\n((2*4)^1)*3\n(2*(4^1))*3\n2*((4^1)*3)\n(2^(4-1))*3\n((3+2)+1)*4\n(3+(2+1))*4\n((3*2)*1)*4\n(3*(2*1))*4\n((3*2)*(1*4))\n3*((2*1)*4)\n3*(2*(1*4))\n((3*2)/1)*4\n(3*(2/1))*4\n3*((2/1)*4)\n((3*2)/(1/4))\n3*(2/(1/4))\n((3*2)^1)*4\n(3*(2^1))*4\n3*((2^1)*4)\n3/(2^(1-4))\n((3*2)*4)*1\n(3*(2*4))*1\n((3*2)*(4*1))\n3*((2*4)*1)\n3*(2*(4*1))\n((3*2)*4)/1\n(3*(2*4))/1\n((3*2)*(4/1))\n3*((2*4)/1)\n3*(2*(4/1))\n((3*2)*4)^1\n(3*(2*4))^1\n((3*2)*(4^1))\n3*((2*4)^1)\n3*(2*(4^1))\n3*(2^(4-1))\n((3+1)+2)*4\n(3+(1+2))*4\n((3+1)*(2+4))\n((3*1)*2)*4\n(3*(1*2))*4\n((3*1)*(2*4))\n3*((1*2)*4)\n3*(1*(2*4))\n((3/1)*2)*4\n((3/1)*(2*4))\n(3/(1/2))*4\n3/(1/(2*4))\n3/((1/2)/4)\n((3^1)*2)*4\n((3^1)*(2*4))\n((3+1)*(4+2))\n((3*1)*4)*2\n(3*(1*4))*2\n((3*1)*(4*2))\n3*((1*4)*2)\n3*(1*(4*2))\n((3/1)*4)*2\n((3/1)*(4*2))\n(3/(1/4))*2\n3/(1/(4*2))\n3/((1/4)/2)\n((3^1)*4)*2\n((3^1)*(4*2))\n((3*4)*1)*2\n(3*(4*1))*2\n((3*4)*(1*2))\n3*((4*1)*2)\n3*(4*(1*2))\n((3*4)/1)*2\n(3*(4/1))*2\n3*((4/1)*2)\n((3*4)/(1/2))\n3*(4/(1/2))\n((3*4)^1)*2\n(3*(4^1))*2\n3*((4^1)*2)\n((3*4)*2)*1\n(3*(4*2))*1\n((3*4)*(2*1))\n3*((4*2)*1)\n3*(4*(2*1))\n((3*4)*2)/1\n(3*(4*2))/1\n((3*4)*(2/1))\n3*((4*2)/1)\n3*(4*(2/1))\n((3*4)*2)^1\n(3*(4*2))^1\n((3*4)*(2^1))\n3*((4*2)^1)\n3*(4*(2^1))\n((4+2)*(3+1))\n4*((2+3)+1)\n4*(2+(3+1))\n((4*2)*3)*1\n(4*(2*3))*1\n((4*2)*(3*1))\n4*((2*3)*1)\n4*(2*(3*1))\n((4*2)*3)/1\n(4*(2*3))/1\n((4*2)*(3/1))\n4*((2*3)/1)\n4*(2*(3/1))\n((4*2)*3)^1\n(4*(2*3))^1\n((4*2)*(3^1))\n4*((2*3)^1)\n4*(2*(3^1))\n((4+2)*(1+3))\n4*((2+1)+3)\n4*(2+(1+3))\n((4*2)*1)*3\n(4*(2*1))*3\n((4*2)*(1*3))\n4*((2*1)*3)\n4*(2*(1*3))\n((4*2)/1)*3\n(4*(2/1))*3\n4*((2/1)*3)\n((4*2)/(1/3))\n4*(2/(1/3))\n((4*2)^1)*3\n(4*(2^1))*3\n4*((2^1)*3)\n4*((3+2)+1)\n4*(3+(2+1))\n((4*3)*2)*1\n(4*(3*2))*1\n((4*3)*(2*1))\n4*((3*2)*1)\n4*(3*(2*1))\n((4*3)*2)/1\n(4*(3*2))/1\n((4*3)*(2/1))\n4*((3*2)/1)\n4*(3*(2/1))\n((4*3)*2)^1\n(4*(3*2))^1\n((4*3)*(2^1))\n4*((3*2)^1)\n4*(3*(2^1))\n4*((3+1)+2)\n4*(3+(1+2))\n((4*3)*1)*2\n(4*(3*1))*2\n((4*3)*(1*2))\n4*((3*1)*2)\n4*(3*(1*2))\n((4*3)/1)*2\n(4*(3/1))*2\n4*((3/1)*2)\n((4*3)/(1/2))\n4*(3/(1/2))\n((4*3)^1)*2\n(4*(3^1))*2\n4*((3^1)*2)\n4*((1+3)+2)\n4*(1+(3+2))\n((4*1)*3)*2\n(4*(1*3))*2\n((4*1)*(3*2))\n4*((1*3)*2)\n4*(1*(3*2))\n((4/1)*3)*2\n((4/1)*(3*2))\n(4/(1/3))*2\n4/(1/(3*2))\n4/((1/3)/2)\n((4^1)*3)*2\n((4^1)*(3*2))\n((4-1)*(2^3))\n4*((1+2)+3)\n4*(1+(2+3))\n((4*1)*2)*3\n(4*(1*2))*3\n((4*1)*(2*3))\n4*((1*2)*3)\n4*(1*(2*3))\n((4/1)*2)*3\n((4/1)*(2*3))\n(4/(1/2))*3\n4/(1/(2*3))\n4/((1/2)/3)\n((4^1)*2)*3\n((4^1)*(2*3))\n#\n','1+1\n1\n1+1+1+1\n(1+2+3)*4\n(1+2+3)*4\n1*2*3*4\n1*2*3*4\n1*2*3*4\n1*2*3*4\n1*2*3*4\n1*2*4*3\n1*2*4*3\n1*2*4*3\n1*2*4*3\n1*2*4*3\n(1+3+2)*4\n(1+3+2)*4\n(1+3)*(2+4)\n1*3*2*4\n1*3*2*4\n1*3*2*4\n1*3*2*4\n1*3*2*4\n(1+3)*(4+2)\n1*3*4*2\n1*3*4*2\n1*3*4*2\n1*3*4*2\n1*3*4*2\n1*4*3*2\n1*4*3*2\n1*4*3*2\n1*4*3*2\n1*4*3*2\n1*4*2*3\n1*4*2*3\n1*4*2*3\n1*4*2*3\n1*4*2*3\n(2+1+3)*4\n(2+1+3)*4\n2*1*3*4\n2*1*3*4\n2*1*3*4\n2*1*3*4\n2*1*3*4\n2/1*3*4\n2/1*3*4\n2/(1/3)*4\n2/(1/(3*4))\n2/(1/3/4)\n2^1*3*4\n2^1*3*4\n2*1*4*3\n2*1*4*3\n2*1*4*3\n2*1*4*3\n2*1*4*3\n2/1*4*3\n2/1*4*3\n2/(1/4)*3\n2/(1/(4*3))\n2/(1/4/3)\n2^1*4*3\n2^1*4*3\n(2+3+1)*4\n(2+3+1)*4\n2*3*1*4\n2*3*1*4\n2*3*1*4\n2*3*1*4\n2*3*1*4\n2*3/1*4\n2*3/1*4\n2*3/1*4\n2*3/(1/4)\n2*3/(1/4)\n(2*3)^1*4\n2*3^1*4\n2*3^1*4\n2*3*4*1\n2*3*4*1\n2*3*4*1\n2*3*4*1\n2*3*4*1\n2*3*4/1\n2*3*4/1\n2*3*4/1\n2*3*4/1\n2*3*4/1\n(2*3*4)^1\n(2*3*4)^1\n2*3*4^1\n2*(3*4)^1\n2*3*4^1\n2^3*(4-1)\n(2+4)*(3+1)\n2*4*3*1\n2*4*3*1\n2*4*3*1\n2*4*3*1\n2*4*3*1\n2*4*3/1\n2*4*3/1\n2*4*3/1\n2*4*3/1\n2*4*3/1\n(2*4*3)^1\n(2*4*3)^1\n2*4*3^1\n2*(4*3)^1\n2*4*3^1\n(2+4)*(1+3)\n2*4*1*3\n2*4*1*3\n2*4*1*3\n2*4*1*3\n2*4*1*3\n2*4/1*3\n2*4/1*3\n2*4/1*3\n2*4/(1/3)\n2*4/(1/3)\n(2*4)^1*3\n2*4^1*3\n2*4^1*3\n2^(4-1)*3\n(3+2+1)*4\n(3+2+1)*4\n3*2*1*4\n3*2*1*4\n3*2*1*4\n3*2*1*4\n3*2*1*4\n3*2/1*4\n3*2/1*4\n3*2/1*4\n3*2/(1/4)\n3*2/(1/4)\n(3*2)^1*4\n3*2^1*4\n3*2^1*4\n3/2^(1-4)\n3*2*4*1\n3*2*4*1\n3*2*4*1\n3*2*4*1\n3*2*4*1\n3*2*4/1\n3*2*4/1\n3*2*4/1\n3*2*4/1\n3*2*4/1\n(3*2*4)^1\n(3*2*4)^1\n3*2*4^1\n3*(2*4)^1\n3*2*4^1\n3*2^(4-1)\n(3+1+2)*4\n(3+1+2)*4\n(3+1)*(2+4)\n3*1*2*4\n3*1*2*4\n3*1*2*4\n3*1*2*4\n3*1*2*4\n3/1*2*4\n3/1*2*4\n3/(1/2)*4\n3/(1/(2*4))\n3/(1/2/4)\n3^1*2*4\n3^1*2*4\n(3+1)*(4+2)\n3*1*4*2\n3*1*4*2\n3*1*4*2\n3*1*4*2\n3*1*4*2\n3/1*4*2\n3/1*4*2\n3/(1/4)*2\n3/(1/(4*2))\n3/(1/4/2)\n3^1*4*2\n3^1*4*2\n3*4*1*2\n3*4*1*2\n3*4*1*2\n3*4*1*2\n3*4*1*2\n3*4/1*2\n3*4/1*2\n3*4/1*2\n3*4/(1/2)\n3*4/(1/2)\n(3*4)^1*2\n3*4^1*2\n3*4^1*2\n3*4*2*1\n3*4*2*1\n3*4*2*1\n3*4*2*1\n3*4*2*1\n3*4*2/1\n3*4*2/1\n3*4*2/1\n3*4*2/1\n3*4*2/1\n(3*4*2)^1\n(3*4*2)^1\n3*4*2^1\n3*(4*2)^1\n3*4*2^1\n(4+2)*(3+1)\n4*(2+3+1)\n4*(2+3+1)\n4*2*3*1\n4*2*3*1\n4*2*3*1\n4*2*3*1\n4*2*3*1\n4*2*3/1\n4*2*3/1\n4*2*3/1\n4*2*3/1\n4*2*3/1\n(4*2*3)^1\n(4*2*3)^1\n4*2*3^1\n4*(2*3)^1\n4*2*3^1\n(4+2)*(1+3)\n4*(2+1+3)\n4*(2+1+3)\n4*2*1*3\n4*2*1*3\n4*2*1*3\n4*2*1*3\n4*2*1*3\n4*2/1*3\n4*2/1*3\n4*2/1*3\n4*2/(1/3)\n4*2/(1/3)\n(4*2)^1*3\n4*2^1*3\n4*2^1*3\n4*(3+2+1)\n4*(3+2+1)\n4*3*2*1\n4*3*2*1\n4*3*2*1\n4*3*2*1\n4*3*2*1\n4*3*2/1\n4*3*2/1\n4*3*2/1\n4*3*2/1\n4*3*2/1\n(4*3*2)^1\n(4*3*2)^1\n4*3*2^1\n4*(3*2)^1\n4*3*2^1\n4*(3+1+2)\n4*(3+1+2)\n4*3*1*2\n4*3*1*2\n4*3*1*2\n4*3*1*2\n4*3*1*2\n4*3/1*2\n4*3/1*2\n4*3/1*2\n4*3/(1/2)\n4*3/(1/2)\n(4*3)^1*2\n4*3^1*2\n4*3^1*2\n4*(1+3+2)\n4*(1+3+2)\n4*1*3*2\n4*1*3*2\n4*1*3*2\n4*1*3*2\n4*1*3*2\n4/1*3*2\n4/1*3*2\n4/(1/3)*2\n4/(1/(3*2))\n4/(1/3/2)\n4^1*3*2\n4^1*3*2\n(4-1)*2^3\n4*(1+2+3)\n4*(1+2+3)\n4*1*2*3\n4*1*2*3\n4*1*2*3\n4*1*2*3\n4*1*2*3\n4/1*2*3\n4/1*2*3\n4/(1/2)*3\n4/(1/(2*3))\n4/(1/2/3)\n4^1*2*3\n4^1*2*3\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1168,'去掉双斜杠注释','<p>\n<table border=\"0\" width=\"100%\" background=\"images/table_back.jpg\">\n    <tbody>\n        <tr>\n            <td>\n            <p><font size=\"3\" face=\"Times New Roman\">将C程序代码中的双斜杠注释去掉。</font></p>\n            </td>\n        </tr>\n    </tbody>\n</table>\n</p>','<p><font face=\"Times New Roman\">输入数据中含有一些符合C++语法的代码行。需要说明的是，为了方便编程，规定双斜杠注释内容不含有双引号,源程序中没空行。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出不含有双斜杠注释的C++代码，除了注释代码之外，原语句行格式不变。 </font></p>','//======================\n// simplest program\n//======================\n#include\nusing namespace std;\n//----------------------\nint main(){\n  cout<<”hello world!\\n”;\n}//---------------------\n\n','#include\nusing namespace std;\nint main(){\n  cout<<”hello world!\\n”;\n}\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1169,'去掉空格','<p><font size=\"3\" face=\"Times New Roman\">读入一些字符串，将其中的空格去掉。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入为多行，每行为一个字符串，字符串只由字母、数字和空格组成，长度不超过80。输入以&ldquo;End of file&rdquo;结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每行输入，输出转换后的字符串。</font></p>','\nHello World\n1 2 3\nNice to meet you\nabc\n','HelloWorld\n123\nNicetomeetyou\nabc\n\n','0','<p><font face=\"Times New Roman\">用scanf是不能读入一行有空格的字符串的，用gets吧。 用&ldquo;gets(str) != NULL&rdquo;可以判断输入是否结束，如果此条件为假（即gets(str) == NULL），则表示输入结束（对于本题）。</font></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1170,'发工资咯','<p><font face=\"Times New Roman\">作为吉大的老师，最盼望的日子就是每月的9号了，因为这一天是发工资的日子，养家糊口就靠它了，呵呵 <br />\n但是对于学校财务处的工作人员来说，这一天则是很忙碌的一天，财务处的小胡老师最近就在考虑一个问题：如果每个老师的工资额都知道，最少需要准备多少张人民币，才能在给每位老师发工资的时候都不用老师找零呢？ <br />\n这里假设老师的工资都是正整数，单位元，人民币一共有100元、50元、10元、5元、2元和1元六种。</font></p>','<p><font face=\"Times New Roman\">输入数据包含多个测试实例，每个测试实例的第一行是一个整数n（n&lt;100），表示老师的人数，然后是n个老师的工资。 <br />\nn=0表示输入的结束，不做处理。</font></p>','<p><font face=\"Times New Roman\">对于每个测试实例输出一个整数x,表示至少需要准备的人民币张数。每个输出占一行。</font></p>','3 1 2 3\n0','4','0','','吉首大学软件学院','2017-04-30 15:05:04',1000,65536,'N',0,0,0),(1171,'取石子游戏','<p><font size=\"3\" face=\"Times New Roman\">有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。 </font></p>','2	1\n','0\n','0','','软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1172,'哥德巴赫曾猜测','<p><font face=\"Times New Roman\" size=\"3\">德国数学家哥德巴赫曾猜测：任何大于6的偶数都可以分解成两个素数（素数对）的和。但有些偶数可以分解成多种素数对的和，如：  10=3+7，10=5+5，即10可以分解成两种不同的素数对</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入任意的&gt;6的正偶数(&lt;32767)</font></p>','<p><font face=\"Times New Roman\" size=\"3\">试求给出的偶数可以分解成多少种不同的素数对（注：  A+B与B+A认为是相同素数对）</font></p>','1234\n','25\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1173,'回文串','<p><font face=\"Times New Roman\" size=\"3\">回文串是从左到右或者从右到左读起来都一样的字符串，试编程判别一个字符串是否为回文串。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入一个字符串。串长度&lt;255.</font></p>','<p><font face=\"Times New Roman\" size=\"3\">判别输入的字符串是否为回文串，是输出&quot;Y&quot;,否则输出&quot;N&quot;。</font></p>','abcba\n','Y\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1174,'回文数(一)','<p>若一个数（首位不为0）从左到右读与从右到左读都是一样，这个数就叫做回文数，例如12521就是一个回文数。 <br />\n给定一个正整数，把它的每一个位上的数字倒过来排列组成一个新数，然后与原数相加，如果是回文数则停止，如果不是，则重复这个操作，直到和为回文数为止。给定的数本身不为回文数。 <br />\n例如：87则有： <br />\nSTEP1: 87+78=165 <br />\nSTEP2: 165+561=726 <br />\nSTEP3: 726+627=1353 <br />\nSTEP4: 1353+3531=4884 <br />\n编写一个程序，输入M（12&lt;=M&lt;=100）,输出最少经过几步可以得到回文数。如果在8步以内（含8步）不可能得到回文数，则输出0。 <br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">第1行一个正整数L,代表测试数据的组数。 <br />\n接下来L行每行一个整数M（12&lt;=M&lt;=100），M本身不为回文数； <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出L行，第i行对应输入数据的第i+1行，输出最少需要的步数；如果步数大于8，则输出0。</font></p>','3\n12\n87\n89\n\n','1\n4\n0\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1175,'多输入输出练习1','<p><font size=\"3\" face=\"Times New Roman\">给定很多行数据,要求输出每一行的最大值.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">程序有多行输入,每一行以0结束. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">有多行输出,对应输入的行数.</font></p>','23 -456 33 78 0\n43 23 987 66 -137 324 0\n544 27 7 9 102 234 -44 -732 723 0','78\n987\n723','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1176,'多输入输出练习2','<p><font size=\"3\" face=\"Times New Roman\">已之一个圆的半径,求面积.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入有多行,第一行是一个整数n(对应总行数),以下每一行只有一个浮点数(对应一个圆的半径).</font></p>','<font size=\"3\" face=\"Times New Roman\"> 输出有多行,每一行是跟输入对应面积.  <br />\n输出保留6位小数</font>','4\n3.14\n2.13\n6\n5.3','30.973933\n14.252671\n113.094000\n88.244735','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1177,'大小写转换','<p><font size=\"3\" face=\"Times New Roman\">读入一些字符串，将其中的小写字母转成大写字母（其他字符不变）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入为多行，每行为一个字符串，字符串只由字母和数字组成，长度不超过80。输入以&ldquo;End of file&rdquo;结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每行输入，输出转换后的字符串。</font></p>','Hello\nICPC2004\n12345abcde','HELLO\nICPC2004\n12345ABCDE','0','','吉首大学软件学院','2017-04-30 15:05:04',1000,65536,'N',0,0,0),(1178,'字符串的修改','<p>设A和B是两个字符串。我们要用最少的字符操作次数，将字符串A转换为字符串B。这里所说的字符操作共有三种： <br />\n<br />\n1. 删除一个字符； <br />\n2. 插入一个字符； <br />\n3. 将一个字符改为另一个字符。 <br />\n对任给的两个字符串A和B，计算出将字符串A变换为字符串B所用的最少字符操作次数。</p>','<p><font size=\"3\" face=\"Times New Roman\">第一行为字符串A；第二行为字符串B；字符串A和B的长度均小于200。 </font></p>','<p>只有一个正整数，为最少字符操作次数。</p>','sfdxbqw\ngfdgw\n\n','4\n','0','','吉首大学软件学院\n吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1179,'字符串问题','<p><font face=\"Times New Roman\" size=\"3\">字符串处理在计算机中有很多复杂的操作，但是这些复杂的操作都是由基本的字符串操作复合而成，要求编写一字符串颠倒的程序，把字符串中的字符颠倒位置。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入一字符串（&lt;255）</font></p>','<p><font face=\"Times New Roman\" size=\"3\">按位进行颠倒的结果。</font></p>','COMPUTER\n','RETUPMOC','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1180,'字符排列问题','<p><font size=\"3\" face=\"Times New Roman\">有n个字母，列出由该字母组成的字符串的全排列（相同的排列只计一次）。</font></p>','<p><font face=\"Times New Roman\">第一行输入是字母个数n，1&lt;=n&lt;=20。接下来一行输入的是待排列的n个字母。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">计算出的n 个字母的所有不同排列总数</font></p>','4\naacc\n\n','6','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1181,'孤独的骑士','<p><font face=\"Times New Roman\" size=\"3\">任务很简单. 确定国际象棋棋盘上处于骑士攻击之下的格子个数. 棋盘上没有其它棋子. 骑士的走法: 横(纵)向走两个格, 再纵(横)向走一个格(类似于中国象棋中的马).</font></p>','<p><font face=\"Times New Roman\" size=\"3\">第一行为测试次数N, 1 &le; N &le; 100. <br />\n后面N行每行包含一个坐标表示骑士的位置. <br />\n字母表示横向位置, 数字表示纵向位置. <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输出N行. 每行一个整数, 表示骑士可攻击的格子个数.</font></p>','3\na1\nd4\ng6\n\n','2\n8\n6\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1182,'密码截获','<p><font size=\"3\" face=\"Times New Roman\">Catcher是MCA国的情报员，他工作时发现敌国会用一些对称的密码 进行通信，比如像这些ABBA，ABA，A，123321，但是他们有时会在开始或结束时加入一些无关的字符以防止别国破解。比如进行下列变化 ABBA-&gt;12ABBA,ABA-&gt;ABAKK,123321-&gt;51233214　。因为截获的串太长了，而且存在多种可能的情况 （abaaab可看作是aba,或baaab的加密形式），Cathcer的工作量实在是太大了，他只能向电脑高手求助，你能帮Catcher找出最长的 有效密码串吗？ </font></p>','<p><font size=\"3\" face=\"Times New Roman\">测试数据有若干行字符串，包括字母，数字，符号。（字母区分大小写） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">与输入相对应每一行输出一个整数，代表最长有效密码串的长度。</font></p>','ABBA\n12ABBA\nA\nABAKK\n51233214\nabaaab','4\n4\n1\n3\n6\n5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1183,'小明A+B','<p><font size=\"3\" face=\"Times New Roman\">小明今年3岁了, 现在他已经能够认识100以内的非负整数,  并且能够进行100以内的非负整数的加法计算. 对于大于等于100的整数, 小明仅保留该数的最后两位进行计算, 如果计算结果大于等于100,  那么小明也仅保留计算结果的最后两位. 例如, 对于小明来说: 1) 1234和34是相等的 2) 35+80=15 给定非负整数A和B,  你的任务是代表小明计算出A+B的值.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据的第一行为一个正整数T, 表示测试数据的组数. 然后是T组测试数据. 每组测试数据包含两个非负整数A和B(A和B均在int型可表示的范围内). </font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组测试数据, 输出小明A+B的结果.</font></p>','2\n35 80\n15 1152','15\n67','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1184,'平方和与立方和','<p><font size=\"3\" face=\"Times New Roman\">给定一段连续的整数，求出他们中所有偶数的平方和以及所有奇数的立方和。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多组测试实例，每组测试实例包含一行，由两个整数m和n组成。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行，应包括两个整数x和y，分别表示该段连续的整数中所有偶数的平方和以及所有奇数的立方和。 <br />\n你可以认为32位整数足以保存结果。</font></p>','1 3\n2 5\n\n','4 28\n20 152\n\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1185,'年会','<p><font size=\"3\" face=\"Times New Roman\">背景  <br />\n某大学校长准备开一次年会. 该校的员工具有等级结构, 即师生关系构成一棵树, 以校长为树根. 员工号是1到N之间的整数. 人事部门把所有员工按活跃度排序. 为了让年会使所有参加者都玩的高兴, 校长不想让任何一个员工和他/她的直接导师同时被邀请.  <br />\n<br />\n你的任务是列一张客人名单, 以使客人活跃度最大. </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行是一个整数N. 1 &le; N &le; 6000.  <br />\n接着的N行包含相应员工的活跃度.活跃度是一个-128到127之间的整数.  <br />\n其后是师生关系表. 每行有如下形式:  <br />\nL K  <br />\n表示第K个员工是第L个的直接导师.  <br />\n输入以  <br />\n0 0  <br />\n结束.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出是客人最大总活跃度.</font></p>','7\n1\n1\n1\n1\n1\n1\n1\n1 3\n2 3\n6 4\n7 4\n4 5\n3 5\n0 0','5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1186,'幸运儿','<p><font size=\"3\" face=\"Times New Roman\">n 个人围成一圈, 并依次编号1～n，。从编号为1 的人开始，按顺时针方向每隔一人选出一个，剩下的人重新围成一圈，如此循环直到剩下两人，这剩下的两人就是幸运儿。如果你想成为最后两个幸运儿，请问开始时应该站在什么位置？（设3&lt;=n&lt;=50） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">有多个测试序列。每行是开始时的人数n </font></p>','<p>第1 行是选出顺序，第2 行是两名幸运儿的开始位置（按升序排列），位置编号之间用一个空格分开。</p>','12\n20\n45\n\n','2 4 6 8 10 12 3 7 11 5 \n1 9\n2 4 6 8 10 12 14 16 18 20 3 7 11 15 19 5 13 9 \n1 17\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 3 7 11 15 19 23 27 31 35 39 43 5 13 21 29 37 45 9 25 41 17 \n1 33 \n\n','0','','吉首大学软件学院\n吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1187,'开心的金明','<p><font size=\"3\" face=\"Times New Roman\">金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的 很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早金明就开始做预算， 但是他想买的东西太多了，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查 到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />\n<br />\n设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />\nv[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />\n<br />\n请你帮助金明设计一个满足要求的购物单。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行，为两个正整数，用一个空格隔开：  <br />\nN m  <br />\n（其中N（&lt;30000）表示总钱数，m（&lt;25）为希望购买物品的个数。）  <br />\n从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有2个非负整数  <br />\nv p  <br />\n（其中v表示该物品的价格(v&lt;=10000)，p表示该物品的重要度(1~5)）  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;100000000）。</font></p>','1000 5\n800 2\n400 5\n300 5\n400 3\n200 2','3900','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1188,'恺撒密码','<p><font face=\"Times New Roman\" size=\"3\">恺撒生活在充满危险和阴谋的时代. 恺撒面对的最困难的问题是生存. 为了生存, 他决定创造一种密码. 这种密码听起来难以置信, 如果不知 <br />\n<br />\n道方法, 没有人可以破解. <br />\n<br />\n你是恺撒军队的一个上尉. 你的工作是解密消息并将之提供给将军. 密码很简单. 对明文的每个字母右移5个位置以创建密文 (如字母\'A\', 密 <br />\n<br />\n文是\'F\'). <br />\n有如下对应: <br />\n<br />\n密文 <br />\nA B C D E F G H I J K L M N O P Q R S T U V W X Y Z <br />\n<br />\n明文 <br />\nV W X Y Z A B C D E F G H I J K L M N O P Q R S T U <br />\n<br />\n只有字母需要移位, 其它字符保持不变, 所有字母均是大写. <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入为至多100组数据. 每组数据有如下格式, 中间无空行. <br />\n<br />\n一组数据有3部分: <br />\n<br />\n起始行 - 单独一行: &quot;START&quot; <br />\n密文 - 单独一行, 包含1到200个字符, 组成恺撒的消息. <br />\n结束行 - 单独一行: &quot;END&quot; <br />\n<br />\n最后一组输入是单独一行: &quot;ENDOFINPUT&quot;. </font></p>','<p><font face=\"Times New Roman\">对每组数据有一行输出. 即恺撒的原始消息. </font></p>','START\nNS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\nEND\nSTART\nN BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ\nEND\nSTART\nIFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ\nEND\nENDOFINPUT\n\n','IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\nI WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME\nDANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1189,'愚蠢的摄影师','<p><font face=\"Times New Roman\" size=\"3\">背景 <br />\n&quot;如果两个人相差一秒出生, 其中一个是小孩, 那么另一个也是小孩. 由此可以推论, 所有人均是小孩.&quot; <br />\n<br />\n问题 <br />\n数计系是一个由N个人组成的大家庭, 分别为1, 2, 3, ..., N岁. <br />\n<br />\n有一次系主任想为全系拍张合照. 需要所有学生站成一排. <br />\n起先他想按他们的岁数从小到大安排, 但后来又觉得这样不自然. <br />\n于是他建议按如下方案站排: <br />\n1岁的在最左边. <br />\n每相邻两人不得相差超过2岁. <br />\n<br />\n这样学生的岁数看起来显得很平均(25岁和27岁的人差别很难看出). <br />\n存在多种方案满足此要求. <br />\n摄影师不想违反系主任的意愿, 就为每种可能的安排分别拍了一张照片. <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">整数N, 1&lt;=N&lt;=55.</font></p>','<p><font face=\"Times New Roman\" size=\"3\">所拍照片张数.</font></p>','4','4\n','0','<p><font face=\"Times New Roman\" size=\"3\">若N=4, 则有4种可能的安排: (1,2,3,4), (1,2,4,3), (1,3,2,4) and (1,3,4,2).</font></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1190,'成绩转换','<p><font face=\"Times New Roman\">输入一个百分制的成绩t，将其转换成对应的等级，具体转换规则如下： <br />\n90~100为A; <br />\n80~89为B; <br />\n70~79为C; <br />\n60~69为D; <br />\n0~59为E; </font><br />\n</p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，由一个整数组成。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行。如果输入数据不在0~100范围内，请输出一行：&ldquo;Score is error!&rdquo;。</font></p>','56\n67\n100\n123\n\n','E\nD\nA\nScore is error!\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1191,'换位置','<p><font size=\"3\" face=\"Times New Roman\">M个人围成一圈，每分钟相邻的两个人可以交换位置（只能有一对交换）。求使M个人的顺序颠倒（即每个人左边相邻的人换到右边，右边相邻的人换到左边）所需的最少时间（分钟数）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行为测试数据的组数n，以后n行中每行为一个小于32767的正整数，表示M</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组测试数据，输出一个数，表示最少需要的分钟数。</font></p>','3\n4\n5\n6\n','2\n4\n6\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1192,'排列','<p><font size=\"3\" face=\"Times New Roman\">Ray又对数字的列产生了兴趣: 现有四张卡片，用这四张卡片能排列出很多不同的4位数，要求按从小到大的顺序输出这些4位数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行是一个整数N，表示数据的组数。每组数据占一行，代表四张卡片上的数字（保证四个数字都不同，且0&lt;数字&lt;10）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对每组卡片按从小到大的顺序输出所有能由这四张卡片组成的4位数，千位数字相同的在同一行，同一行中每个四位数间用空格分隔，每组输出数据间空一行，最后一组数据后面没有空行。</font></p>','2\n1 2 3 4\n1 2 3 5','1234 1243 1324 1342 1423 1432\n2134 2143 2314 2341 2413 2431\n3124 3142 3214 3241 3412 3421\n4123 4132 4213 4231 4312 4321\n\n1235 1253 1325 1352 1523 1532\n2135 2153 2315 2351 2513 2531\n3125 3152 3215 3251 3512 3521\n5123 5132 5213 5231 5312 5321','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1193,'数列','<p><font size=\"3\" face=\"Times New Roman\">给定一个正整数k(3&le;k&le;15),把所有k的方幂及所有有限个互不相等的k的方幂之和构成一个递增的序列，例如，当k=3时，这个序列是：  <br />\n1，3，4，9，10，12，13，&hellip;  <br />\n（该序列实际上就是：3^0，3^1，3^0+3^1，3^2，3^0+3^2，3^1+3^2，3^0+3^1+3^2，&hellip;）  <br />\n请你求出这个序列的第N项的值（用10进制数表示）。  <br />\n例如，对于k=3，N=100，正确答案应该是981。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有1行，为2个正整数，用一个空格隔开：  <br />\nk N  <br />\n（k、N的含义与上述的问题描述一致，且3&le;k&le;15，10&le;N&le;1000）。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">计算结果，是一个正整数（在所有的测试数据中，结果均不超过2.1*10^9）。（整数前不要有空格和其他符号）。</font></p>','3 100','981','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1194,'数列排序','<p><font size=\"3\" face=\"Times New Roman\">将一正整数序列{K1,K2,...,K9}重新排列成一个新的序列。新序列中，比K1小的数都在K1的前面(左面)，比K1大的数都在K1的后面(右面)。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入有多行,第一行为N表示行数,每行9个整数.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出N行,按要求进行排序的结果.</font></p>','2\n6 8 9 1 2 5 4 7 3\n3 5 8 9 1 2 6 4 7\n\n','3 4 5 2 1 6 8 9 7\n2 1 3 5 8 9 6 4 7\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1195,'数列有序','<p>有n(n&lt;=100)个整数，已经按照从小到大顺序排列好，现在另外给一个整数x，请将该数插入到序列中，并使新的序列仍然有序。</p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个测试实例，每组数据由两行组成，第一行是n和m，第二行是已经有序的n个数的数列。n和m同时为0标示输入数据的结束，本行不做处理。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，输出插入新的元素后的数列。</font></p>','3 3\n1 2 4\n0 0\n\n','1 2 3 4\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1196,'数列问题','<p><font face=\"Times New Roman\" size=\"3\">已知一个数列的前3个数为3，4，5，以后每个数为前3个数的和，编程序求此数列的第N项</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入N(N&lt;=35)</font></p>','<p><font face=\"Times New Roman\" size=\"3\">求出第N项的值</font></p>','28\n','25527448\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1197,'数字统计','<p><font face=\"Times New Roman\" size=\"3\">一本书的页码从自然数1 开始顺序编码直到自然数n。书的页码按照通常的习惯编排，  <br />\n每个页码都不含多余的前导数字0。例如，第6 页用数字6 表示，而不是06 或006 等。数  <br />\n字计数问题要求对给定书的总页码n，计算出书的全部页码中分别用到多少次数字0，1， <br />\n2，&hellip;，9。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">给出表示书的总页码的整数n（1&le;n&le;2^31-1）</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输出10行，在第k行输出页码中用到数字k-1 的次数，k=1，2，&hellip;，10。</font></p>','11\n','1\n4\n1\n1\n1\n1\n1\n1\n1\n1','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1198,'敲七','<p><font face=\"Times New Roman\" size=\"3\">输出7和7的倍数，还有包含7的数字例如（17，27，37...70，71，72，73...）</font></p>','<p><font face=\"Times New Roman\" size=\"3\">一个整数N。(N不大于30000) </font></p>','<p><font face=\"Times New Roman\" size=\"3\">统计出不大于N的与7有关的数字的个数。如20以内与7有关的数为7、14、17共3个。</font></p>','20\n','3\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1199,'整除的尾数','<p><font size=\"3\" face=\"Times New Roman\">一个整数，只知道前几位，不知道末二位，被另一个整数除尽了，那么该数的末二位该是什么呢</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有若干组，每组数据包含二个整数a，b（0＜a＜10000, 10＜b＜100），若遇到0 0则处理结束</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对应每组数据，将满足条件的所有尾数在一行内输出，格式见样本输出。同组数据的输出，其每个尾数之间空一格，行末没有空格。</font></p>','200 40\n1992 95\n0 0','00 40 80\n15\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1200,'文科生的悲哀','<p><font size=\"3\" face=\"Times New Roman\">化学不及格的Matrix67无奈选择了文科。他必须硬着头皮准备一次又一次的文科考试。  <br />\n在这一学期一共有n次文科考试，考试科目有4种，分别为政治、历史、地理和综合。每次考哪一科是不定的，因此在考试前Matrix67不知道应该 去复习哪一科的功课。他希望能预测出下一次可能考的科目。于是，他收集到了以往的文科考试的资料。从以往的考试中，他发现了这样几个规律：  <br />\n1.如果这次考的是政治，那么下一次一定会考历史；  <br />\n2.如果这次考的是综合，那么下一次一定会考地理；  <br />\n3.如果这次考的是历史，那么下一次要么考政治，要么考地理；  <br />\n4.如果这次考的是地理，那么下一次要么考历史，要么考综合。  <br />\nMatrix67已经知道，本学期的第一次考试科目为政治。他打算拟定一个可以应对所有可能情况的应考复习计划。因此，他想知道，整个学期有多少种可能的考试科目安排满足以上规律。你能帮他算出来吗？</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个正整数n，代表本学期总的考试次数。（输入数据保证n&lt;=10000） </font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个正整数，表示符合规律的科目安排方案的总数。  <br />\n考虑到这个结果可能会很大，因此你只需要输出它mod 7654321的值即可。</font></p>','5','5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1201,'方砖问题','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">用边长小于N的正方形方砖（注意，不要求所有的方砖大小相同，请看样例说明）不重叠地铺满N*N的正方形房间，最少要几块方砖。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">第一行是一个整数T,表示测试数据的组数,接下来的T 行，每一行是一个N(2&lt;=N&lt;=100)</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">对于每一组测试数据输出一行，为最少需要的块数。</span></p>','2 \n4 \n5','4 \n8','0','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">当N＝4时<span class=\"Apple-converted-space\">&nbsp;</span><br />\n最优的铺砖方法<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAABB<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAABB<span class=\"Apple-converted-space\">&nbsp;</span><br />\nCCDD<span class=\"Apple-converted-space\">&nbsp;</span><br />\nCCDD<span class=\"Apple-converted-space\">&nbsp;</span><br />\nA，B，C，D为四块方砖的代号。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n其他的铺砖方法，例如：<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAAAB<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAAAC<span class=\"Apple-converted-space\">&nbsp;</span><br />\nAAAD<span class=\"Apple-converted-space\">&nbsp;</span><br />\nEFGH<span class=\"Apple-converted-space\">&nbsp;</span><br />\n需要的8块方砖，不是最少的。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1202,'日期排序','<p><font size=\"3\" face=\"Times New Roman\">有一些日期，日期格式为&ldquo;MM/DD/YYYY&rdquo;。编程将其按日期大小排列。</font></p>','','','15/12/1999\n10/21/2003\n10/22/2003\n02/12/2004\n11/30/2005\n12/31/2005\n','15/12/1999\n10/21/2003\n10/22/2003\n02/12/2004\n11/30/2005\n12/31/2005\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1203,'明明的随机数','<p><font face=\"Times New Roman\" size=\"3\">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N&le;100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">有2行，第1行为1个正整数，表示所生成的随机数的个数： <br />\nN <br />\n第2行有N个用空格隔开的正整数，为所产生的随机数。 <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">也是2行，第1行为1个正整数M，表示不相同的随机数的个数。第2行为M个用空格隔开的正整数，为从小到大排好序的不相同的随机数。</font></p>','10\n20 40 32 67 40 20 89 300 400 15\n\n','8\n15 20 32 40 67 89 300 400\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1204,'最多约数问题','<p><font face=\"Times New Roman\" size=\"3\">正整数x 的约数是能整除x 的正整数。正整数x  的约数个数记为div(x)。例如，1，2， <br />\n5，10 都是正整数10 的约数，且div(10)=4。设a 和b 是2 个正整数，a&le;b，找出a 和b  <br />\n之间约数个数最多的数x <br />\n</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入2 个正整数a&le;b，编程计算a 和b  之间约数个数最多的数。</font></p>','<p><font face=\"Times New Roman\" size=\"3\">程序运行结束时，找到a 和b  之间约数个数最多的数是x，将div(x)输出</font></p>','1 36\n','9\n','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1205,'最小公倍数','<p><font size=\"3\" face=\"Times New Roman\">两个正整数，计算这两个数的最小公倍数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据只有一行，包括两个不大于1000的正整数.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出数据也只有一行，给出这两个数的最小公倍数。</font></p>','10 14','70','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1206,'最小重量机器设计问题','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">设某一机器由n个部件组成，每一种部件都可以从m个不同的供应商处购得。设Wij 是<span class=\"Apple-converted-space\">&nbsp;</span><br />\n从供应商j处购得的部件i的重量，Cij 是相应的价格。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n试设计一个算法，给出总价格不超过c的最小重量机器设计。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n&prime;编程任务：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n对于给定的机器部件重量和机器部件价格，编程计算总价格不超过d的最小重量机器设<span class=\"Apple-converted-space\">&nbsp;</span><br />\n计。<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">第一行有 3 个正整数 n ，m和 d。接下来的 2n 行，每<span class=\"Apple-converted-space\">&nbsp;</span><br />\n行m个数。前n行是c，后n行是w。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">将计算出的最小重量，以及每个部件的供应商输出</span></p>','3 3 4 \n1 2 3 \n3 2 1 \n2 2 2 \n1 2 3 \n3 2 1 \n2 2 2','4 \n1 3 1 ','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1207,'杨辉三角','<p><font size=\"3\" face=\"Times New Roman\">还记得中学时候学过的杨辉三角吗？具体的定义这里不再描述，你可以参考以下的图形： <br />\n1 <br />\n1 1 <br />\n1 2 1 <br />\n1 3 3 1 <br />\n1 4 6 4 1 <br />\n1 5 10 10 5 1 <br />\n</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包含多个测试实例，每个测试实例的输入只包含一个正整数n（1＜=n＜=30），表示将要输出的杨辉三角的层数。</font></p>','<p>对应于每一个输入，请输出相应层数的杨辉三角，每一层的整数之间用一个空格隔开，每一个杨辉三角后面加一个空行。</p>','2 3\n','1\n1 1\n\n1\n1 1\n1 2 1\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1208,'查找最大元素','<p><font size=\"3\" face=\"Times New Roman\">对于输入的每个字符串，查找其中的最大字母，在该字母后面插入字符串&ldquo;(max)&rdquo;。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据包括多个测试实例，每个实例由一行长度不超过100的字符串组成，字符串仅由大小写字母及数字构成</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例输出一行字符串，输出的结果是插入字符串&ldquo;(max)&rdquo;后的结果，如果存在多个最大的字母，就在每一个最大字母后面都插入&quot;(max)&quot;。</font></p>','abcdefgfedcba\nxxxxx\n','abcdefg(max)fedcba\nx(max)x(max)x(max)x(max)x(max)\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1209,'核电站问题','<p><font size=\"3\" face=\"Times New Roman\">一个核电站有N个放核物质的坑，坑排列在一条直线上。如果连续３个坑中放入核物质，则会发生爆炸，于是，在某些坑中可能不放核物质。现在，请你计算：对于给定的N，求不发生爆炸的放置核物质的方案总数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入文件只有多行，每行对应一个正整数N＜＝４０；</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出文件有多行，每行只有一个正整数，表示方案总数</font></p>','1\n2\n3\n4\n10','2\n4\n7\n13\n504','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1210,'检查一个数是否为质数','<p><font size=\"3\" face=\"Times New Roman\">输入一个正整数，检查该数是否为质数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入一个正整数</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出Y或者N</font></p>','34','N','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1211,'检查金币','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">ACM公司生产金币的设备出了问题，使得最近生产的10批金币的重量出现了波动：本来金币的标准重量是10克，但现在有的可能是11克，有的可能9克，也有可能是10克。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n现在只知道同一批金币的重量是相同的，你的任务是要把每批的单枚金币的重量找出来。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n你的设备有一个电子秤，但只允许称量一次！<span class=\"Apple-converted-space\">&nbsp;</span><br />\n你从第1批中取1枚金币，第2批取3枚，...第i批取3^(i&minus;1)枚...，第10批取3^9枚，总共29524枚。将这29524枚金币放在电子秤上，得到了总重量，就交给你的程序去！<span class=\"Apple-converted-space\"> </span><br />\n</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">有多个测试序列，每个测试序列一行，包含一个6位的正整数W(265716&le;W&le;324764)，表示29524枚金币的总重量</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">每个测试序列输出一行，包含10个用空格分开的正整数，分别表示10批金币的单枚重量，注意行尾没有空格。</span></p>','265716\n324764\n295240','9 9 9 9 9 9 9 9 9 9\n11 11 11 11 11 11 11 11 11 11\n10 10 10 10 10 10 10 10 10 10','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1212,'母牛生小牛','<p><font face=\"Times New Roman\" size=\"3\">设有一头小母牛，从出生第四年起每年生一头小母牛，按此规律，第N年时有几头母牛？</font></p>','<p><font face=\"Times New Roman\" size=\"3\">输入一个整数N。(1&le;N&le;50)</font></p>','<p><font face=\"Times New Roman\" size=\"3\">第N年时母牛的数量</font></p>','5\n','3\n','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1213,'求组合数','<p><font face=\"Times New Roman\">组合数的计算虽说简单但也不乏有些陷阱，这主要是因为语言中的数据类型在表示范围上是有限的。更何况还有中间结果溢出的现象，所以千万要小心。</font></p>','<p><font face=\"Times New Roman\">求组合数的数据都是成对（M与N）出现的，每对整数M和N满足0＜m, n&le;20，以EOF结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出该组合数。每个组合数换行。</font></p>','5 2\n18 13\n','10\n8568\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1214,'演讲大赛评分','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">最近&quot;老王&quot;很开心.他在大一的时候参加过数计学院的&ldquo;软件小组&rdquo;。告诉你个秘密，这个小组是个好地方，不但活动精彩而且有MM。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n这不，这个小组举办了一个叫做&ldquo;计算机演讲大赛&rdquo;的节目。这个节目有好多人参加，这不，成绩出来了，&quot;老王&quot;当是很勇敢，自告奋勇接下了算出大家的总得分的任务。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n当时有7个评委，每个评委都要给选手打分，现在要求去掉一个最高分和去掉一个最低分，再算出平均分。结果精确到小数点后两位。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">测试数据包括多个实例。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n每组数据包括7个实数，代表评委们对该选手的评分。紧接着是选手的名字，名字的长度不超过30个字符。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n输入直到文件结束。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">算出每位选手名字和最终得分，结果保留两位有效数字</span></p>','10 10 10 10 10 10 9 xiaoyuanwang\n0 0 0 0 0 0 0 beast','xiaoyuanwang 10.00\nbeast 0.00','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1215,'班级人数','<p><font size=\"3\" face=\"Times New Roman\">某班学生参加程序设计大赛，最后结果及格有超过P%但不足Q%的人。现在给你P和Q，你要算出该班最少有多少人。（数据弱了一点，所以好通过）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">两个实数P，Q。用空格隔开。每个数最多有两位小数。0.00＜＝p＜q＜＝99.99 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">神风堂最少的人数。</font></p>','13    14.1\n67.73 67.92','15\n28','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1216,'生日日数','<p><font size=\"3\" face=\"Times New Roman\">CCC老师的生日是YY年MM月DD日，他想知道自己出生后第一万天纪念日的日期（出生日算第0天）。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入有多行，格式为YY MM DD 其中1949&lt;=YY&lt;=2006，日期绝对合法。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出有多行。即CCC老师生日第一万天以后的日期，格式为 &ldquo;Y-M-D&rdquo;。</font></p>','1979 4 16','2006-9-1','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1217,'盐水的故事','<p><font size=\"3\" face=\"Times New Roman\">挂盐水的时候，如果滴起来有规律，先是滴一滴，停一下；然后滴二滴，停一 下；再滴三滴，停一下...，现在有一个问题：这瓶盐水一共有VUL毫升，每一滴是D毫升，每一滴的速度是一秒（假设最后一滴不到D毫升，则花费的时间也 算一秒），停一下的时间也是一秒这瓶水什么时候能挂完呢？</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据占一行,由VUL和D组成,其中0&lt; D&lt; VUL&lt; 5000。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">请输出挂完盐水需要的时间。</font></p>','10 1','13','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1218,'矩阵转置','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入N*N的矩阵，输出它的转置矩阵。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">第一行为整数N。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n接着是一个N*N的矩阵。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">转置矩阵</span></p>','2\n1 2\n1 2','1 1\n2 2','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1219,'破解平方数','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">给出m个数b1, b2,..., bm,每个数的素数因子都在前t个素数之内，任务是寻找这m个数的非空子集的个数x，使得每个子集的乘积都是一个完全平方数。例如t=3,则前3个素数为2, 3, 5。m=4，这4个数为9, 20, 500, 3， 每个数的素因子都是在前3个素数内，则有x=3个非空子集合{9}， {20， 500}， {9， 20， 500}，满足每个集合内的数的乘积是一个完全平方数，输出这样的集合的个数。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; font-size: medium;\" class=\"Apple-style-span\">每组测试数据的第一行为两个正整数t, m(1 &le; t &le; 100, 1 &le; m &le; 100) 第二行为m个数， 1 &lt;= bi &lt;= 109 处理至文件结束</span><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">每行输出一个整数x，对应每组测试数据</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: Simsun; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">\n<pre><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">每行输出一个整数x，对应每组测试数据</span></pre>\n</span></p>','3 4 \n9 20 500 3','3','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1220,'破解简单密码','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">密码是我们生活中非常重要的东东，我们的那么一点不能说的秘密就全靠它了。哇哈哈.<span class=\"Apple-converted-space\">&nbsp;</span><br />\n接下来渊子要在密码之上再加一套密码，虽然简单但也安全。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n假设老王原来一个BBS上的密码为zvbo941987,为了方便记忆，他通过一种算法把这个密码变换成YUANzi1987，这个密码是他的名字和出生年份，怎么忘都忘不了，而且可以明目张胆地放在显眼的地方而不被别人知道真正的密码。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n他是这么变换的，大家都知道手机上的字母： 1--1， abc--2, def--3, ghi--4, jkl--5, mno--6, pqrs--7, tuv--8 wxyz--9, 0--0,就这么简单，老王把密码中出现的小写字母都变成对应的数字，数字和其他的符号都不做变换，声明：密码中没有空格，而密码中出现的大写字母则边成小写之后往后移一位，如：X，先边成小写，再往后移一位，不就是y了嘛，简单吧。记住，z往后移是a哦。</span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入包括多个测试数据。输入是一个明文，密码长度不超过100个字符，输入直到文件结尾。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输出渊子真正的密文。</span></p>','YUANzi1987','zvbo941987','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1221,'神奇的fans','<p><font size=\"3\" face=\"Times New Roman\">传说fans是一个数学天才。在他五岁那年，从一堆数字卡片中选出了4张 卡片：5，7，6，8。这4个数字有什么神秘之处呢？如果把这4张卡片自左往右的排成：5，6，7，8。你就会发现：原来这4个数字构成了等差数列！当年 fans选出了n组卡片，据说都能够构成等差数列。但是事实真的是这样吗？fans真的有这么神奇吗？  n组数据就是fans选出的n组卡片，请你判断每一组卡片是否能构成等差数列.</font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一个数为数据的组数n，表示后面有n行，每行中的第一个数为该组数据的元素个数m（1&le;m&le;100），其后是m个正整数（不会超出int的表示范围）。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">如果能够构成等差数列，输出&ldquo;yes&rdquo;，否则输出&ldquo;no&rdquo;。</font></p>','2\n4 5 7 6 8\n8 1 7 3 2 8 12 78 3','yes\nno\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1222,'第几天','<p><font face=\"Times New Roman\">给定一个日期，输出这个日期是该年的第几天。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，数据格式为YYYY/MM/DD组成，具体参见sample input ,另外，可以向你确保所有的输入数据是合法的。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出一行，表示该日期是该年的第几天。</font></p>','1985/1/20\n2006/3/12\n\n','20\n71\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1223,'筛排处理','<p><font face=\"Times New Roman\">明明想在学校中请一些同学一起做一项问卷调查，为了实验的客观性，他先用计算机生成了N个1到1000之间的随机整数（N&lt;=100），对于其中重复的数字，只保留一个，把其余相同的数去掉，不同的数对应着不同的学生的学号。然后再把这些数从小到大排序，按照排好的顺序去找同学做调查。请你协助明明完成&ldquo;去重&rdquo;与&ldquo;排序&rdquo;的工作</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每组输入数据的第一行含有一个正整数N，表示后面行中有N个随机整数。若N=0，表示处理结束。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对应每组输入数据，输出一组数据，该数据由单独一行开头，内含一个N，表示后面有N个排好序的整数，整数之间空一格。每组输出数据之间空一行。</font></p>','12\n2 4 6 17 20 40 43 45 60 64 85 98\n17\n35 75 40 61 56 21 85 61 50 83 52 22 44 68 51 80 38\n0\n','12\n2 4 6 17 20 40 43 45 60 64 85 98\n\n16\n21 22 35 38 40 44 50 51 52 56 61 68 75 80 83 85\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1224,'简单的事情','<p><font size=\"3\" face=\"Times New Roman\">数学天才fans曾经说过一句话：组合数的计算是一件非常简单的事情。组合数的计算真的是一件非常简单的事情吗？请你自己去尝试一下吧！ </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入中的一些整数对n，m（m&le;n&le;20）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输出其组合数。</font></p>','5 2\n18 13','10\n8568','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1225,'简单编码','<p><font face=\"Times New Roman\">最近Kingly对编码很感兴趣，于是从网上找了一些编码原则来对字符串做实验。由于Kingly一直很忙，所以希望你这位编程高手来替他解决这个问题。下面是编码原则：（1） 如果访问到字符A，W，F就转化成I；（2） 如果访问到字符C，M，S就分别转化成L，o，v；（3） 如果访问到字符D，P，G，B就转化成e；（4） 如果访问到字符L，X就分别转化成Y，u；（5） 其他字符均保持不变。（6） 遇到END就结束！</font></p>','<p></p>\n<p></p>\n<p></p>','<p></p>\n<p></p>\n<p></p>','A\nCMSD\nLMX\nEND','I\nLove\nYou','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1226,'素数回文','<p><font size=\"3\" face=\"Times New Roman\">小王对既是素数又是回文的数特别感兴趣。比如说151既是素数又是个回文。现在小王想要你帮助他找出某个范围内的素数回文数，请你写个程序找出 a 跟b 之间满足条件的数。(5 &lt;= a &lt; b &lt;= 100,000,000);</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入a和b</font><font size=\"3\" face=\"Times New Roman\">(5 &lt;= a &lt; b &lt;= 100,000,000)</font></p>','<pre><font size=\"3\" face=\"Times New Roman\">按从小到大输出a，b之间所有满足条件的素数回文数</font></pre>','5 500','5\n7\n11\n101\n131\n151\n181\n191\n313\n353\n373\n383','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1227,'统计字母个数','<p><font face=\"Times New Roman\">给定一段文章，请输出每个字母出现的次数</font></p>','<p><font face=\"Times New Roman\">只有一组输入数据，该数据大小&lt;10KB。在文章中除最后一个字符外，只有小写字母、空格和换行符，没有另外的标点、数字和大写字母等。该文章以&rsquo;#&rsquo;结尾。</font></p>','<p><font face=\"Times New Roman\">输出格式为&ldquo;C A&rdquo;，C为&rsquo;a&rsquo;..&rsquo;z&rsquo;中的字母，A为出现次数，C和A之间空一格</font></p>','here is the input\nthis is the article#\n','a 1\nb 0\nc 1\nd 0\ne 5\nf 0\ng 0\nh 4\ni 5\nj 0\nk 0\nl 1\nm 0\nn 1\no 0\np 1\nq 0\nr 2\ns 3\nt 5\nu 1\nv 0\nw 0\nx 0\ny 0\nz 0\n\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1228,'统计立方数','<p><font size=\"3\" face=\"Times New Roman\">有一堆正整数，统计其中有多少立方数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有一些正整数，其每个数都小于2^32。若该数为0，则应结束统计。</font></p>','<p><font face=\"Times New Roman\">输出所统计的立方数个数</font></p>','1 3 5 7 9 11 15 17 19 21 23 25 27 0\n','2\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1229,'老王赛马','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">赛马是一古老的游戏，早在公元前四世纪的中国，处在诸侯割据的状态，历史上称为&ldquo;战国时期&rdquo;。在魏国作官的孙膑，因为受到同僚庞涓的迫害，被齐国使臣救出后，到达齐国国都。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n赛马是当时最受齐国贵族欢迎的娱乐项目。上至国王，下到大臣，常常以赛马取乐，并以重金赌输赢。田忌多次与国王及其他大臣赌输赢，屡赌屡输。一天他赛马又输了，回家后闷闷不乐。孙膑安慰他说：&ldquo;下次有机会带我到马场看看，也许我能帮你。&rdquo;<span class=\"Apple-converted-space\">&nbsp;</span><br />\n孙膑仔细观察后发现，田忌的马和其他人的马相差并不远，只是策略运用不当，以致失败。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n比赛前田忌按照孙膑的主意，用上等马鞍将下等马装饰起来，冒充上等马，与齐王的上等马比赛。第二场比赛，还是按照孙膑的安排，田忌用自己的上等马与国王的中等马比赛，在一片喝彩中，只见田忌的马竟然冲到齐王的马前面，赢了第二场。关键的第三场，田忌的中等马和国王的下等马比赛，田忌的马又一次冲到国王的马前面，结果二比一，田忌赢了国王。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n就是这么简单，现在老王也来赛一赛马。假设每匹马都有恒定的速度，所以速度大的马一定比速度小的马先到终点（没有意外！！）。不允许出现平局。最后谁赢的场数多于一半(不包括一半)，谁就是赢家(可能没有赢家)。老王有N(1&le;N&le;1000)匹马参加比赛。对手的马的数量与渊子马的数量一样，并且知道所有的马的速度。聪明的你来预测一下这场世纪之战的结果，看看老王能否赢得比赛。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输入有多组测试数据。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n每组测试数据包括3行：<span class=\"Apple-converted-space\">&nbsp;</span><br />\n第一行输入N(1&le;N&le;1000)。表示马的数量。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n第二行有N个整型数字，即渊子的N匹马的速度。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n第三行有N个整型数字，即对手的N匹马的速度。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n当N为0时退出。<span class=\"Apple-converted-space\"> <br />\n</span></span></p>','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">若通过聪明的你精心安排，如果渊子能赢得比赛，那么输出&ldquo;YES&rdquo;。<span class=\"Apple-converted-space\">&nbsp;</span><br />\n否则输出&ldquo;NO&rdquo;。</span></p>','5\n2 3 3 4 5\n1 2 3 4 5\n4\n2 2 1 2\n2 2 3 1\n0','YES\nNO','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1230,'考试排名','<p><font size=\"3\" face=\"Times New Roman\">C++编程考试使用的实时提交系统，具有即时获得成绩排名的特点。它的功能是怎么实现的呢？  <br />\n我们做好了题目的解答，提交之后，要么&ldquo;AC&rdquo;，要么错误，不管怎样错法，总是给你记上一笔，表明你曾经有过一次错误提交，因而当你一旦提交该题 &ldquo;AC&rdquo;后，就要与你算一算帐了，总共该题错误提交了几回。虽然你在题数上，大步地跃上了一个台阶，但是在耗时上要摊上你共花去的时间。特别是，曾经有过 的错误提交，每次都要摊上一定的单位时间分。这样一来，你在做出的题数上，可能领先别人很多，但是，在做出同样题数的人群中，你可能会在耗时上处于排名的 劣势。  <br />\n例如：某次考试一共8题（A，B，C，D，E，F，G，H），每个人做的题都在对应的题号下有个数量标记，负数表示该学生在该题上有过的错误提交 次数，但到现在还没有AC，正数表示AC所耗的时间，如果正数a跟上一对括号，里面有个整数b，那就表示该学生提交该题AC了，耗去了时间a，同时，曾经 错误提交了b次，因此对于下述输入数据：  <br />\nname A B C D E F G H  <br />\nSmith -1 -16 8 0 0 120 39 0  <br />\nJohn 116 -2 11 0 0 82 55(1) 0  <br />\nJose 72(3) 126 10 -3 0 47 21(2) -2  <br />\nBush 0 -1 -8 0 0 0 0 0  <br />\nAlice -2 67(2) 13 -1 0 133 79(1) -1  <br />\nBob 0 0 57(5) 0 0 168 -7 0  <br />\n若每次错误提交的罚分为20分，则其排名从高到低应该是这样的：  <br />\nJose 5 376  <br />\nJohn 4 284  <br />\nAlice 4 352  <br />\nSmith 3 167  <br />\nBob 2 325  <br />\nBush 0 0 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据的第一行是考试题数n（1&le;n&le;12）以及单位罚分数 m（10&le;m&le;20），每行数据描述一个学生的用户名（不多于10个字符的字串）以及对所有n道题的答题现状，其描述采用问题描述中的数量标记的格式，见 上面的表格，提交次数总是小于100，AC所耗时间总是小于1000。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">将这些学生的考试现状，输出一个实时排名。实时排名显然先按AC题数的多 少排，多的在前，再按时间分的多少排，少的在前，如果凑巧前两者都相等，则按名字的字典序排，小的在前。每个学生占一行，输出名字（10个字符宽），做出 的题数（2个字符宽，右对齐）和时间分（4个字符宽，右对齐）。名字、题数和时间分相互之间有一个空格。</font></p>','8 20\nSmith     -1      -16     8       0      0      120     39      0\nJohn      116     -2      11      0      0      82      55(1)   0\nJosephus  72(3)   126     10      -3     0      47      21(2)   -2\nBush      0       -1      -8      0      0      0       0       0\nAlice     -2      67(2)   13      -1     0      133     79(1)   -1\nBob       0       0       57(5)   0      0      168     -7      0','Josephus    5  376\nJohn        4  284\nAlice       4  352\nSmith       3  167\nBob         2  325\nBush        0    0','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1231,'能量项链','<p><font size=\"3\" face=\"Times New Roman\">在Mars星球上，每个Mars人都随身佩带着一串能量项链。在项链上有 N颗能量珠。能量珠是一颗有头标记与尾标记的珠子，这些标记对应着某个正整数。并且，对于相邻的两颗珠子，前一颗珠子的尾标记一定等于后一颗珠子的头标 记。因为只有这样，通过吸盘（吸盘是Mars人吸收能量的一种器官）的作用，这两颗珠子才能聚合成一颗珠子，同时释放出可以被吸盘吸收的能量。如果前一颗 能量珠的头标记为m，尾标记为r，后一颗能量珠的头标记为r，尾标记为n，则聚合后释放的能量为m*r*n（Mars单位），新产生的珠子的头标记为m， 尾标记为n。  <br />\n需要时，Mars人就用吸盘夹住相邻的两颗珠子，通过聚合得到能量，直到项链上只剩下一颗珠子为止。显然，不同的聚合顺序得到的总能量是不同的，请你设计一个聚合顺序，使一串项链释放出的总能量最大。  <br />\n例如：设N=4，4颗珠子的头标记与尾标记依次为(2，3) (3，5) (5，10) (10，2)。我们用记号◎表示两颗珠子的聚合操作，(j◎k)表示第j，k两颗珠子聚合后所释放的能量。则第4、1两颗珠子聚合后释放的能量为：  <br />\n(4◎1)=10*2*3=60。  <br />\n这一串项链可以得到最优值的一个聚合顺序所释放的总能量为  <br />\n((4◎1)◎2)◎3）=10*2*3+10*3*5+10*5*10=710。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第一行是一个正整数N（4&le;N&le;100），表示项链上珠子的个数。第二行 是N个用空格隔开的正整数，所有的数均不超过1000。第i个数为第i颗珠子的头标记（1&le;i&le;N），当i〈N时，第i颗珠子的尾标记应该等于第i+1颗 珠子的头标记。第N颗珠子的尾标记应该等于第1颗珠子的头标记。  <br />\n至于珠子的顺序，你可以这样确定：将项链放到桌面上，不要出现交叉，随意指定第一颗珠子，然后按顺时针方向确定其他珠子的顺序。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一行，是一个正整数E（E&le;2.1*10^9），为一个最优聚合顺序所释放的总能量</font></p>','4\n2  3  5  10','710','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1232,'诡秘的余数','<p><font face=\"Times New Roman\">不可否认，小强是一名数学天才，大家都这么说。天才小强的两大最新发现如下：（1） 正整数n除3的余数，等价于，正整数n的各位数字之和除3的余数；（2） 正整数n除9的余数可以通过这样的方法来计算：计算n 的各位数之和，设为m，如果m已经是一位数，那么余数就是m；否则设n=m，重新进行计算n的各位数之和m，直到m是一个一位数。但是，正整数除1，2，4，5，6，7，8，也存在类似的性质吗？这真是一个难题啊！小强想睡觉了，不去管了。现在请你计算一下正整数n除一位数m的余数。文件中有一些数对，一为大整数（可能大到100位）n，另一为一位数m（&gt;0）。求其n除以m的余数。</font></p>','','','23 7\n123 9','2\n6','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1233,'超级楼梯','<p><font size=\"3\" face=\"Times New Roman\">有一楼梯共M级，刚开始时你在第一级，若每次只能跨上一级或二级，要走上第M级，共有多少种走法？ </font></p>','<p><font face=\"Times New Roman\">输入数据首先包含一个整数N，表示测试实例的个数，然后是N行数据，每行包含一个整数M（1&lt;=M&lt;=40）,表示楼梯的级数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每个测试实例，请输出不同走法的数量 </font></p>','2\n2\n3\n\n','1\n2\n\n','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1234,'连续自然数和','<p><font size=\"3\" face=\"Times New Roman\">对一个给定的自然数M，求出所有的连续的自然数段（连续个数大于1），这些连续的自然数段中的全部数之和为M。  <br />\n例子：1998+1999+2000+2001+2002 = 10000，所以从1998到2002的一个自然数段为M=10000的一个解。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">包含一个整数的单独一行给出M的值（10 &lt;= M &lt;= 2,000,000）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">每行两个自然数，给出一个满足条件的连续自然数段中的第一个数和最后一个数，两数之间用一个空格隔开，所有输出行的第一个按从小到大的升序排列，对于给定的输入数据，保证至少有一个解。</font></p>','10000\n\n21334\n\n2000000','18 142 \n297 328 \n388 412 \n1998 2002\n\n5332 5335\n\n923 2202\n2888 3512\n7685 7940\n15938 16062\n79988 80012\n399998 400002','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1235,'送分题素数','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">输出100-&gt;200之间的素数的个数，以及所有的素数。</span></p>','','<p><span style=\"color: rgb(0, 0, 0); font-family: \'Times New Roman\'; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: 2; text-align: -webkit-auto; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-decorations-in-effect: none; -webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; font-size: medium; \" class=\"Apple-style-span\">100-&gt;200之间的素数的个数，以及所有的素数。</span></p>','','21\n101 103 ... 197 199','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1236,'逆反的01串','<p><font size=\"3\" face=\"Times New Roman\">Fans是个ACM程序设计迷。有时侯，他表现出很强烈的逆反心理，你往东，他往西，你往南，他偏往北。这一次，不知道又是谁惹着他了，好端端的一个个01串，到了他的手里，都变成10串了。请你编个程序来模仿他的行为，将01串（长度&le;200），全变成10串吧。</font></p>','<pre><font><font size=\"3\" face=\"Times New Roman\">0110100100100 1000000010000000000</font></font></pre>','<pre><font><font size=\"3\" face=\"Times New Roman\">1001011011011 0111111101111111111</font></font></pre>','0110100100100\n1000000010000000000','1001011011011\n0111111101111111111','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1237,'速算24点','<p><font size=\"3\" face=\"Times New Roman\">速算24点相信绝大多数人都玩过。就是随机给你四张牌，包括 A(1),2,3,4,5,6,7,8,9,10,J(11),Q(12),K(13)。要求只用\'+\',\'-\',\'*\',\'/\'运算符以及括号改变运算 顺序，使得最终运算结果为24(每个数必须且仅能用一次)。游戏很简单，但遇到无解的情况往往让人很郁闷。你的任务就是针对每一组随机产生的四张牌，判断 是否有解。我们另外规定，整个计算过程中都不能出现小数。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据占一行，给定四张牌。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">如果有解则输出&quot;Y&quot;，无解则输出&quot;N&quot;。</font></p>','A 2 3 6','Y','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1238,'邮局选址问题','<p><font face=\"Times New Roman\">问题描述： <br />\n在一个按照东西和南北方向划分成规整街区的城市里，n个居民点散乱地分布在不同的街区中。用x 坐标表示东西向，用y坐标表示南北向。各居民点的位置可以由坐标(x,y)表示。街区中任意2 点(x1,y1)和(x2,y2)之间的距离可以用数值|x1-x2|+|y1-y2|度量。 <br />\n居民们希望在城市中选择建立邮局的最佳位置，使n个居民点到邮局的距离总和最小。 <br />\n编程任务： <br />\n给定n 个居民点的位置,编程计算n 个居民点到邮局的距离总和的最小值。 </font></p>','<p><font face=\"Times New Roman\">第1 行是居民点数n，1<n></n>&lt;10000。&lt; 个整数x 行是居民点的位置，每行2&gt;</font></p>','<p><font face=\"Times New Roman\">n个居民点到邮局的距离总和的最小值。</font></p>','5\n1 2\n2 2\n1 3\n3 -2\n3 3\n','10','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1239,'金明的预算方案','<p><font size=\"3\" face=\"Times New Roman\">　金明今天很开心，家里购置的新房就要领钥匙了，新房里有一间金明自己专 用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：&ldquo;你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行&rdquo;。今天一早，金明就开始做 预算了，他把想买的物品分为两类：主件与附件，附件是从属于某个主件的，下表就是一些主件与附件的例子： <br />\n<br />\n主件 	附件  <br />\n电脑 	打印机，扫描仪  <br />\n书柜 	图书  <br />\n书桌 	台灯，文具  <br />\n工作椅 	无  <br />\n<br />\n如果要买归类为附件的物品，必须先买该附件所属的主件。每个主件可以有0个、1个或2个附件。附件不再有从属于自己的附件。金明想买的东西很 多，肯定会超过妈妈限定的N元。于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格 （都是10元的整数倍）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。  <br />\n设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，&hellip;&hellip;，jk，则所求的总和为：  <br />\nv[j1]*w[j1]+v[j2]*w[j2]+ &hellip;+v[jk]*w[jk]。（其中*为乘号）  <br />\n请你帮助金明设计一个满足要求的购物单。  </font></p>','<p><font size=\"3\" face=\"Times New Roman\">第1行，为两个正整数，用一个空格隔开：  <br />\nN m  <br />\n（其中N（&lt;32000）表示总钱数，m（&lt;60）为希望购买物品的个数。）  <br />\n从第2行到第m+1行，第j行给出了编号为j-1的物品的基本数据，每行有3个非负整数  <br />\nv p q  <br />\n（其中v表示该物品的价格（v&lt;10000），p表示该物品的重要度（1~5），q表示该物品是主件还是附件。如果q=0，表示该物品为主件，如果q&gt;0，表示该物品为附件，q是所属主件的编号）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">只有一个正整数，为不超过总钱数的物品的价格与重要度乘积的总和的最大值（&lt;200000）。</font></p>','1000 5\n800 2 0\n400 5 1\n300 5 1\n400 3 0\n500 2 0','2200','0','','','2017-04-30 15:05:04',1,128,'N',0,0,0),(1240,'防御导弹','<p><font size=\"3\" face=\"Times New Roman\">某国为了防御敌国的导弹袭击，发展出一种导弹拦截系统。但是这种导弹拦截 系统有一个缺陷：虽然它的第一发炮弹能够达到任意的高度，但是以后每一发炮弹都不能高于前一发的高度。某天，雷达捕捉到敌国的导弹来袭。由于该系统还在试 用阶段，所以只有一套系统，因此有可能不能拦截所有的导弹。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">最多20个整数，分别表示导弹依次飞来的高度（雷达给出高度数据是不大于30000的正整数）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">整数M。表示：这套系统最多能拦截 M 枚导弹.</font></p>','300 250 275 252 200 138 245','5','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1241,'青年歌手大奖赛_评委会打分','<p><font size=\"3\" face=\"Times New Roman\">青年歌手大奖赛中，评委会给参赛选手打分。选手得分规则为去掉一个最高分和一个最低分，然后计算平均得分，请编程输出某选手的得分</font></p>','<p><font size=\"3\" face=\"Times New Roman\">输入数据有多组，每组占一行，每行的第一个数是n(2＜n＜100)，表示评委的人数，然后是n个评委的打分。</font></p>','<p><font size=\"3\" face=\"Times New Roman\">对于每组输入数据，输出选手的得分，结果保留2位小数，每组输出占一行。</font></p>','3 99 98 97\n4 100 99 98 97','98.00\n98.50','0','','吉首大学软件服务外包学院','2017-04-30 15:05:04',1,128,'N',0,0,0),(1242,'马拦过河卒','<p><font size=\"3\" face=\"Times New Roman\">棋盘上A点有一个过河卒，需要走到目标B点。卒行走的规则：可以向下、或者向右。同时在棋盘上C点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为&ldquo;马拦过河卒&rdquo;。  <br />\n棋盘用坐标表示，A点(0, 0)、B点(n, m)(n, m为不超过15的整数)，同样马的位置坐标是需要给出的。现在要求你计算出卒从A点能够到达B点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。 </font></p>','<p><font size=\"3\" face=\"Times New Roman\">一行四个数据，分别表示B点坐标和马的坐标。（保证所有的数据有解）</font></p>','<p><font size=\"3\" face=\"Times New Roman\">一个数据，表示所有的路径条数。</font></p>','6 6 3 3','6','0','','吉首大学软件学院','2017-04-30 15:05:04',1,128,'N',0,0,0);
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
/*!40000 ALTER TABLE `problem` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `reply`
--

DROP TABLE IF EXISTS `reply`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `reply` (
  `rid` int(11) NOT NULL AUTO_INCREMENT,
  `author_id` varchar(48) NOT NULL,
  `time` datetime NOT NULL DEFAULT '2016-05-13 19:24:00',
  `content` text NOT NULL,
  `topic_id` int(11) NOT NULL,
  `status` int(2) NOT NULL DEFAULT '0',
  `ip` varchar(30) NOT NULL,
  `vote_up` int(10) default 0,
  `vote_down` int(10) default 0,
<<<<<<< HEAD
<<<<<<< HEAD
  `delete_flag` int(11) not null default '0',
=======
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
  PRIMARY KEY (`rid`),
  KEY `author_id` (`author_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `reply`
--

LOCK TABLES `reply` WRITE;
/*!40000 ALTER TABLE `reply` DISABLE KEYS */;
<<<<<<< HEAD
<<<<<<< HEAD
/*INSERT INTO `reply` VALUES (1,'yhy5058','2017-04-30 04:28:27','测试',1,0,'59.67.0.184');*/
  INSERT INTO reply (author_id,time, content, topic_id, ip) VALUES ('yhy5058','2017-04-30 04:28:27','测试',1001,'59.67.0.184');
=======
INSERT INTO `reply` VALUES (1,'yhy5058','2017-04-30 04:28:27','测试',1,0,'59.67.0.184');
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
INSERT INTO `reply` VALUES (1,'yhy5058','2017-04-30 04:28:27','测试',1,0,'59.67.0.184');
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
/*!40000 ALTER TABLE `reply` ENABLE KEYS */;
UNLOCK TABLES;

/*讨论表
DROP TABLE IF EXISTS `discussion`;
CREATE TABLE `discussion` (
  `discussion_id` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `discussion_uid` varchar(48) NOT NULL DEFAULT '',
  `discussion_title` VARCHAR(60) NOT NULL,
  `discussion_create_time` TIMESTAMP NOT NULL DEFAULT current_timestamp,
  `discussion_status` int(2) NOT NULL DEFAULT '0',
  `discussion_level` int(2) NOT NULL DEFAULT '0',
  `discussion_content` text not null,*/
  /*点击量
  `discussion_hits` int(10) NOT NULL DEFAULT 0,
  `problem_id` BIGINT(20) DEFAULT NULL ,
  PRIMARY KEY (`discussion_id`)
)ENGINE =InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET =utf8;*/
/*
INSERT INTO discussion (discussion_id, discussion_uid, discussion_title, discussion_create_time,discussion_content,discussion_hits)
VALUES (1001,1001,'a discussion','2017-5-13 08:00:00','dasdadads',1);*/




/*讨论回复表
DROP TABLE IF EXISTS `discussion_replies`;
CREATE TABLE `discussion_replies` (
  `discussion_reply_id` BIGINT(20) NOT NULL AUTO_INCREMENT,
  `discussion_thread_id` BIGINT(20) NOT NULL,
  `discussion_reply_uid` varchar(48) NOT NULL DEFAULT '',
  `discussion_reply_time` TIMESTAMP NOT NULL DEFAULT current_timestamp,
  `discussion_reply_content` text  NOT NULL,*/
  /*追加的评论
  `discussion_added_reply` TEXT DEFAULT NULL,*/
  /*回复赞成数
  `discussion_reply_votes` text  NOT NULL,*/
  /*回复的状态：0为正常，-1为已删除
  discussion_reply_status INT(2) NOT NULL DEFAULT 0,

  PRIMARY KEY (`discussion_reply_id`)
)ENGINE =InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET =utf8;

INSERT INTO discussion_replies (discussion_reply_id, discussion_thread_id, discussion_reply_uid, discussion_reply_time, discussion_reply_content, discussion_reply_votes)
VALUES (1001,1001,1001,'2017-5-13 08:00:00','a reply',42);
*/


--
-- Table structure for table `runtimeinfo`
--

DROP TABLE IF EXISTS `runtimeinfo`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `runtimeinfo` (
  `solution_id` int(11) NOT NULL DEFAULT '0',
  `error` text,
  PRIMARY KEY (`solution_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `runtimeinfo`
--

LOCK TABLES `runtimeinfo` WRITE;
/*!40000 ALTER TABLE `runtimeinfo` DISABLE KEYS */;
INSERT INTO `runtimeinfo` VALUES (1018,'========[sample.out]=========\n=======diff out 100 lines=====\n1c1\n< 16.48\n\\ No newline at end of file\n---\n> 18.10\n==============================\n'),(1043,'Runtime Error:Segmentation fault\n'),(1060,'**************************\n         Very    Good!\n**************************\n'),(1072,'Hello world\n'),(1073,'30'),(1074,'20');
/*!40000 ALTER TABLE `runtimeinfo` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `sim`
--

DROP TABLE IF EXISTS `sim`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sim` (
  `s_id` int(11) NOT NULL,
  `sim_s_id` int(11) DEFAULT NULL,
  `sim` int(11) DEFAULT NULL,
  PRIMARY KEY (`s_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `sim`
--

LOCK TABLES `sim` WRITE;
/*!40000 ALTER TABLE `sim` DISABLE KEYS */;
/*!40000 ALTER TABLE `sim` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `solution`
--

DROP TABLE IF EXISTS `solution`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `solution` (
  `solution_id` int(11) NOT NULL AUTO_INCREMENT,
  `problem_id` int(11) NOT NULL DEFAULT '0',
  `user_id` char(48) NOT NULL,
  `time` int(11) NOT NULL DEFAULT '0',
  `memory` int(11) NOT NULL DEFAULT '0',
  `in_date` datetime NOT NULL DEFAULT '2016-05-13 19:24:00',
  `result` smallint(6) NOT NULL DEFAULT '0',
  `language` int(10) unsigned NOT NULL DEFAULT '0',
  `ip` char(46) NOT NULL,
  `contest_id` int(11) DEFAULT NULL,
  `valid` tinyint(4) NOT NULL DEFAULT '1',
  `num` tinyint(4) NOT NULL DEFAULT '-1',
  `code_length` int(11) NOT NULL DEFAULT '0',
  `judgetime` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `pass_rate` decimal(3,2) unsigned NOT NULL DEFAULT '0.00',
  `lint_error` int(10) unsigned NOT NULL DEFAULT '0',
  `judger` char(16) NOT NULL DEFAULT 'LOCAL',
<<<<<<< HEAD
<<<<<<< HEAD
  `delete_flag` int(11) not null default '0',
=======
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
  PRIMARY KEY (`solution_id`),
  KEY `uid` (`user_id`),
  KEY `pid` (`problem_id`),
  KEY `res` (`result`),
  KEY `cid` (`contest_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1077 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `solution`
--

LOCK TABLES `solution` WRITE;
/*!40000 ALTER TABLE `solution` DISABLE KEYS */;
<<<<<<< HEAD
<<<<<<< HEAD
INSERT INTO solution (solution_id, problem_id, user_id, time, memory, in_date, result, language, ip, contest_id, valid, num, code_length, judgetime, pass_rate, lint_error, judger)
VALUES (1001,1000,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,143,'2017-04-29 19:06:25',0.00,0,'admin'),(1002,1001,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,155,'2017-04-29 19:06:25',0.00,0,'admin'),(1003,1002,'14101118',0,1084,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,176,'2017-04-29 19:06:25',0.00,0,'admin'),(1004,1003,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,244,'2017-04-29 19:06:25',0.00,0,'admin'),(1005,1004,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,99,'2017-04-29 19:06:26',0.00,0,'admin'),(1006,1005,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,155,'2017-04-29 19:06:26',0.00,0,'admin'),(1007,1006,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,176,'2017-04-29 19:06:26',0.00,0,'admin'),(1008,1007,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,236,'2017-04-29 19:06:27',0.00,0,'admin'),(1009,1008,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,257,'2017-04-29 19:06:27',0.00,0,'admin'),(1010,1009,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,416,'2017-04-29 19:06:27',0.00,0,'admin'),(1011,1010,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,201,'2017-04-29 19:06:27',0.00,0,'admin'),(1012,1011,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,228,'2017-04-29 19:06:27',0.00,0,'admin'),(1013,1012,'14101118',0,1284,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,164,'2017-04-29 19:06:28',0.00,0,'admin'),(1014,1013,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,145,'2017-04-29 19:06:28',0.00,0,'admin'),(1015,1014,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,229,'2017-04-29 19:06:28',0.00,0,'admin'),(1016,1015,'14101118',0,1280,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,197,'2017-04-29 19:06:28',0.00,0,'admin'),(1017,1016,'14101118',808,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,248,'2017-04-29 19:06:29',0.00,0,'admin'),(1018,1017,'14101118',0,1092,'2017-04-30 03:06:25',6,1,'127.0.0.1',NULL,1,-1,162,'2017-04-29 19:06:29',0.00,0,'admin'),(1019,1018,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,163,'2017-04-29 19:06:29',0.00,0,'admin'),(1020,1019,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,124,'2017-04-29 19:06:29',0.00,0,'admin'),(1021,1020,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,181,'2017-04-29 19:06:30',0.00,0,'admin'),(1022,1021,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,270,'2017-04-29 19:06:30',0.00,0,'admin'),(1023,1022,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,228,'2017-04-29 19:06:30',0.00,0,'admin'),(1024,1023,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,206,'2017-04-29 19:06:31',0.00,0,'admin'),(1025,1024,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,243,'2017-04-29 19:06:31',0.00,0,'admin'),(1026,1025,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,301,'2017-04-29 19:06:31',0.00,0,'admin'),(1027,1026,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,430,'2017-04-29 19:06:32',0.00,0,'admin'),(1028,1027,'14101118',0,1116,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,620,'2017-04-29 19:06:32',0.00,0,'admin'),(1029,1028,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,277,'2017-04-29 19:06:32',0.00,0,'admin'),(1030,1029,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,341,'2017-04-29 19:06:33',0.00,0,'admin'),(1031,1030,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,266,'2017-04-29 19:06:33',0.00,0,'admin'),(1032,1031,'14101118',0,1100,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,174,'2017-04-29 19:06:33',0.00,0,'admin'),(1033,1032,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,288,'2017-04-29 19:06:33',0.00,0,'admin'),(1034,1033,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,294,'2017-04-29 19:06:33',0.00,0,'admin'),(1035,1034,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,369,'2017-04-29 19:06:33',0.00,0,'admin'),(1036,1035,'14101118',0,1088,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,125,'2017-04-29 19:06:34',0.00,0,'admin'),(1037,1036,'14101118',0,1088,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,101,'2017-04-29 19:06:34',0.00,0,'admin'),(1038,1037,'14101118',0,1116,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,257,'2017-04-29 19:06:34',0.00,0,'admin'),(1039,1038,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,140,'2017-04-29 19:06:35',0.00,0,'admin'),(1040,1039,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,197,'2017-04-29 19:06:35',0.00,0,'admin'),(1041,1040,'14101118',0,1088,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,169,'2017-04-29 19:06:35',0.00,0,'admin'),(1042,1041,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,238,'2017-04-29 19:06:35',0.00,0,'admin'),(1043,1042,'14101118',0,1088,'2017-04-30 03:06:25',10,0,'127.0.0.1',NULL,1,-1,231,'2017-04-29 19:06:36',0.00,0,'admin'),(1044,1043,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,485,'2017-04-29 19:06:36',0.00,0,'admin'),(1045,1044,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,490,'2017-04-29 19:06:36',0.00,0,'admin'),(1046,1045,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,460,'2017-04-29 19:06:36',0.00,0,'admin'),(1047,1046,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,195,'2017-04-29 19:06:36',0.00,0,'admin'),(1048,1047,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,299,'2017-04-29 19:06:37',0.00,0,'admin'),(1049,1048,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,734,'2017-04-29 19:06:37',0.00,0,'admin'),(1050,1049,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,619,'2017-04-29 19:06:37',0.00,0,'admin'),(1051,1050,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,764,'2017-04-29 19:06:38',0.00,0,'admin'),(1052,1051,'14101118',140,7612,'2017-04-30 03:06:25',4,3,'127.0.0.1',NULL,1,-1,609,'2017-04-29 19:06:38',0.00,0,'admin'),(1053,1052,'14101118',0,1708,'2017-04-30 03:06:40',4,1,'127.0.0.1',NULL,1,-1,724,'2017-04-29 19:06:41',0.00,0,'admin'),(1054,1053,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,600,'2017-04-29 19:06:41',0.00,0,'admin'),(1055,1054,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,174,'2017-04-29 19:06:41',0.00,0,'admin'),(1056,1055,'14101118',0,1708,'2017-04-30 03:06:40',4,1,'127.0.0.1',NULL,1,-1,2150,'2017-04-29 19:06:41',0.00,0,'admin'),(1057,1056,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,119,'2017-04-29 19:06:42',0.00,0,'admin'),(1058,1057,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,126,'2017-04-29 19:06:42',0.00,0,'admin'),(1059,1058,'14101118',0,1096,'2017-04-30 03:06:40',4,1,'127.0.0.1',NULL,1,-1,656,'2017-04-29 19:06:43',0.00,0,'admin'),(1060,0,'14101118',88,6704,'2017-04-30 03:10:17',13,3,'59.67.0.184',NULL,1,-1,184,'2017-04-29 19:10:17',0.00,0,'admin'),(1061,1000,'14101118',88,6700,'2017-04-30 03:10:40',4,3,'59.67.0.184',NULL,1,-1,184,'2017-04-29 19:10:40',0.00,0,'admin'),(1062,1072,'14101118',0,1288,'2017-04-30 15:03:39',4,1,'127.0.0.1',NULL,1,-1,1013,'2017-04-30 07:03:40',0.00,0,'admin'),(1063,1073,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,1527,'2017-04-30 07:03:40',0.00,0,'admin'),(1064,1074,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,460,'2017-04-30 07:03:40',0.00,0,'admin'),(1065,1075,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,1070,'2017-04-30 07:03:40',0.00,0,'admin'),(1066,1076,'14101118',0,1252,'2017-04-30 15:03:39',4,1,'127.0.0.1',NULL,1,-1,915,'2017-04-30 07:03:41',0.00,0,'admin'),(1067,1077,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,715,'2017-04-30 07:03:41',0.00,0,'admin'),(1068,1078,'14101118',36,4996,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,563,'2017-04-30 07:03:42',0.00,0,'admin'),(1069,1079,'14101118',0,1292,'2017-04-30 15:03:39',4,1,'127.0.0.1',NULL,1,-1,1004,'2017-04-30 07:03:42',0.00,0,'admin'),(1070,1080,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,977,'2017-04-30 07:03:43',0.00,0,'admin'),(1071,1081,'14101118',380,1100,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,1823,'2017-04-30 07:03:43',0.00,0,'admin'),(1072,0,'14101118',0,1088,'2017-05-03 10:26:12',13,0,'59.67.0.181',NULL,1,-1,75,'2017-05-03 02:26:13',0.00,0,'admin'),(1073,0,'14101118',0,1092,'2017-05-04 00:32:35',13,0,'59.67.0.196',NULL,1,-1,237,'2017-05-03 16:32:35',0.00,0,'admin'),(1074,0,'14101118',0,1092,'2017-05-04 00:32:52',13,0,'59.67.0.196',NULL,1,-1,237,'2017-05-03 16:32:52',0.00,0,'admin'),(1075,1001,'14101118',0,1092,'2017-05-04 00:33:18',4,0,'59.67.0.196',NULL,1,-1,237,'2017-05-03 16:33:19',0.00,0,'admin'),(1076,1001,'14101118',0,0,'2017-05-04 00:51:14',11,0,'59.67.0.196',NULL,1,-1,113,'2017-05-03 16:51:15',0.00,0,'admin');
=======
INSERT INTO `solution` VALUES (1001,1000,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,143,'2017-04-29 19:06:25',0.00,0,'admin'),(1002,1001,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,155,'2017-04-29 19:06:25',0.00,0,'admin'),(1003,1002,'14101118',0,1084,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,176,'2017-04-29 19:06:25',0.00,0,'admin'),(1004,1003,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,244,'2017-04-29 19:06:25',0.00,0,'admin'),(1005,1004,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,99,'2017-04-29 19:06:26',0.00,0,'admin'),(1006,1005,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,155,'2017-04-29 19:06:26',0.00,0,'admin'),(1007,1006,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,176,'2017-04-29 19:06:26',0.00,0,'admin'),(1008,1007,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,236,'2017-04-29 19:06:27',0.00,0,'admin'),(1009,1008,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,257,'2017-04-29 19:06:27',0.00,0,'admin'),(1010,1009,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,416,'2017-04-29 19:06:27',0.00,0,'admin'),(1011,1010,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,201,'2017-04-29 19:06:27',0.00,0,'admin'),(1012,1011,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,228,'2017-04-29 19:06:27',0.00,0,'admin'),(1013,1012,'14101118',0,1284,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,164,'2017-04-29 19:06:28',0.00,0,'admin'),(1014,1013,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,145,'2017-04-29 19:06:28',0.00,0,'admin'),(1015,1014,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,229,'2017-04-29 19:06:28',0.00,0,'admin'),(1016,1015,'14101118',0,1280,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,197,'2017-04-29 19:06:28',0.00,0,'admin'),(1017,1016,'14101118',808,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,248,'2017-04-29 19:06:29',0.00,0,'admin'),(1018,1017,'14101118',0,1092,'2017-04-30 03:06:25',6,1,'127.0.0.1',NULL,1,-1,162,'2017-04-29 19:06:29',0.00,0,'admin'),(1019,1018,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,163,'2017-04-29 19:06:29',0.00,0,'admin'),(1020,1019,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,124,'2017-04-29 19:06:29',0.00,0,'admin'),(1021,1020,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,181,'2017-04-29 19:06:30',0.00,0,'admin'),(1022,1021,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,270,'2017-04-29 19:06:30',0.00,0,'admin'),(1023,1022,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,228,'2017-04-29 19:06:30',0.00,0,'admin'),(1024,1023,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,206,'2017-04-29 19:06:31',0.00,0,'admin'),(1025,1024,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,243,'2017-04-29 19:06:31',0.00,0,'admin'),(1026,1025,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,301,'2017-04-29 19:06:31',0.00,0,'admin'),(1027,1026,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,430,'2017-04-29 19:06:32',0.00,0,'admin'),(1028,1027,'14101118',0,1116,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,620,'2017-04-29 19:06:32',0.00,0,'admin'),(1029,1028,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,277,'2017-04-29 19:06:32',0.00,0,'admin'),(1030,1029,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,341,'2017-04-29 19:06:33',0.00,0,'admin'),(1031,1030,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,266,'2017-04-29 19:06:33',0.00,0,'admin'),(1032,1031,'14101118',0,1100,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,174,'2017-04-29 19:06:33',0.00,0,'admin'),(1033,1032,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,288,'2017-04-29 19:06:33',0.00,0,'admin'),(1034,1033,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,294,'2017-04-29 19:06:33',0.00,0,'admin'),(1035,1034,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,369,'2017-04-29 19:06:33',0.00,0,'admin'),(1036,1035,'14101118',0,1088,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,125,'2017-04-29 19:06:34',0.00,0,'admin'),(1037,1036,'14101118',0,1088,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,101,'2017-04-29 19:06:34',0.00,0,'admin'),(1038,1037,'14101118',0,1116,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,257,'2017-04-29 19:06:34',0.00,0,'admin'),(1039,1038,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,140,'2017-04-29 19:06:35',0.00,0,'admin'),(1040,1039,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,197,'2017-04-29 19:06:35',0.00,0,'admin'),(1041,1040,'14101118',0,1088,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,169,'2017-04-29 19:06:35',0.00,0,'admin'),(1042,1041,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,238,'2017-04-29 19:06:35',0.00,0,'admin'),(1043,1042,'14101118',0,1088,'2017-04-30 03:06:25',10,0,'127.0.0.1',NULL,1,-1,231,'2017-04-29 19:06:36',0.00,0,'admin'),(1044,1043,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,485,'2017-04-29 19:06:36',0.00,0,'admin'),(1045,1044,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,490,'2017-04-29 19:06:36',0.00,0,'admin'),(1046,1045,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,460,'2017-04-29 19:06:36',0.00,0,'admin'),(1047,1046,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,195,'2017-04-29 19:06:36',0.00,0,'admin'),(1048,1047,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,299,'2017-04-29 19:06:37',0.00,0,'admin'),(1049,1048,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,734,'2017-04-29 19:06:37',0.00,0,'admin'),(1050,1049,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,619,'2017-04-29 19:06:37',0.00,0,'admin'),(1051,1050,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,764,'2017-04-29 19:06:38',0.00,0,'admin'),(1052,1051,'14101118',140,7612,'2017-04-30 03:06:25',4,3,'127.0.0.1',NULL,1,-1,609,'2017-04-29 19:06:38',0.00,0,'admin'),(1053,1052,'14101118',0,1708,'2017-04-30 03:06:40',4,1,'127.0.0.1',NULL,1,-1,724,'2017-04-29 19:06:41',0.00,0,'admin'),(1054,1053,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,600,'2017-04-29 19:06:41',0.00,0,'admin'),(1055,1054,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,174,'2017-04-29 19:06:41',0.00,0,'admin'),(1056,1055,'14101118',0,1708,'2017-04-30 03:06:40',4,1,'127.0.0.1',NULL,1,-1,2150,'2017-04-29 19:06:41',0.00,0,'admin'),(1057,1056,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,119,'2017-04-29 19:06:42',0.00,0,'admin'),(1058,1057,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,126,'2017-04-29 19:06:42',0.00,0,'admin'),(1059,1058,'14101118',0,1096,'2017-04-30 03:06:40',4,1,'127.0.0.1',NULL,1,-1,656,'2017-04-29 19:06:43',0.00,0,'admin'),(1060,0,'14101118',88,6704,'2017-04-30 03:10:17',13,3,'59.67.0.184',NULL,1,-1,184,'2017-04-29 19:10:17',0.00,0,'admin'),(1061,1000,'14101118',88,6700,'2017-04-30 03:10:40',4,3,'59.67.0.184',NULL,1,-1,184,'2017-04-29 19:10:40',0.00,0,'admin'),(1062,1072,'14101118',0,1288,'2017-04-30 15:03:39',4,1,'127.0.0.1',NULL,1,-1,1013,'2017-04-30 07:03:40',0.00,0,'admin'),(1063,1073,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,1527,'2017-04-30 07:03:40',0.00,0,'admin'),(1064,1074,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,460,'2017-04-30 07:03:40',0.00,0,'admin'),(1065,1075,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,1070,'2017-04-30 07:03:40',0.00,0,'admin'),(1066,1076,'14101118',0,1252,'2017-04-30 15:03:39',4,1,'127.0.0.1',NULL,1,-1,915,'2017-04-30 07:03:41',0.00,0,'admin'),(1067,1077,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,715,'2017-04-30 07:03:41',0.00,0,'admin'),(1068,1078,'14101118',36,4996,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,563,'2017-04-30 07:03:42',0.00,0,'admin'),(1069,1079,'14101118',0,1292,'2017-04-30 15:03:39',4,1,'127.0.0.1',NULL,1,-1,1004,'2017-04-30 07:03:42',0.00,0,'admin'),(1070,1080,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,977,'2017-04-30 07:03:43',0.00,0,'admin'),(1071,1081,'14101118',380,1100,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,1823,'2017-04-30 07:03:43',0.00,0,'admin'),(1072,0,'14101118',0,1088,'2017-05-03 10:26:12',13,0,'59.67.0.181',NULL,1,-1,75,'2017-05-03 02:26:13',0.00,0,'admin'),(1073,0,'14101118',0,1092,'2017-05-04 00:32:35',13,0,'59.67.0.196',NULL,1,-1,237,'2017-05-03 16:32:35',0.00,0,'admin'),(1074,0,'14101118',0,1092,'2017-05-04 00:32:52',13,0,'59.67.0.196',NULL,1,-1,237,'2017-05-03 16:32:52',0.00,0,'admin'),(1075,1001,'14101118',0,1092,'2017-05-04 00:33:18',4,0,'59.67.0.196',NULL,1,-1,237,'2017-05-03 16:33:19',0.00,0,'admin'),(1076,1001,'14101118',0,0,'2017-05-04 00:51:14',11,0,'59.67.0.196',NULL,1,-1,113,'2017-05-03 16:51:15',0.00,0,'admin');
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
INSERT INTO `solution` VALUES (1001,1000,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,143,'2017-04-29 19:06:25',0.00,0,'admin'),(1002,1001,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,155,'2017-04-29 19:06:25',0.00,0,'admin'),(1003,1002,'14101118',0,1084,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,176,'2017-04-29 19:06:25',0.00,0,'admin'),(1004,1003,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,244,'2017-04-29 19:06:25',0.00,0,'admin'),(1005,1004,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,99,'2017-04-29 19:06:26',0.00,0,'admin'),(1006,1005,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,155,'2017-04-29 19:06:26',0.00,0,'admin'),(1007,1006,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,176,'2017-04-29 19:06:26',0.00,0,'admin'),(1008,1007,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,236,'2017-04-29 19:06:27',0.00,0,'admin'),(1009,1008,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,257,'2017-04-29 19:06:27',0.00,0,'admin'),(1010,1009,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,416,'2017-04-29 19:06:27',0.00,0,'admin'),(1011,1010,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,201,'2017-04-29 19:06:27',0.00,0,'admin'),(1012,1011,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,228,'2017-04-29 19:06:27',0.00,0,'admin'),(1013,1012,'14101118',0,1284,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,164,'2017-04-29 19:06:28',0.00,0,'admin'),(1014,1013,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,145,'2017-04-29 19:06:28',0.00,0,'admin'),(1015,1014,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,229,'2017-04-29 19:06:28',0.00,0,'admin'),(1016,1015,'14101118',0,1280,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,197,'2017-04-29 19:06:28',0.00,0,'admin'),(1017,1016,'14101118',808,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,248,'2017-04-29 19:06:29',0.00,0,'admin'),(1018,1017,'14101118',0,1092,'2017-04-30 03:06:25',6,1,'127.0.0.1',NULL,1,-1,162,'2017-04-29 19:06:29',0.00,0,'admin'),(1019,1018,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,163,'2017-04-29 19:06:29',0.00,0,'admin'),(1020,1019,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,124,'2017-04-29 19:06:29',0.00,0,'admin'),(1021,1020,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,181,'2017-04-29 19:06:30',0.00,0,'admin'),(1022,1021,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,270,'2017-04-29 19:06:30',0.00,0,'admin'),(1023,1022,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,228,'2017-04-29 19:06:30',0.00,0,'admin'),(1024,1023,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,206,'2017-04-29 19:06:31',0.00,0,'admin'),(1025,1024,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,243,'2017-04-29 19:06:31',0.00,0,'admin'),(1026,1025,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,301,'2017-04-29 19:06:31',0.00,0,'admin'),(1027,1026,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,430,'2017-04-29 19:06:32',0.00,0,'admin'),(1028,1027,'14101118',0,1116,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,620,'2017-04-29 19:06:32',0.00,0,'admin'),(1029,1028,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,277,'2017-04-29 19:06:32',0.00,0,'admin'),(1030,1029,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,341,'2017-04-29 19:06:33',0.00,0,'admin'),(1031,1030,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,266,'2017-04-29 19:06:33',0.00,0,'admin'),(1032,1031,'14101118',0,1100,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,174,'2017-04-29 19:06:33',0.00,0,'admin'),(1033,1032,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,288,'2017-04-29 19:06:33',0.00,0,'admin'),(1034,1033,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,294,'2017-04-29 19:06:33',0.00,0,'admin'),(1035,1034,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,369,'2017-04-29 19:06:33',0.00,0,'admin'),(1036,1035,'14101118',0,1088,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,125,'2017-04-29 19:06:34',0.00,0,'admin'),(1037,1036,'14101118',0,1088,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,101,'2017-04-29 19:06:34',0.00,0,'admin'),(1038,1037,'14101118',0,1116,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,257,'2017-04-29 19:06:34',0.00,0,'admin'),(1039,1038,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,140,'2017-04-29 19:06:35',0.00,0,'admin'),(1040,1039,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,197,'2017-04-29 19:06:35',0.00,0,'admin'),(1041,1040,'14101118',0,1088,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,169,'2017-04-29 19:06:35',0.00,0,'admin'),(1042,1041,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,238,'2017-04-29 19:06:35',0.00,0,'admin'),(1043,1042,'14101118',0,1088,'2017-04-30 03:06:25',10,0,'127.0.0.1',NULL,1,-1,231,'2017-04-29 19:06:36',0.00,0,'admin'),(1044,1043,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,485,'2017-04-29 19:06:36',0.00,0,'admin'),(1045,1044,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,490,'2017-04-29 19:06:36',0.00,0,'admin'),(1046,1045,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,460,'2017-04-29 19:06:36',0.00,0,'admin'),(1047,1046,'14101118',0,1088,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,195,'2017-04-29 19:06:36',0.00,0,'admin'),(1048,1047,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,299,'2017-04-29 19:06:37',0.00,0,'admin'),(1049,1048,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,734,'2017-04-29 19:06:37',0.00,0,'admin'),(1050,1049,'14101118',0,1092,'2017-04-30 03:06:25',4,0,'127.0.0.1',NULL,1,-1,619,'2017-04-29 19:06:37',0.00,0,'admin'),(1051,1050,'14101118',0,1092,'2017-04-30 03:06:25',4,1,'127.0.0.1',NULL,1,-1,764,'2017-04-29 19:06:38',0.00,0,'admin'),(1052,1051,'14101118',140,7612,'2017-04-30 03:06:25',4,3,'127.0.0.1',NULL,1,-1,609,'2017-04-29 19:06:38',0.00,0,'admin'),(1053,1052,'14101118',0,1708,'2017-04-30 03:06:40',4,1,'127.0.0.1',NULL,1,-1,724,'2017-04-29 19:06:41',0.00,0,'admin'),(1054,1053,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,600,'2017-04-29 19:06:41',0.00,0,'admin'),(1055,1054,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,174,'2017-04-29 19:06:41',0.00,0,'admin'),(1056,1055,'14101118',0,1708,'2017-04-30 03:06:40',4,1,'127.0.0.1',NULL,1,-1,2150,'2017-04-29 19:06:41',0.00,0,'admin'),(1057,1056,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,119,'2017-04-29 19:06:42',0.00,0,'admin'),(1058,1057,'14101118',0,1092,'2017-04-30 03:06:40',4,0,'127.0.0.1',NULL,1,-1,126,'2017-04-29 19:06:42',0.00,0,'admin'),(1059,1058,'14101118',0,1096,'2017-04-30 03:06:40',4,1,'127.0.0.1',NULL,1,-1,656,'2017-04-29 19:06:43',0.00,0,'admin'),(1060,0,'14101118',88,6704,'2017-04-30 03:10:17',13,3,'59.67.0.184',NULL,1,-1,184,'2017-04-29 19:10:17',0.00,0,'admin'),(1061,1000,'14101118',88,6700,'2017-04-30 03:10:40',4,3,'59.67.0.184',NULL,1,-1,184,'2017-04-29 19:10:40',0.00,0,'admin'),(1062,1072,'14101118',0,1288,'2017-04-30 15:03:39',4,1,'127.0.0.1',NULL,1,-1,1013,'2017-04-30 07:03:40',0.00,0,'admin'),(1063,1073,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,1527,'2017-04-30 07:03:40',0.00,0,'admin'),(1064,1074,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,460,'2017-04-30 07:03:40',0.00,0,'admin'),(1065,1075,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,1070,'2017-04-30 07:03:40',0.00,0,'admin'),(1066,1076,'14101118',0,1252,'2017-04-30 15:03:39',4,1,'127.0.0.1',NULL,1,-1,915,'2017-04-30 07:03:41',0.00,0,'admin'),(1067,1077,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,715,'2017-04-30 07:03:41',0.00,0,'admin'),(1068,1078,'14101118',36,4996,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,563,'2017-04-30 07:03:42',0.00,0,'admin'),(1069,1079,'14101118',0,1292,'2017-04-30 15:03:39',4,1,'127.0.0.1',NULL,1,-1,1004,'2017-04-30 07:03:42',0.00,0,'admin'),(1070,1080,'14101118',0,1092,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,977,'2017-04-30 07:03:43',0.00,0,'admin'),(1071,1081,'14101118',380,1100,'2017-04-30 15:03:39',4,0,'127.0.0.1',NULL,1,-1,1823,'2017-04-30 07:03:43',0.00,0,'admin'),(1072,0,'14101118',0,1088,'2017-05-03 10:26:12',13,0,'59.67.0.181',NULL,1,-1,75,'2017-05-03 02:26:13',0.00,0,'admin'),(1073,0,'14101118',0,1092,'2017-05-04 00:32:35',13,0,'59.67.0.196',NULL,1,-1,237,'2017-05-03 16:32:35',0.00,0,'admin'),(1074,0,'14101118',0,1092,'2017-05-04 00:32:52',13,0,'59.67.0.196',NULL,1,-1,237,'2017-05-03 16:32:52',0.00,0,'admin'),(1075,1001,'14101118',0,1092,'2017-05-04 00:33:18',4,0,'59.67.0.196',NULL,1,-1,237,'2017-05-03 16:33:19',0.00,0,'admin'),(1076,1001,'14101118',0,0,'2017-05-04 00:51:14',11,0,'59.67.0.196',NULL,1,-1,113,'2017-05-03 16:51:15',0.00,0,'admin');
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
/*!40000 ALTER TABLE `solution` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `source_code`
--

DROP TABLE IF EXISTS `source_code`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `source_code` (
  `solution_id` int(11) NOT NULL,
  `source` text NOT NULL,
  PRIMARY KEY (`solution_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `source_code`
--

LOCK TABLES `source_code` WRITE;
/*!40000 ALTER TABLE `source_code` DISABLE KEYS */;
INSERT INTO `source_code` VALUES (1001,'\n#include<stdio.h>\nmain(){\nprintf(\"**************************\\n\");\nprintf(\"         Very    Good!\\n\");\nprintf(\"**************************\");\n\n}'),(1002,'\n#include<stdio.h>\nint max(int a,int b){\n return a>b?a:b;\n}\n\nint main(){\n int a,b,c;\n scanf(\"%d%d%d\",&a,&b,&c);\n printf(\"%d\",max(a,max(b,c)));\n return 0;\n}'),(1003,'\n#include <stdio.h>  \nmain()   \n{\nchar c1=\'C\',c2=\'h\',c3=\'i\',c4=\'n\',c5=\'a\';  \n  c1+=4;  \n  c2+=4;  \n  c3+=4;  \n  c4+=4;  \n  c5+=4;  \n  printf(\"%c%c%c%c%c\\n\",c1,c2,c3,c4,c5);  \n}'),(1004,'\n#include <stdio.h>\nmain()  \n{float r,h,C1,Sa,Sb,Va,Vb;  \nscanf(\"%f %f\",&r,&h);  \nC1=2*3.14*r;  \nSa=3.14*r*r;  \nSb=4*Sa;  \nVa=4*3.14*r*r*r/3;  \nVb=Sa*h;  \nprintf(\"C1=%.2f\\n\",C1);  \nprintf(\"Sa=%.2f\\nSb=%.2f\\nVa=%.2f\\nVb=%.2f\\n\",Sa,Sb,Va,Vb);  \n}'),(1005,'\n#include<stdio.h>\nmain()  \n{float F,c;  \nscanf(\"%f\",&F);  \nc=5*(F-32)/9;  \nprintf(\"c=%.2f\",c);  \n}'),(1006,'\n#include<stdio.h>\nint max(int a,int b){\n return a>b?a:b;\n}\n\nint main(){\n int a,b,c;\n scanf(\"%d%d%d\",&a,&b,&c);\n printf(\"%d\",max(a,max(b,c)));\n return 0;\n}'),(1007,'\n#include<stdio.h>\nint f(int x){\n  if(x<1) return x;\n  if(x>=1&&x<10) return x*2-1;\n  return x*3-11;\n}\nint main(){\n  int a;\n  scanf(\"%d\",&a);\n  printf(\"%d\",f(a));\n  return 0;\n}'),(1008,'\n#include<stdio.h>\nchar f(int x){\n  if(x<60) return \'E\';\n  if(x>=60&&x<70) return \'D\';\n  if(x>=70&&x<80) return \'C\';\n  if(x>=80&&x<90) return \'B\';\n  return \'A\';\n}\nint main(){\n  int a;\n  scanf(\"%d\",&a);\n  printf(\"%c\",f(a));\n  return 0;\n}'),(1009,'\n#include <stdio.h>\n#include <string.h>\nint main(){\n  char a[10];\n  int i,l;\n  scanf(\"%s\",a);\n  l=strlen(a);\n  printf(\"%d\\n\",l);\n  for(i=0;i<l-1;i++)\n  printf(\"%c \",a[i]);\n  printf(\"%c\\n\",a[i]);\n  for(i=l-1;i>=0;i--)\n  printf(\"%c\",a[i]);\n  \n  \n  return 0;\n}'),(1010,'\n#include <stdio.h>\nint main()\n{\n	int n;\n	double m=0;\n	scanf(\"%d\",&n);\n\n	if(n>1000000)\n	{\n		m += (n-1000000)*0.01;\n		n = 1000000;\n	}\n	if(n>600000)\n	{\n		m += (n-600000)*0.015;\n		n = 600000;\n	}\n	if(n>400000)\n	{\n		m += (n-400000)*0.03;\n		n = 400000;\n	}\n	if(n>200000)\n	{\n		m += (n-200000)*0.05;\n		n = 200000;\n	}\n	if(n>100000)\n	{\n		m += (n-100000)*0.075;\n		n = 100000;\n	}\n	m += n*0.1;\n	printf(\"%d\\n\",(int)m);\n	return 0;\n}'),(1011,'\n#include<stdio.h>\nint main()\n{\n	int p,r,n,m,temp;\n	scanf(\"%d %d\",&m,&n);\n	if(n<m)\n	{\n		temp=n;\n		n=m;\n		m=temp;\n	}\n	p=n*m;\n	while(m!=0)\n	{\n		r=n%m;\n		n=m;\n		m=r;\n	}\n	printf(\"%d %d\",n,p/n);\nreturn 0;\n}'),(1012,'\n#include\"stdio.h\"  \nmain()  \n{char c;int i=0,j=0,k=0,l=0;  \nwhile((c=getchar())!=\'\\n\')  \n{if(c>=65&&c<=90||c>=97&&c<=122) i++;  \nelse if(c>=48&&c<=57) j++;  \nelse if(c==32) k++;  \nelse l++;}  \nprintf(\"%d %d %d %d\",i,j,k,l);  \n}'),(1013,'\n#include\"stdio.h\"  \n#include\"math.h\"  \nmain()  \n{int n,sum=0,i=1,s=2;  \nscanf(\"%d\",&n);  \nwhile(i<=n)  \n{sum=sum+s;s=s+2*pow(10,i);  \ni++;}  \nprintf(\"%d\",sum);  \n}'),(1014,'\n#include\"stdio.h\"  \nmain()  \n{long n,i=1;long long sum=0,s=1;  \nscanf(\"%d\",&n);  \nwhile(i<=n) {s=s*i;sum=sum+s;i++;}  \nprintf(\"%lld\\n\",sum);  \n}'),(1015,'\n#include<stdio.h>\nmain()  \n{double i=1,j=1,k=1,s1=0,s2=0,s3=0,sum; \nint a,b,c;\nscanf(\"%d%d%d\",&a,&b,&c);\nfor(;i<=a;i++) s1=s1+i;  \nfor(;j<=b;j++) s2=s2+j*j;  \nfor(;k<=c;k++) s3=s3+1/k;  \nsum=s1+s2+s3;  \nprintf(\"%.2f\\n\",sum);  \n}'),(1016,'\n#include\"stdio.h\"  \n#include\"math.h\"  \nmain()  \n{int x=100,a,b,c;  \nwhile(x>=100&&x<1000) {a=0.01*x;b=10*(0.01*x-a);c=x-100*a-10*b;  \nif(x==(pow(a,3)+pow(b,3)+pow(c,3))) printf(\"%d\\n\",x);x++;}  \n}'),(1017,'#include<stdio.h>\nmain()  \n{int m,i,j,s;\nint N;\nscanf(\"%d\",&N);  \nfor(m=6;m<N;m++)  \n{s=1;  \nfor(i=2;i<m;i++)  \nif(m%i==0) s=s+i;  \nif(m-s==0)  \n{printf(\"%d its factors are 1 \",m);for(j=2;j<m;j++) if(m%j==0)  \nprintf(\"%d \",j);printf(\"\\n\");}  \n}  \n}'),(1018,'\n#include<stdio.h>\nmain()  \n{int i=1,n;double t,x=1,y=2,s,sum=0;  \nscanf(\"%ld\",&n);  \nwhile(i<=n) {s=y/x;sum=sum+s;t=y;y=y+x;x=t;i++;}  \nprintf(\"%.2f\\n\",sum);  \n}'),(1019,'\n#include\"stdio.h\"  \n#include\"math.h\"\nmain()  \n{int i,n;\nfloat h,s;  \nscanf(\"%f%d\",&s,&n);\nh=s/2;\nfor(i=2;i<=n;i++)  \n{s+=2*h;h/=2;}  \nprintf(\"%.2f %.2f\",h,s);  \n}'),(1020,'\n#include <stdio.h>\nmain()  \n{int i=1,sum=1;  \nint n;\nscanf(\"%d\",&n);\nfor(;i<n;sum=2*(sum+1),i++);  \nprintf(\"%d\\n\",sum);  \n}'),(1021,'\n#include\"stdio.h\"  \n#include\"math.h\"\n \nmain()  \n{float x0,x1,a;  \nscanf(\"%f\",&a);  \nx1=a/2;  \ndo  \n{x0=x1;x1=(x0+a/x0)/2;}  \nwhile(fabs(x0-x1)>=0.00001);  \nprintf(\"%.3f\\n\",x1);  \n}'),(1022,'\n#include <stdio.h>\nvoid prim(int n){\n	int i,j,a[n];  \n	for(i=2;i<n;i++)  \n	{ 	a[i]=i;  \n		for(j=2;j<=i;j++)  \n		{\n			if(j<i)  \n			 if(a[i]%j==0)  \n			 break;  \n			if(a[i]-j==0)  \n			 printf(\"%d\\n\",a[i]);  \n		}  \n	} 	\n}\nmain()  \n{  \n	int  a;\n	scanf(\"%d\",&a);\n	prim(a);\n}'),(1023,'\n#include<stdio.h>\nmain()  \n{ int i,j,a[10],t;  \nfor(i=0;i<10;i++)  \nscanf(\"%d\",&a[i]);  \nfor(j=1;j<10;j++)  \nfor(i=0;i<=9-j;i++)  \nif(a[i]>a[i+1])   \n{t=a[i+1];a[i+1]=a[i];a[i]=t;}  \nfor(i=0;i<10;i++)  \nprintf(\"%d\\n\",a[i]);  \n}'),(1024,'\n#include<stdio.h>\nmain()  \n{int i=0,j=0,a[3][3],s1,s2;  \nfor(i=0;i<3;i++)  \nfor(j=0;j<3;j++)  \nscanf(\"%d\",&a[i][j]);  \ns1=a[0][0]+a[1][1]+a[2][2];  \ns2=a[0][2]+a[1][1]+a[2][0];  \nprintf(\"%d %d\",s1,s2);  \n}'),(1025,'\n#include<stdio.h>\nmain()  \n{\n	int a[10]={1,5,8,17,23,24,60,62,101};\n	int i,j,t;  \n	for(i=0;i<10;i++)\n		scanf(\"%d\",&a[i]);  \n	for(i=9;i>0;i--)  \n	if(a[i]<a[i-1])  \n	{t=a[i-1];a[i-1]=a[i];a[i]=t;}  \n	for(i=0;i<10;i++)  \n	printf(\"%d\\n\",a[i]); \n}'),(1026,'\n#include <stdio.h>\n#include <string.h>\nint main(){	\n	int iInput = 0;\n	int aInput[10] = {0};\n	int i = 0;\n	while(scanf(\" %d\", &iInput) != EOF)\n	{\n		aInput[i++] = iInput;\n		if (i == 10)\n		{\n			break;\n		}\n	}\n	i--;\n	for(; i != 0; --i)\n	{\n		printf(\"%d \",aInput[i]);\n	}\n	printf(\"%d\",aInput[i]);\n	return 0;\n}'),(1027,'\n#include<stdio.h>\nint maxyueshu(int m,int n)  \n \n{  int i=1,t;  \nfor(;i<=m&&i<=n;i++)  \n{if(m%i==0&&n%i==0)  \n t=i;  \n}  \nreturn(t);  \n}  \nint minbeishu(int m,int n)  \n\n{int j;  \nif(m>=n) j=m;  \nelse j=n;  \nfor(;!(j%m==0&&j%n==0);j++);  \nreturn j;  \n}  \nint main()  \n{int a,b,max,min;  \n//printf(\"enter two number is: \");  \nscanf(\"%d%d\",&a,&b);  \nmax=maxyueshu(a,b);  \nmin=minbeishu(a,b);  \nprintf(\"%d %d\",max,min);  \nreturn 0;\n}'),(1028,'\n#include<stdio.h>\n#include\"math.h\"  \nfloat yishigen(m,n,k)  \nfloat m,n,k;  \n{float x1,x2;  \nx1=(-n+sqrt(k))/(2*m);  \nx2=(-n-sqrt(k))/(2*m);  \nprintf(\"x1=%.3f x2=%.3f\\n\",x1,x2);  \n}  \nfloat denggen(m,n)  \nfloat m,n;  \n{float x;  \nx=-n/(2*m);  \nprintf(\"x1=%.3f x2=%.3f\\n\",x,x);  \n}  \nfloat xugen(m,n,k)  \nfloat m,n,k;  \n{float x,y;  \nx=-n/(2*m);  \ny=sqrt(-k)/(2*m);  \nprintf(\"x1=%.3f+%.3fi x2=%.3f-%.3fi\\n\",x,y,x,y);  \n}  \nmain()  \n{float a,b,c,q;  \n//printf(\"input a b c is \");  \nscanf(\"%f%f%f\",&a,&b,&c);  \n//printf(\"\\n\");  \nq=b*b-4*a*c;  \nif(q>0) yishigen(a,b,q);  \nelse if(q==0) denggen(a,b);  \nelse xugen(a,b,q);  \n}'),(1029,'\npsushu(m)  \nint m;  \n{\n	int i=2,t;  \n	for(;i<=m;i++)  \n		if(m%i==0&&i<m) break;  \n	if(i==m+1) t=1;  \n		else t=0;  \n	return t;  \n}  \nmain()  \n{int a,s;  \n//printf(\"enter sushu is \\n\");  \nscanf(\"%d\",&a);  \ns=psushu(a);  \nif(s==1) printf(\"prime\");  \nelse printf(\"not prime\");  \n}'),(1030,'\nint zhuangzhi(b)  \nint b[3][3];  \n{int i,j,t;  \nfor(i=0;i<3;i++)  \nfor(j=0;j<=i;j++)  \n{t=b[i][j];b[i][j]=b[j][i];b[j][i]=t;}  \n}  \nint main()  \n{int a[3][3];int i,j;  \nfor(i=0;i<3;i++)  \nfor(j=0;j<3;j++)  \nscanf(\"%d\",&a[i][j]);  \n\nzhuangzhi(a);  \nfor(i=0;i<3;i++)  \n{for(j=0;j<3;j++)  \nprintf(\"%d \",a[i][j]);  \nprintf(\"\\n\");}  \nreturn 0;\n}'),(1031,'\nfanxu(str1)  \nchar str1[100];  \n{int i,t,j;  \nchar str2[100];strcpy(str2,str1);  \nt=strlen(str1);  \nfor(i=0,j=t-1;j>-1;i++,j--)  \nstr1[i]=str2[j];\nstr1[i--]=0;\n}  \n\nint main()  \n{char str0[100];  \nscanf(\"%s\",str0);  \nfanxu(str0);  \nprintf(\"%s\",str0);  \n return 0;\n}'),(1032,'\nlianjie(a,b)  \nchar a[100],b[100];  \n{strcat(a,b);  \n}  \nint main()  \n{char str1[100],str2[100];  \nscanf(\"%s%s\",str1,str2); \nlianjie(str1,str2);  \nputs(str1);  \n return 0;\n}'),(1033,'\nfuzhi(a,b)\nchar a[100],b[100];\n{int i,j=0;\nfor(i=0;a[i]!=\'\\0\';i++)\nif(a[i]==97||a[i]==101||a[i]==105||a[i]==111||a[i]==117||a[i]==65||\na[i]==69||a[i]==73||a[i]==85) {b[j]=a[i];j++;}\n\nb[j]=0;\n}\nint main()\n{char str1[100],str2[100];\nscanf(\"%s\",str1);\nfuzhi(str1,str2);\nprintf(\"%s\",str2);\n}'),(1034,'\nchar f(b)  \nchar b[4];  \n{int i=0;  \nfor(;i<4;i++)  \n{  \nprintf(\"%c \",b[i]);}  \nprintf(\"\\n\");  \n}  \nmain()  \n{int a,u,v,w,t;char c[4];  \nscanf(\"%4d\",&a);  \nu=a*0.001;v=0.01*(a-1000*u);w=(a-1000*u-100*v)*0.1;t=a-1000*u-100*v-10*w;  \nc[0]=u+48;  \nc[1]=v+48;  \nc[2]=w+48;  \nc[3]=t+48;  \nf(c);  \n}'),(1035,'\nchar tongji(str0,b)\nchar str0[100];\nint b[4];\n{int i;\nfor(i=0;str0[i]!=\'\\0\';i++)\n{if(str0[i]>=65&&str0[i]<=90||str0[i]>=97&&str0[i]<=122) b[0]++;\nelse if(str0[i]>=48&&str0[i]<=57) b[1]++;\nelse if(str0[i]==32) b[2]++;\nelse b[3]++;}\n}\nint main()\n{char str1[100];static int i,a[4];\ngets(str1);\ntongji(str1,a);\nfor(i=0;i<4;i++)\nprintf(\"%d \",a[i]);printf(\"\\n\");\nreturn 0;\n}'),(1036,'\n#define CHANGE(a,b,t) t=a;a=b;b=t;  \nmain()  \n{int c,d,s;  \nscanf(\"%d%d\",&c,&d);  \nCHANGE(c,d,s);  \nprintf(\"%d %d\",c,d);  \n}'),(1037,'\n#define Q(a,b) a%b  \nmain()  \n{int c,d,t;  \nscanf(\"%d%d\",&c,&d);  \nt=Q(c,d);  \nprintf(\"%d\\n\",t);  \n}'),(1038,'\n#include\"math.h\"  \n#define SSS(m,n,k) (m+n+k)/2  \n#define AQRT(m,n,k) sqrt(SSS(m,n,k)*(SSS(m,n,k)-m)*(SSS(m,n,k)-n)*(SSS(m,n,k)-k))  \nmain()  \n{float a,b,c,s,area;  \nscanf(\"%f%f%f\",&a,&b,&c);  \ns=SSS(a,b,c);  \narea=AQRT(a,b,c);  \nprintf(\"%.3f\\n\",area);  \n}'),(1039,'\n#define LEAPYEAR(y) !(y%4)&&((y%100)||!(y%400))  \nmain()  \n{int y;  \nscanf(\"%d\",&y);  \nif(LEAPYEAR(y)) printf(\"L\");  \nelse printf(\"N\");  \n}'),(1040,'\n#define PR1(x) printf(\"%6.2f\\n\",x)  \n#define PR2(x) printf(\"%6.2f %6.2f\\n\",x,x)  \n#define PR3(x) printf(\"%6.2f %6.2f %6.2f\\n\",x,x,x)  \nmain()  \n{float a;scanf(\"%f\",&a);  \nPR1(a);PR2(a);PR3(a);  \n}'),(1041,'\n#define MAX(a,b,c) (a>((b>c)? b:c))? a:((b>c)? b:c)  \nmain()  \n{float x,y,z,t;  \nscanf(\"%f%f%f\",&x,&y,&z);  \nt=MAX(x,y,z);  \nprintf(\"%.3f\\n\",t);  \nprintf(\"%.3f\",t);  \n}'),(1042,'\n#define CHANGE 1\nmain()\n{char str[80],c;int i=0;\ngets(str);\nwhile(str[i]!=\'\\0\')\n{\n#if CHANGE\nif(str[i]==90||str[i]==122) str[i]=str[i]-25;\nelse if(str[i]>=65&&str[i]<90||str[i]>=97&&str[i]<122) str[i]=str[i]+1;\n#endif\ni++;\n}\nputs(str);\n}'),(1043,'\nmain()  \n{ int a,b,c,*p1,*p2,*p3,t;  \nscanf(\"%d%d%d\",&a,&b,&c);  \np1=&a;p2=&b;p3=&c;  \nif(*p1>*p2)   \n{t=p1;p1=p2;p2=t;}  \nif(*p1>*p3)  \n{t=p1;p1=p3;p3=t;}  \nif(*p2>*p3)   \n{t=p2;p2=p3;p3=t;}  \nprintf(\"%d %d %d \",*p1,*p2,*p3);  \n}'),(1044,'\n#include<stdio.h>\n#include<string.h>\n\nvoid Swap(char **q1, char**q2);\n\nint main()\n{    \n    int i=0;\n    char *p1,*p2,*p3, str1[80],str2[80],str3[80];\n p1=str1; p2=str2; p3=str3;\n    gets(str1);\n	gets(str2);\n	gets(str3);\nif (strcmp(p1, p2)>0)\n        Swap(&p1, &p2);  \nif (strcmp(p1, p3)>0)\n        Swap(&p1, &p3);\nif (strcmp(p2, p3)>0)\n        Swap(&p2, &p3);\n printf(\"%s\\n%s\\n%s\\n\",p1,p2,p3);\n return(0);\n}\n\nvoid Swap(char **q1, char* *q2)\n{char *t;\n t= *q1;\n *q1 = *q2;\n *q2 = t;\n}'),(1045,'\n#include<stdio.h>\nint main()\n{\n	int array[11];\n	int n=10;\n	//scanf(\"%d\",&n);\n	int temp;\n	int i;\n	for(i=0;i<n;i++)\n		scanf(\"%d\",&array[i]);\n	temp=0;\n	for(i=0;i<n;i++)\n		if(array[temp] > array[i])\n			temp = i;\n		int t = array[temp];\n		array[temp] = array[0];\n		array[0] = t;\n	temp = 0;\n	for(i=0;i<n;i++)\n		if(array[temp] < array[i])\n			temp = i;\n		t = array[temp];\n		array[temp] = array[n-1];\n		array[n-1] = t;\n	for(i=0;i<n;i++)\n	{\n		\n		printf(\"%d \",array[i]);\n	}\n	printf(\"\\n\");\n	return 0;\n}'),(1046,'\n#include <stdio.h>\nvoid mv(int *p,int n,int m)\n{\n    int *h, t,i;\n    h=p+n-m-1; \n    for(;h>=p;h--)\n    {\n         for(i=0;i<m;i++) \n         {\n                     t=*(h+i);\n                     *(h+i)=*(h+i+1);\n                     *(h+i+1)=t;\n          }\n   }\n}\n\n\nint main()\n{\n    int a[80];\n     int m,i,n;\n	 scanf(\"%d\",&n);\n for(i=0;i<n;i++) \n	 scanf(\"%d\",&a[i]);\n   scanf(\"%d\",&m);\n  mv(a,n,m); \n for(i=0;i<n;i++) \n	 printf(\"%d \",a[i]);\n \n  return 0;\n}'),(1047,'\n#include <stdio.h> \n\nconst int M = 3; \n\nint main() \n{ \n    int n, s = 0; \n    scanf(\"%d\", &n); \n    for (int i = 2; i <= n; ++i) \n        s = (s+M)%i; \n    printf(\"%d\\n\", s+1); \n    return 0; \n}'),(1048,'\n#include <stdio.h>\n#include <string.h>\n#define N 80\nvoid fun(char a[N],int m)\n{char *p1,b[N];int i,l;\np1=a;i=1;l=0;\nwhile(i<m){i++;p1++;}\nwhile(*p1!=\'\\0\')\n{b[l]=*p1;\n p1++;\n l++;\n}\nb[l]=\'\\0\';\nputs(b);\n}\nint main()\n{char a[N];int m,n;\nscanf(\"%d\\n\",&n);\ngets(a);\nscanf(\"%d\",&m);\nfun(a,m);\nreturn 0;\n}'),(1049,'\nstruct  \n{int year;  \n int month;  \n int day;  \n}date;  \nmain()  \n{int days;\n//printf(\"Input  year,month,day:\");\nscanf(\"%d%d%d\",&date.year,&date.month,&date.day);\nswitch(date.month)  \n {case 1: days=date.day;    break;  \n case 2: days=date.day+31; break;  \n case 3: days=date.day+59; break;  \n case 4: days=date.day+90; break;  \n case 5: days=date.day+120;break;  \ncase 6: days=date.day+31; break;  \n   case 7: days=date.day+181; break;  \n   case 8: days=date.day+212; break;  \ncase 9: days=date.day+243; break;  \ncase 10: days=date.day+273; break;  \ncase 11: days=date.day+304; break;  \ncase 12: days=date.day+334; break;  \n}  \nif((date.year%4==0&&date.year%100!=0||date.year%400==0)&&date.month>=3)days+=1;  \nprintf(\"%d\",days);  \n}'),(1050,'\nint N=100;\nstruct student  \n{char num[6];  \n   char name[8];  \n   int score[3];  \n}stu[100]; \nvoid print(struct student st)  \n{	 int i,j;  \n     printf(\"%s,%s\",st.num,st.name);  \n     for(j=0;j<3;j++)  \n     printf(\",%d\",st.score[j]);  \n     printf(\"\\n\");  \n} \nmain()  \n{int i,j ;  \n   scanf (\"%d\",&N);\n   for(i=0;i<N;i++)  \n{\n	//printf(\"Input score of student %d:\\n\",i+1);  \n     //printf(\"no.:\");  \n     scanf(\"%s\",stu[i].num);  \n     ///printf(\"name:\");  \n     scanf(\"%s\",stu[i].name);  \n     for(j=0;j<3;j++)  \n     {//printf(\"score%d:\",j+1);  \n      scanf(\"%d\",&stu[i].score[j]);  \n}  \n \n print(stu[i]);  \n}  \n\n\n}'),(1051,'\n#include<stdio.h>\n#define N 100 \nstruct student\n{\nchar num[6];\nchar name[8];\nint score[4];\nint avr;\n}stu[N];\nint r;\n\nint main()\n{\n  int sum3=0,sum1=0,sum2=0,maxi;\n  int sum;\n  int max;\n  scanf(\"%d\",&r);\n  int i,j;\n  for(i=0;i<r;i++)\n  {\n   scanf(\"%s%s\",stu[i].num,stu[i].name);\n   for(j=0;j<3;j++)\n   {\n    scanf(\"%d\",&stu[i].score[j]);\n   }\n\n}\n\nmax=0;\nmaxi=0;\n for(i=0;i<r;i++)\n {\n  sum=0;\n  sum1+=stu[i].score[0];\n  sum2+=stu[i].score[1];\n  sum3+=stu[i].score[2];\n  for(j=0;j<3;j++)\n    sum+=stu[i].score[j];\n  stu[i].avr=sum/3;\n  \n  if(sum>max)\n  {\n  max=sum;\n  maxi=i;\n  }\n\n }\nprintf(\"%d %d %d\",sum1/r,sum2/r,sum3/r);\nputchar(\'\\n\');\n\nprintf(\"%s %s %d %d %d\",stu[maxi].num,stu[maxi].name,stu[maxi].score[0],stu[maxi].score[1],stu[maxi].score[2]);\n\n\nreturn 0;\n}'),(1052,'\nimport java.util.Scanner;\nimport java.io.*;\npublic class Main {\n	public static Scanner cin=new Scanner(System.in);\n	public static void main(String[] args){\n		int n=cin.nextInt();\n		int m=cin.nextInt();\n		int num[][]=new int[m+n][2];\n		int tmp[]={0,0};\n		for(int i=0;i<m+n;i++)\n		{\n			for(int j=0;j<2;j++)\n			{\n				num[i][j]=cin.nextInt();\n			}\n		}\n		for(int i=0;i<m+n-1;i++)\n		{\n			for(int j=i+1;j<m+n;j++)\n			{\n				if(num[j][0]<num[i][0])\n				{\n					tmp=num[i];\n					num[i]=num[j];\n					num[j]=tmp;\n				}\n			}\n		}\n		for(int i=0;i<m+n;i++)\n		{\n			System.out.println(num[i][0]+\" \"+num[i][1]);\n		}\n		\n		\n	}\n	\n}'),(1053,'#include<iostream>\n#include<stack>\n#include<string>\nusing namespace std;\n\nint main()\n{\n	int n=0,m;\n	string s;\n	stack<string> S0,S1,S2;\n	while(cin>>m>>s)\n	{\n		n++;\n		if(!m)\n			S0.push(s);\n		else if(m==1)\n			S1.push(s);\n		else\n			S2.push(s);\n	}\n	for(m=0;m<10;m++)\n	{\n		if(S0.empty())\n			cout<<0<<\' \';\n		else\n		{\n			cout<<S0.top()<<\' \';\n			S0.pop();\n		}\n		if(S1.empty())\n			cout<<0<<\' \';\n		else\n		{\n			cout<<S1.top()<<\' \';\n			S1.pop();\n		}\n		if(S2.empty())\n			cout<<0<<endl;\n		else\n		{\n			cout<<S2.top()<<endl;\n			S2.pop();\n		}\n	}\n	while(!S0.empty())\n	{\n		cout<<S0.top()<<\' \';\n		S0.pop();\n	}\n	while(!S1.empty())\n	{\n		cout<<S1.top()<<\' \';\n		S1.pop();\n	}\n	while(!S2.empty())\n	{\n		cout<<S2.top()<<endl;\n		S2.pop();\n	}\n	return 0;\n}'),(1054,'#include<stdio.h>\n#include<string.h>\n\nchar r[1000];\n\nvoid bc(char n[],int s,int e)\n{\n	int i,flag,k,j,a[1000],b[1000];\n	for(i=0;i<strlen(n);i++)\n		a[i]=n[i]-48;\n	k=0;\n	while(1)\n	{\n		for(i=0;i<strlen(n);i++)\n		{\n			if(a[i]!=0&&i<strlen(n)-1)\n			{\n				a[i+1]+=(a[i]%e)*s;\n				a[i]/=e;\n			}\n			if(i==strlen(n)-1)\n			{\n				b[k++]=a[i]%e;\n				a[i]/=e;\n			}\n		}\n		flag=0;\n		for(i=0;i<strlen(n);i++)\n			if(a[i]!=0)\n				flag=1;\n		if(!flag)\n			break;\n	}\n	for(j=0,i=k-1;i>=0;i--)\n		r[j++]=b[i]+48;\n	r[j]=\'\\0\';\n}\n\nint main()\n{\n	char n[1000];\n	while(scanf(\"%s\",n)!=EOF)\n	{\n		bc(n,10,2);\n		puts(r);\n	}\n	return 0;\n}'),(1055,'#include<stdio.h>\n\nint main()\n{\n	int n,f,k=1;\n	scanf(\"%d\",&f);\n	while(scanf(\"%d\",&n)!=EOF)\n	{\n		if(n<f)\n		{\n			k=0;\n			break;\n		}\n		f=n;\n	}\n	puts(k?\"YES\":\"NO\");\n	return 0;\n} '),(1056,'#include<iostream>\n#include<string>\n#include<cstdlib>\nusing namespace std;\n\nconst int INT_ONLY=1;\nconst int SMALL_ONLY=2;\n\nstring roundString(string s)\n{\n	double d=atof(s.c_str());\n	int dec,sign;\n	s=fcvt(d,2,&dec,&sign);\n	return s;\n}\n\nstring formatChinese(int flag,string s)\n{\n	int sLength=s.length();\n	string bigLetter[]={\"零\",\"壹\",\"贰\",\"叁\",\"肆\",\"伍\",\"陆\",\"柒\",\"捌\",\"玖\"};\n	string unit[]={\"元\",\"拾\",\"佰\",\"仟\",\"万\",\"拾\",\"佰\",\"仟\",\"亿\",\"拾\",\"佰\",\"仟\",\"万\"};\n	string small[]={\"分\",\"角\"};\n	string newS=\"\";\n	for(int i=0;i<sLength;i++)\n	{\n		if(flag==INT_ONLY)\n			newS=newS+bigLetter[s.at(i)-48]+unit[sLength-i-1];\n		else if(flag==SMALL_ONLY)\n			newS=newS+bigLetter[s.at(i)-48]+small[sLength-i-1];\n	}\n	return newS;\n}\n\nstring splitNum(string s)\n{\n	if(\"\"==s)\n		return \"\";\n	string intOnly=s.substr(0,s.size()-2);\n	string intPart=formatChinese(1,intOnly);\n	string smallOnly=s.substr(s.size()-2,s.size());\n	string smallPart=formatChinese(2,smallOnly);\n	string newS=intPart+smallPart;\n	return newS;\n}\n\nstring replaceAll(string src,string regex,string replacement)\n{\n	int length=regex.length();\n	while(src.find(regex)<src.length())\n		src.replace(src.find(regex),length,replacement);\n	return src;\n}\n\nstring cleanZero(string s)\n{\n	if(\"\"==s)\n		return \"\";\n	string regex1[]={\"零仟\",\"零佰\",\"零拾\"};\n	string regex2[]={\"零亿\",\"零万\",\"零元\"};\n	string regex3[]={\"亿\",\"万\",\"元\"};\n	string regex4[]={\"零角\",\"零分\"};\n	for(int i=0;i<3;i++)\n		s=replaceAll(s,regex1[i],\"零\");\n	for(int i=0;i<3;i++)\n	{\n		s=replaceAll(s,\"零零零\",\"零\");\n		s=replaceAll(s,\"零零\",\"零\");\n		s=replaceAll(s,regex2[i],regex3[i]);\n	}\n	for(int i=0;i<2;i++)\n		s=replaceAll(s,regex4[i],\"\");\n	s=replaceAll(s,\"亿万\",\"亿\");\n	return s;\n}\n\nint main()\n{\n	string s;\n	int i,j,l,flag;\n	while(cin>>s)\n	{\n		if(s==\"0\"||s==\"0.0\"||s==\"0.00\")\n		{\n			cout<<\"零元整\"<<endl;\n			continue;\n		}\n		if(s==\"10\"||s==\"10.0\"||s==\"10.00\")\n		{\n			cout<<\"拾元整\"<<endl;\n			continue;\n		}\n		l=s.length();\n		for(i=0;i<l;i++)\n			if(s[i]==\'.\')\n			{\n				for(flag=1,j=i+1;s[j]!=\'\\0\';j++)\n					if(s[j]!=\'0\')\n					{\n						flag=0;\n						break;\n					}\n				if(!flag)\n					break;\n			}\n		s=roundString(s);\n		s=splitNum(s);\n		s=cleanZero(s);\n		if(i<l)\n			cout<<s<<endl;\n		else\n			cout<<s<<\"整\"<<endl;\n	}\n	return 0;\n}'),(1057,'#include<stdio.h>\n\nint main()\n{\n	int a,b,c,d;\n	scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n	printf(\"%d %d\\n\",a+c,b+d);\n	return 0;\n} '),(1058,'#include<stdio.h>\n\nint main()\n{\n	int a,b,c,d;\n	scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n	printf(\"%d %d\\n\",a*c-b*d,a*d+b*c);\n	return 0;\n}'),(1059,'#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nstruct P\n{\n	int c,in;\n}a[100],b[100];\n\nbool cmp(P a,P b)\n{\n	return a.in>b.in;\n}\n\nint main()\n{\n	int m,n,i,j;\n	scanf(\"%d%d\",&m,&n);\n	for(i=0;i<m;i++)\n		scanf(\"%d%d\",&a[i].c,&a[i].in);\n	for(i=0;i<n;i++)\n		scanf(\"%d%d\",&b[i].c,&b[i].in);\n	sort(a,a+m,cmp);\n	sort(b,b+n,cmp);\n	i=j=0;\n	while(i<m||j<n)\n	{\n		if(a[i].in==b[j].in)\n		{\n			if(a[i].c+b[j].c)\n				printf(\"%d %d\\n\",a[i].c+b[j].c,a[i].in);\n			i++;\n			j++;\n		}\n		else if(a[i].in<b[j].in)\n		{\n			if(b[j].c)\n				printf(\"%d %d\\n\",b[j].c,b[j].in);\n			j++;\n		}\n		else\n		{\n			if(a[i].c)\n				printf(\"%d %d\\n\",a[i].c,a[i].in);\n			i++;\n		}\n	}\n	return 0;\n} '),(1060,'public class Main{\r\n	public static void main(String args[]){\r\n		System.out.println(\"**************************\\n         Very    Good!\\n**************************\");\r\n	}\r\n}'),(1061,'public class Main{\r\n	public static void main(String args[]){\r\n		System.out.println(\"**************************\\n         Very    Good!\\n**************************\");\r\n	}\r\n}'),(1062,'#include <stdio.h>\n#include <math.h>\n#include <queue>\n#include <memory.h>\nusing namespace std;\nstruct point\n{\n	int x,y,z;\n};\nstruct type\n{\n	int j;\n	double len;\n	friend bool operator <(type a,type b)\n	{\n		return a.len>b.len;\n	}\n};\ntype t,tt;\ninline int sqr(int num)\n{\n	return num*num;\n}\npoint p[31];\ndouble dis[31][31];\nbool visit[31];\nint main()\n{\n	int repeat,n,i,j,cur;\n	double sum;\n\n	scanf(\"%d\",&repeat);\n	while(repeat--)\n	{\n		scanf(\"%d\",&n);\n		for(i=0;i<n;i++)\n		{\n			scanf(\"%d%d%d\",&p[i].x,&p[i].y,&p[i].z);\n			for(j=0;j<n;j++)\n				dis[i][j]=dis[j][i]=sqrt( sqr(p[i].x-p[j].x)+sqr(p[i].y-p[j].y)+sqr(p[i].z-p[j].z));\n		}\n		sum=0;\n		cur=0;\n		memset(visit,false,sizeof(visit));\n		priority_queue<type> q;\n		for(i=0;i<n-1;i++)\n		{\n			visit[cur]=true;\n			for(j=0;j<n;j++)\n				if( !visit[j])\n				{\n					t.j=j;\n					t.len=dis[cur][j];\n					q.push(t);\n				}\n			while( !q.empty())\n			{\n				t=q.top();\n				q.pop();\n				if( !visit[t.j] ) break;\n			}\n			sum+=t.len;\n			cur=t.j;\n		}\n		printf(\"%.2f\\n\",sum);\n	}\n	return 0;\n}'),(1063,'#include<stdio.h>\n#include<string.h>\nint main()\n\n{\n\n       int n,k;\n\n       scanf(\"%d\",&n);\n\n       for(k=0;k<n;k++)\n\n       {\n\n              char t[2000];\n              int a,b,i,j,l;\n              int x,y;\n              char map[32][33]={0};\n              scanf(\"%d %d\", &a,&b);\n              scanf(\"%s\", &t);\n              l=strlen(t)-1;\n              x=31-b;\n              y=a;\n              for(i=0;i<l;i++)\n              {\n                     if(t[i]==\'E\')\n                     {\n                            map[x+1][y+1]=\'X\';\n                            y++;\n                     }\n                     else if(t[i]==\'N\')\n                     {\n                            map[x][y+1]=\'X\';\n                            x--;\n                     }\n                     else if(t[i]==\'W\')\n                     {\n                            map[x][y]=\'X\';\n                            y--;\n                     }\n                     else if(t[i]==\'S\')\n                     {\n                            map[x+1][y]=\'X\';\n                            x++;\n                     }\n              }\n              printf(\"Bitmap #%d\\n\",k+1);\n              for(i=0;i<32;i++)\n              {\n                     for(j=1;j<33;j++)\n                     {\n                            if(map[i][j]!=\'X\')\n                                   map[i][j]=\'.\';\n                            printf(\"%c\",map[i][j]);\n                     }\n                     printf(\"\\n\");\n              }\n              printf(\"\\n\");\n       }\n       return 0;\n}\n'),(1064,'#include<stdio.h>\n#include<string.h>\nint main()\n{\n    int n;\n    int total;\n    int a=0,b=0;\n    scanf(\"%d\",&n);\n    getchar();\n    while(n>0)\n    {\n        scanf(\"%d\",&total);\n        if(total%2!=0)\n        {\n            a=0;b=0;\n        }\n        else if(total%4!=0)\n        {\n            a=(total-2)/4+1;b=total/2;\n        }\n        else\n        {\n            a=total/4;b=total/2;\n        }\n        printf(\"%d %d\\n\",a,b);\n        n--;\n    }\n    return 0;\n}\n'),(1065,'#include <stdio.h>\n#include <math.h>\nchar map[8][9];\nint ok(int i,int j,char ch)\n{\n	return i>=0&&j>=0&&i<8&&j<8&&ch==map[i][j];\n}\nint ok2(int i,int j)\n{\n		return i>=0&&j>=0&&i<8&&j<8;\n}\nint can(int si,int sj,int ei,int ej)\n{\n	return ok2(si,sj)&&ok2(ei,ej)&&( (si==ei&&fabs(sj-ej)==1) || (sj==ej&&fabs(si-ei)==1));\n}\nint amount(int si,int sj)\n{\n	int i,count=1;\n\n	for(i=1;;i++)\n		if( ok(si-i,sj,map[si][sj]) ) count++;\n		else break;\n	for(i=1;;i++)\n		if( ok(si+i,sj,map[si][sj]) ) count++;\n		else break;\n	if(count>2) return 1;\n	for(i=count=1;;i++)\n		if( ok(si,sj-i,map[si][sj]) ) count++;\n		else break;\n	for(i=1;;i++)\n		if( ok(si,sj+i,map[si][sj]) ) count++;\n		else break;\n	if(count>2) return 1;\n	else return 0;\n}\nint main()\n{\n	int i,si,sj,ei,ej;\n	char t;\n\n	while(scanf(\"%s\",map[0])!=EOF)\n	{\n		for(i=1;i<8;i++)\n			scanf(\"%s\",map[i]);\n		scanf(\"%d%d%d%d\",&si,&sj,&ei,&ej);\n		si--;sj--;ei--;ej--;\n		t=map[si][sj];\n		map[si][sj]=map[ei][ej];\n		map[ei][ej]=t;\n		if( can(si,sj,ei,ej) && (amount(si,sj) || amount(ei,ej))) puts(\"Ok!\");\n		else puts(\"Illegal move!\");\n	}\n	return 0;\n}'),(1066,'#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main()\n{\n	int i;\n	char s[101],op[3],s2[101];\n	\n	while(scanf(\"%s\",s),s[0]!=\'.\')\n	{\n		scanf(\"%s%s\",op,s2);\n		vector<string> m;\n		vector<string>::iterator it;\n		string t;\n		for(i=0;s[i];i++)\n		{\n			if(s[i]!=\'[\')\n			{\n				if(s[i]==\',\'||s[i]==\']\')\n				{\n					if( t!=\"\" ) m.push_back(t);\n					t=\"\";\n				}\n				else t+=s[i];\n			}\n			\n		}\n		for(i=0;s2[i];i++)\n		{\n			if(s2[i]!=\'[\')\n			{\n				if(s2[i]==\',\'||s2[i]==\']\')\n				{\n					if(op[0]==\'+\')\n					{\n						if( t!=\"\" ) m.push_back(t);\n					}\n					else\n					{\n						for(it=m.begin();it!=m.end();it++)\n						{\n							if( (*it)==t )\n							{\n								m.erase(it);\n								break;\n							}\n						}\n					}\n					t=\"\";\n				}\n				else t+=s2[i];\n			}\n		}\n		putchar(\'[\');\n		for(i=0;i<m.size();i++)\n		{\n			printf(\"%s%s\",m[i].c_str(),i==m.size()-1?\"\":\",\");\n		}\n		putchar(\']\');\n		putchar(10);\n	}\n	return 0;\n}'),(1067,'#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#include<math.h>\n\nint mod10(int x)\n{\n	int a=1,i;\n	for(i=0;i<x;i++)\n		a=(a*10)%101;\n	return a;\n}\n\nint bit(char c)\n{\n	if(c>\'C\')\n	{\n		if(c>\'I\')\n			return 3;\n		else\n			return 2;\n	}\n	else\n		return 1;\n}\n\nint main()\n{\n	int i,j,k,l,len,n,t,sum;\n	int shu[1000];\n	char s[100];\n	scanf(\"%d\",&t);\n	while(t--)\n	{\n		n=0;sum=0;\n		scanf(\"%s\",s);\n		len=strlen(s);\n		for(i=0;i<len;i++)\n		{\n			if(s[i]>=\'a\')\n				s[i]-=32;\n		}\n		for(i=0,j=0;i<len;i++)\n		{\n			n=(s[i]-\'A\'+1)*(s[i]-\'A\'+1);\n			k=bit(s[i]);\n			j+=k;\n			for(l=1;l<=k;l++)\n			{\n				shu[j-l]=n%10;\n				n/=10;\n			}\n		}\n		for(i=j-1,k=0;i>=0;i--,k++)\n			sum+=(shu[i]*mod10(k))%101;\n		printf(\"%d\\n\",sum%101);\n	}\n	return 0;\n}'),(1068,'\n    #include<stdio.h>\n     int n,num[1000001],t[10];\n     int main()\n     {\n         int a;\n         scanf(\"%d\",&a);\n          int i;\n          while(a>0)\n          {\n              scanf(\"%d\",&n);\n               num[1]=1;\n               num[2]=2;\n               for (i=3;i<=n;i++)\n               {\n                    if(i%2==1)  num[i]=num[i-1];\n                    if(i%2==0)  num[i]=(num[i-1]+num[i/2])%1000000000;\n                }\n               printf (\"%d\",num[n]);\n                printf(\"\\n\");\n                a--;\n          }\n          return 0;\n    }\n'),(1069,'#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing namespace std;\nchar map[71][71];\nstring dp[71][71],mx;\nint cmp(string s1,string s2)\n{\n	int i;\n\n	if( s1.length()>s2.length()) return 1;\n	else if( s2.length()>s1.length()) return -1;\n	else \n	{\n		for(i=0;s1[i];i++)\n		{\n			if( s1[i]>s2[i] ) return 1;\n			else if(s1[i]<s2[i]) return -1;\n		}\n		return 0;\n	}\n}\nint main()\n{\n	int w,h,i,j;\n\n	while(scanf(\"%d%d\",&w,&h),w+h)\n	{\n		for(i=0;i<h;i++)\n		{\n			scanf(\"%s\",map[i]);\n			for(j=0;j<w;j++)\n				dp[i][j]=\"\";\n		}\n		mx=\"\";\n		for(i=0;i<h;i++)\n		{\n			for(j=0;j<w;j++)\n			{\n				if(map[i][j]>=\'0\'&&map[i][j]<=\'9\')\n				{\n					if(map[i][j]!=\'0\') dp[i][j]+=map[i][j];\n					if( i>0 && cmp(dp[i-1][j]+map[i][j],dp[i][j])>0) dp[i][j]=dp[i-1][j]+map[i][j];\n					if(j>0 && cmp(dp[i][j-1]+map[i][j],dp[i][j])>0) dp[i][j]=dp[i][j-1]+map[i][j];\n					if(dp[i][j]==\"0\") dp[i][j]=\"\";\n				}\n				if( cmp(dp[i][j],mx)>0 ) mx=dp[i][j];\n			}\n		}\n		for(i=0;i<mx.length();i++)\n			putchar(mx[i]);\n		putchar(10);\n	}\n	return 0;\n}'),(1070,'#include <stdio.h>\n#include <stdlib.h>\n\nint cmp(const void *a,const void *b)\n{\n	return *(int *)a - *(int *)b;\n}\n\nint main()\n{\n	int n,m,shu,sum = 0,zheng[10],fu[10],i = 0,j = 0,zflag = 0,fflag = 0,k,zero = 0;\n	scanf(\"%d\",&n);\n	while(n--)\n	{\n	    scanf(\"%d\",&m);\n	    while(m--)\n		{\n			scanf(\"%d\",&shu);\n			if(shu > 0)\n			{\n				zheng[i++] = shu;\n				zflag = 1;\n			}\n			if(shu < 0)\n			{\n				fu[j++] = shu;\n				fflag = 1;\n			}\n			if(shu == 0)\n			zero = 1;\n		}\n		if(zflag)\n		qsort(zheng,i,sizeof(int),cmp);\n		if(fflag)\n		qsort(fu,j,sizeof(int),cmp);\n		if(zflag)\n		{\n			for(k = 0;k < i;k++)\n			sum += zheng[k];\n			if(fflag)\n			{\n                if((sum - zheng[0]) > (sum + fu[j-1]))\n				printf(\"%d\\n\",sum - zheng[0]);\n				else\n				printf(\"%d\\n\",sum + fu[j-1]);\n			}\n			else\n			printf(\"%d\\n\",sum - zheng[0]);\n		}\n		else\n		{\n			if(zero)\n			printf(\"%d\\n\",fu[j-1] + 0);\n			else\n			printf(\"%d\\n\",fu[j-1] + fu[j-2]);\n		}\n		i = j = zflag = fflag = 0;\n		sum = 0;\n		zero = 0;\n	}\n	return 0;\n}'),(1071,'#include <stdio.h>\n#define MAX 22\ntypedef struct node\n{\n     double matrix[MAX][MAX];\n}Matrix;\nMatrix unit,init,result;\nint t,n,k;\ndouble data[MAX];\nvoid Init()\n{\n    int i,j;\n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++)   //输入初始值\n        scanf(\"%lf\",&data[i]);\n    for(i=1;i<=n;i++)\n        for(j=1;j<=n;j++)\n        {\n            init.matrix[i][j]=0;\n            unit.matrix[i][j]=(i==j);  //单位矩阵\n        }\n    int num;\n    double p;\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&num);\n        if(num==0) //否则除0错误\n        {\n            init.matrix[i][i]=1.0;   //因为没有分东西给别人,故东西全部给自己,第一错误\n            continue;\n        }\n        p=1.0/num;\n        while(num--)\n        {\n            scanf(\"%d\",&j);\n            init.matrix[i][j]=p;\n        }\n    }\n    scanf(\"%d\",&k);   //经过k秒\n}\nMatrix Mul(Matrix a,Matrix b)  //矩阵乘法\n{\n    Matrix c;\n    int i,j,p;\n    for(i=1;i<=n;i++)\n        for(j=1;j<=n;j++)\n        {\n            c.matrix[i][j]=0.0;\n            for(p=1;p<=n;p++)\n            {\n                c.matrix[i][j]+=a.matrix[i][p]*b.matrix[p][j];\n            }\n        }\n    return c;\n}\nMatrix Cal(int exp)  //矩阵幂\n{\n    Matrix p,q,res;\n    p=unit;  //单位矩阵\n    q=init;  //初始矩阵\n    while(exp!=1)\n    {\n        if(exp&1)//幂是奇数\n        {\n            exp--;\n            p=Mul(p,q);  //这里忘记写乘,导致很多次错误,要细心\n        }\n        else\n        {\n            exp>>=1;\n            q=Mul(q,q);\n        }\n    }\n    res=Mul(p,q);\n    return res;\n}\nint main()\n{\n    int i,j;\n    double r;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        Init();\n        result=Cal(k);\n        for(i=1;i<=n;i++)\n        {\n            r=0;\n            for(j=1;j<=n;j++)\n                r+=result.matrix[j][i]*data[j];\n            if((i-1))  //格式控制\n                printf(\" \");\n            printf(\"%0.2lf\",r);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n'),(1072,'#include <stdio.h>\r\nvoid main()\r\n{\r\n	printf(\"Hello world\\n\");\r\n}'),(1073,'#include<stdio.h>\r\n\r\nint max(int a,int b,int c){\r\n	return a >= b ? (a >= c ? a : c)  : (b >= c ? b : c) ;\r\n}\r\nint main(){\r\n\r\n	int a,b,c;\r\n	scanf(\"%d%d%d\",&a,&b,&c);\r\n	printf(\"%d\",max(a,b,c));\r\n	\r\n	return 0;\r\n}'),(1074,'#include<stdio.h>\r\n\r\nint max(int a,int b,int c){\r\n	return a >= b ? (a >= c ? a : c)  : (b >= c ? b : c) ;\r\n}\r\nint main(){\r\n\r\n	int a,b,c;\r\n	scanf(\"%d%d%d\",&a,&b,&c);\r\n	printf(\"%d\",max(a,b,c));\r\n	\r\n	return 0;\r\n}'),(1075,'#include<stdio.h>\r\n\r\nint max(int a,int b,int c){\r\n	return a >= b ? (a >= c ? a : c)  : (b >= c ? b : c) ;\r\n}\r\nint main(){\r\n\r\n	int a,b,c;\r\n	scanf(\"%d%d%d\",&a,&b,&c);\r\n	printf(\"%d\",max(a,b,c));\r\n	\r\n	return 0;\r\n}'),(1076,'#include<stdio.h>\r\npublic void f(int n){\r\nf(n+1);\r\nprintf(\"%d\",&n);\r\n}\r\n\r\nint main(){\r\nf(1);\r\n}');
/*!40000 ALTER TABLE `source_code` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `source_code_user`
--

DROP TABLE IF EXISTS `source_code_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `source_code_user` (
  `solution_id` int(11) NOT NULL,
  `source` text NOT NULL,
  PRIMARY KEY (`solution_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `source_code_user`
--

LOCK TABLES `source_code_user` WRITE;
/*!40000 ALTER TABLE `source_code_user` DISABLE KEYS */;
INSERT INTO `source_code_user` VALUES (1001,'\n#include<stdio.h>\nmain(){\nprintf(\"**************************\\n\");\nprintf(\"         Very    Good!\\n\");\nprintf(\"**************************\");\n\n}'),(1002,'\n#include<stdio.h>\nint max(int a,int b){\n return a>b?a:b;\n}\n\nint main(){\n int a,b,c;\n scanf(\"%d%d%d\",&a,&b,&c);\n printf(\"%d\",max(a,max(b,c)));\n return 0;\n}'),(1003,'\n#include <stdio.h>  \nmain()   \n{\nchar c1=\'C\',c2=\'h\',c3=\'i\',c4=\'n\',c5=\'a\';  \n  c1+=4;  \n  c2+=4;  \n  c3+=4;  \n  c4+=4;  \n  c5+=4;  \n  printf(\"%c%c%c%c%c\\n\",c1,c2,c3,c4,c5);  \n}'),(1004,'\n#include <stdio.h>\nmain()  \n{float r,h,C1,Sa,Sb,Va,Vb;  \nscanf(\"%f %f\",&r,&h);  \nC1=2*3.14*r;  \nSa=3.14*r*r;  \nSb=4*Sa;  \nVa=4*3.14*r*r*r/3;  \nVb=Sa*h;  \nprintf(\"C1=%.2f\\n\",C1);  \nprintf(\"Sa=%.2f\\nSb=%.2f\\nVa=%.2f\\nVb=%.2f\\n\",Sa,Sb,Va,Vb);  \n}'),(1005,'\n#include<stdio.h>\nmain()  \n{float F,c;  \nscanf(\"%f\",&F);  \nc=5*(F-32)/9;  \nprintf(\"c=%.2f\",c);  \n}'),(1006,'\n#include<stdio.h>\nint max(int a,int b){\n return a>b?a:b;\n}\n\nint main(){\n int a,b,c;\n scanf(\"%d%d%d\",&a,&b,&c);\n printf(\"%d\",max(a,max(b,c)));\n return 0;\n}'),(1007,'\n#include<stdio.h>\nint f(int x){\n  if(x<1) return x;\n  if(x>=1&&x<10) return x*2-1;\n  return x*3-11;\n}\nint main(){\n  int a;\n  scanf(\"%d\",&a);\n  printf(\"%d\",f(a));\n  return 0;\n}'),(1008,'\n#include<stdio.h>\nchar f(int x){\n  if(x<60) return \'E\';\n  if(x>=60&&x<70) return \'D\';\n  if(x>=70&&x<80) return \'C\';\n  if(x>=80&&x<90) return \'B\';\n  return \'A\';\n}\nint main(){\n  int a;\n  scanf(\"%d\",&a);\n  printf(\"%c\",f(a));\n  return 0;\n}'),(1009,'\n#include <stdio.h>\n#include <string.h>\nint main(){\n  char a[10];\n  int i,l;\n  scanf(\"%s\",a);\n  l=strlen(a);\n  printf(\"%d\\n\",l);\n  for(i=0;i<l-1;i++)\n  printf(\"%c \",a[i]);\n  printf(\"%c\\n\",a[i]);\n  for(i=l-1;i>=0;i--)\n  printf(\"%c\",a[i]);\n  \n  \n  return 0;\n}'),(1010,'\n#include <stdio.h>\nint main()\n{\n	int n;\n	double m=0;\n	scanf(\"%d\",&n);\n\n	if(n>1000000)\n	{\n		m += (n-1000000)*0.01;\n		n = 1000000;\n	}\n	if(n>600000)\n	{\n		m += (n-600000)*0.015;\n		n = 600000;\n	}\n	if(n>400000)\n	{\n		m += (n-400000)*0.03;\n		n = 400000;\n	}\n	if(n>200000)\n	{\n		m += (n-200000)*0.05;\n		n = 200000;\n	}\n	if(n>100000)\n	{\n		m += (n-100000)*0.075;\n		n = 100000;\n	}\n	m += n*0.1;\n	printf(\"%d\\n\",(int)m);\n	return 0;\n}'),(1011,'\n#include<stdio.h>\nint main()\n{\n	int p,r,n,m,temp;\n	scanf(\"%d %d\",&m,&n);\n	if(n<m)\n	{\n		temp=n;\n		n=m;\n		m=temp;\n	}\n	p=n*m;\n	while(m!=0)\n	{\n		r=n%m;\n		n=m;\n		m=r;\n	}\n	printf(\"%d %d\",n,p/n);\nreturn 0;\n}'),(1012,'\n#include\"stdio.h\"  \nmain()  \n{char c;int i=0,j=0,k=0,l=0;  \nwhile((c=getchar())!=\'\\n\')  \n{if(c>=65&&c<=90||c>=97&&c<=122) i++;  \nelse if(c>=48&&c<=57) j++;  \nelse if(c==32) k++;  \nelse l++;}  \nprintf(\"%d %d %d %d\",i,j,k,l);  \n}'),(1013,'\n#include\"stdio.h\"  \n#include\"math.h\"  \nmain()  \n{int n,sum=0,i=1,s=2;  \nscanf(\"%d\",&n);  \nwhile(i<=n)  \n{sum=sum+s;s=s+2*pow(10,i);  \ni++;}  \nprintf(\"%d\",sum);  \n}'),(1014,'\n#include\"stdio.h\"  \nmain()  \n{long n,i=1;long long sum=0,s=1;  \nscanf(\"%d\",&n);  \nwhile(i<=n) {s=s*i;sum=sum+s;i++;}  \nprintf(\"%lld\\n\",sum);  \n}'),(1015,'\n#include<stdio.h>\nmain()  \n{double i=1,j=1,k=1,s1=0,s2=0,s3=0,sum; \nint a,b,c;\nscanf(\"%d%d%d\",&a,&b,&c);\nfor(;i<=a;i++) s1=s1+i;  \nfor(;j<=b;j++) s2=s2+j*j;  \nfor(;k<=c;k++) s3=s3+1/k;  \nsum=s1+s2+s3;  \nprintf(\"%.2f\\n\",sum);  \n}'),(1016,'\n#include\"stdio.h\"  \n#include\"math.h\"  \nmain()  \n{int x=100,a,b,c;  \nwhile(x>=100&&x<1000) {a=0.01*x;b=10*(0.01*x-a);c=x-100*a-10*b;  \nif(x==(pow(a,3)+pow(b,3)+pow(c,3))) printf(\"%d\\n\",x);x++;}  \n}'),(1017,'#include<stdio.h>\nmain()  \n{int m,i,j,s;\nint N;\nscanf(\"%d\",&N);  \nfor(m=6;m<N;m++)  \n{s=1;  \nfor(i=2;i<m;i++)  \nif(m%i==0) s=s+i;  \nif(m-s==0)  \n{printf(\"%d its factors are 1 \",m);for(j=2;j<m;j++) if(m%j==0)  \nprintf(\"%d \",j);printf(\"\\n\");}  \n}  \n}'),(1018,'\n#include<stdio.h>\nmain()  \n{int i=1,n;double t,x=1,y=2,s,sum=0;  \nscanf(\"%ld\",&n);  \nwhile(i<=n) {s=y/x;sum=sum+s;t=y;y=y+x;x=t;i++;}  \nprintf(\"%.2f\\n\",sum);  \n}'),(1019,'\n#include\"stdio.h\"  \n#include\"math.h\"\nmain()  \n{int i,n;\nfloat h,s;  \nscanf(\"%f%d\",&s,&n);\nh=s/2;\nfor(i=2;i<=n;i++)  \n{s+=2*h;h/=2;}  \nprintf(\"%.2f %.2f\",h,s);  \n}'),(1020,'\n#include <stdio.h>\nmain()  \n{int i=1,sum=1;  \nint n;\nscanf(\"%d\",&n);\nfor(;i<n;sum=2*(sum+1),i++);  \nprintf(\"%d\\n\",sum);  \n}'),(1021,'\n#include\"stdio.h\"  \n#include\"math.h\"\n \nmain()  \n{float x0,x1,a;  \nscanf(\"%f\",&a);  \nx1=a/2;  \ndo  \n{x0=x1;x1=(x0+a/x0)/2;}  \nwhile(fabs(x0-x1)>=0.00001);  \nprintf(\"%.3f\\n\",x1);  \n}'),(1022,'\n#include <stdio.h>\nvoid prim(int n){\n	int i,j,a[n];  \n	for(i=2;i<n;i++)  \n	{ 	a[i]=i;  \n		for(j=2;j<=i;j++)  \n		{\n			if(j<i)  \n			 if(a[i]%j==0)  \n			 break;  \n			if(a[i]-j==0)  \n			 printf(\"%d\\n\",a[i]);  \n		}  \n	} 	\n}\nmain()  \n{  \n	int  a;\n	scanf(\"%d\",&a);\n	prim(a);\n}'),(1023,'\n#include<stdio.h>\nmain()  \n{ int i,j,a[10],t;  \nfor(i=0;i<10;i++)  \nscanf(\"%d\",&a[i]);  \nfor(j=1;j<10;j++)  \nfor(i=0;i<=9-j;i++)  \nif(a[i]>a[i+1])   \n{t=a[i+1];a[i+1]=a[i];a[i]=t;}  \nfor(i=0;i<10;i++)  \nprintf(\"%d\\n\",a[i]);  \n}'),(1024,'\n#include<stdio.h>\nmain()  \n{int i=0,j=0,a[3][3],s1,s2;  \nfor(i=0;i<3;i++)  \nfor(j=0;j<3;j++)  \nscanf(\"%d\",&a[i][j]);  \ns1=a[0][0]+a[1][1]+a[2][2];  \ns2=a[0][2]+a[1][1]+a[2][0];  \nprintf(\"%d %d\",s1,s2);  \n}'),(1025,'\n#include<stdio.h>\nmain()  \n{\n	int a[10]={1,5,8,17,23,24,60,62,101};\n	int i,j,t;  \n	for(i=0;i<10;i++)\n		scanf(\"%d\",&a[i]);  \n	for(i=9;i>0;i--)  \n	if(a[i]<a[i-1])  \n	{t=a[i-1];a[i-1]=a[i];a[i]=t;}  \n	for(i=0;i<10;i++)  \n	printf(\"%d\\n\",a[i]); \n}'),(1026,'\n#include <stdio.h>\n#include <string.h>\nint main(){	\n	int iInput = 0;\n	int aInput[10] = {0};\n	int i = 0;\n	while(scanf(\" %d\", &iInput) != EOF)\n	{\n		aInput[i++] = iInput;\n		if (i == 10)\n		{\n			break;\n		}\n	}\n	i--;\n	for(; i != 0; --i)\n	{\n		printf(\"%d \",aInput[i]);\n	}\n	printf(\"%d\",aInput[i]);\n	return 0;\n}'),(1027,'\n#include<stdio.h>\nint maxyueshu(int m,int n)  \n \n{  int i=1,t;  \nfor(;i<=m&&i<=n;i++)  \n{if(m%i==0&&n%i==0)  \n t=i;  \n}  \nreturn(t);  \n}  \nint minbeishu(int m,int n)  \n\n{int j;  \nif(m>=n) j=m;  \nelse j=n;  \nfor(;!(j%m==0&&j%n==0);j++);  \nreturn j;  \n}  \nint main()  \n{int a,b,max,min;  \n//printf(\"enter two number is: \");  \nscanf(\"%d%d\",&a,&b);  \nmax=maxyueshu(a,b);  \nmin=minbeishu(a,b);  \nprintf(\"%d %d\",max,min);  \nreturn 0;\n}'),(1028,'\n#include<stdio.h>\n#include\"math.h\"  \nfloat yishigen(m,n,k)  \nfloat m,n,k;  \n{float x1,x2;  \nx1=(-n+sqrt(k))/(2*m);  \nx2=(-n-sqrt(k))/(2*m);  \nprintf(\"x1=%.3f x2=%.3f\\n\",x1,x2);  \n}  \nfloat denggen(m,n)  \nfloat m,n;  \n{float x;  \nx=-n/(2*m);  \nprintf(\"x1=%.3f x2=%.3f\\n\",x,x);  \n}  \nfloat xugen(m,n,k)  \nfloat m,n,k;  \n{float x,y;  \nx=-n/(2*m);  \ny=sqrt(-k)/(2*m);  \nprintf(\"x1=%.3f+%.3fi x2=%.3f-%.3fi\\n\",x,y,x,y);  \n}  \nmain()  \n{float a,b,c,q;  \n//printf(\"input a b c is \");  \nscanf(\"%f%f%f\",&a,&b,&c);  \n//printf(\"\\n\");  \nq=b*b-4*a*c;  \nif(q>0) yishigen(a,b,q);  \nelse if(q==0) denggen(a,b);  \nelse xugen(a,b,q);  \n}'),(1029,'\npsushu(m)  \nint m;  \n{\n	int i=2,t;  \n	for(;i<=m;i++)  \n		if(m%i==0&&i<m) break;  \n	if(i==m+1) t=1;  \n		else t=0;  \n	return t;  \n}  \nmain()  \n{int a,s;  \n//printf(\"enter sushu is \\n\");  \nscanf(\"%d\",&a);  \ns=psushu(a);  \nif(s==1) printf(\"prime\");  \nelse printf(\"not prime\");  \n}'),(1030,'\nint zhuangzhi(b)  \nint b[3][3];  \n{int i,j,t;  \nfor(i=0;i<3;i++)  \nfor(j=0;j<=i;j++)  \n{t=b[i][j];b[i][j]=b[j][i];b[j][i]=t;}  \n}  \nint main()  \n{int a[3][3];int i,j;  \nfor(i=0;i<3;i++)  \nfor(j=0;j<3;j++)  \nscanf(\"%d\",&a[i][j]);  \n\nzhuangzhi(a);  \nfor(i=0;i<3;i++)  \n{for(j=0;j<3;j++)  \nprintf(\"%d \",a[i][j]);  \nprintf(\"\\n\");}  \nreturn 0;\n}'),(1031,'\nfanxu(str1)  \nchar str1[100];  \n{int i,t,j;  \nchar str2[100];strcpy(str2,str1);  \nt=strlen(str1);  \nfor(i=0,j=t-1;j>-1;i++,j--)  \nstr1[i]=str2[j];\nstr1[i--]=0;\n}  \n\nint main()  \n{char str0[100];  \nscanf(\"%s\",str0);  \nfanxu(str0);  \nprintf(\"%s\",str0);  \n return 0;\n}'),(1032,'\nlianjie(a,b)  \nchar a[100],b[100];  \n{strcat(a,b);  \n}  \nint main()  \n{char str1[100],str2[100];  \nscanf(\"%s%s\",str1,str2); \nlianjie(str1,str2);  \nputs(str1);  \n return 0;\n}'),(1033,'\nfuzhi(a,b)\nchar a[100],b[100];\n{int i,j=0;\nfor(i=0;a[i]!=\'\\0\';i++)\nif(a[i]==97||a[i]==101||a[i]==105||a[i]==111||a[i]==117||a[i]==65||\na[i]==69||a[i]==73||a[i]==85) {b[j]=a[i];j++;}\n\nb[j]=0;\n}\nint main()\n{char str1[100],str2[100];\nscanf(\"%s\",str1);\nfuzhi(str1,str2);\nprintf(\"%s\",str2);\n}'),(1034,'\nchar f(b)  \nchar b[4];  \n{int i=0;  \nfor(;i<4;i++)  \n{  \nprintf(\"%c \",b[i]);}  \nprintf(\"\\n\");  \n}  \nmain()  \n{int a,u,v,w,t;char c[4];  \nscanf(\"%4d\",&a);  \nu=a*0.001;v=0.01*(a-1000*u);w=(a-1000*u-100*v)*0.1;t=a-1000*u-100*v-10*w;  \nc[0]=u+48;  \nc[1]=v+48;  \nc[2]=w+48;  \nc[3]=t+48;  \nf(c);  \n}'),(1035,'\nchar tongji(str0,b)\nchar str0[100];\nint b[4];\n{int i;\nfor(i=0;str0[i]!=\'\\0\';i++)\n{if(str0[i]>=65&&str0[i]<=90||str0[i]>=97&&str0[i]<=122) b[0]++;\nelse if(str0[i]>=48&&str0[i]<=57) b[1]++;\nelse if(str0[i]==32) b[2]++;\nelse b[3]++;}\n}\nint main()\n{char str1[100];static int i,a[4];\ngets(str1);\ntongji(str1,a);\nfor(i=0;i<4;i++)\nprintf(\"%d \",a[i]);printf(\"\\n\");\nreturn 0;\n}'),(1036,'\n#define CHANGE(a,b,t) t=a;a=b;b=t;  \nmain()  \n{int c,d,s;  \nscanf(\"%d%d\",&c,&d);  \nCHANGE(c,d,s);  \nprintf(\"%d %d\",c,d);  \n}'),(1037,'\n#define Q(a,b) a%b  \nmain()  \n{int c,d,t;  \nscanf(\"%d%d\",&c,&d);  \nt=Q(c,d);  \nprintf(\"%d\\n\",t);  \n}'),(1038,'\n#include\"math.h\"  \n#define SSS(m,n,k) (m+n+k)/2  \n#define AQRT(m,n,k) sqrt(SSS(m,n,k)*(SSS(m,n,k)-m)*(SSS(m,n,k)-n)*(SSS(m,n,k)-k))  \nmain()  \n{float a,b,c,s,area;  \nscanf(\"%f%f%f\",&a,&b,&c);  \ns=SSS(a,b,c);  \narea=AQRT(a,b,c);  \nprintf(\"%.3f\\n\",area);  \n}'),(1039,'\n#define LEAPYEAR(y) !(y%4)&&((y%100)||!(y%400))  \nmain()  \n{int y;  \nscanf(\"%d\",&y);  \nif(LEAPYEAR(y)) printf(\"L\");  \nelse printf(\"N\");  \n}'),(1040,'\n#define PR1(x) printf(\"%6.2f\\n\",x)  \n#define PR2(x) printf(\"%6.2f %6.2f\\n\",x,x)  \n#define PR3(x) printf(\"%6.2f %6.2f %6.2f\\n\",x,x,x)  \nmain()  \n{float a;scanf(\"%f\",&a);  \nPR1(a);PR2(a);PR3(a);  \n}'),(1041,'\n#define MAX(a,b,c) (a>((b>c)? b:c))? a:((b>c)? b:c)  \nmain()  \n{float x,y,z,t;  \nscanf(\"%f%f%f\",&x,&y,&z);  \nt=MAX(x,y,z);  \nprintf(\"%.3f\\n\",t);  \nprintf(\"%.3f\",t);  \n}'),(1042,'\n#define CHANGE 1\nmain()\n{char str[80],c;int i=0;\ngets(str);\nwhile(str[i]!=\'\\0\')\n{\n#if CHANGE\nif(str[i]==90||str[i]==122) str[i]=str[i]-25;\nelse if(str[i]>=65&&str[i]<90||str[i]>=97&&str[i]<122) str[i]=str[i]+1;\n#endif\ni++;\n}\nputs(str);\n}'),(1043,'\nmain()  \n{ int a,b,c,*p1,*p2,*p3,t;  \nscanf(\"%d%d%d\",&a,&b,&c);  \np1=&a;p2=&b;p3=&c;  \nif(*p1>*p2)   \n{t=p1;p1=p2;p2=t;}  \nif(*p1>*p3)  \n{t=p1;p1=p3;p3=t;}  \nif(*p2>*p3)   \n{t=p2;p2=p3;p3=t;}  \nprintf(\"%d %d %d \",*p1,*p2,*p3);  \n}'),(1044,'\n#include<stdio.h>\n#include<string.h>\n\nvoid Swap(char **q1, char**q2);\n\nint main()\n{    \n    int i=0;\n    char *p1,*p2,*p3, str1[80],str2[80],str3[80];\n p1=str1; p2=str2; p3=str3;\n    gets(str1);\n	gets(str2);\n	gets(str3);\nif (strcmp(p1, p2)>0)\n        Swap(&p1, &p2);  \nif (strcmp(p1, p3)>0)\n        Swap(&p1, &p3);\nif (strcmp(p2, p3)>0)\n        Swap(&p2, &p3);\n printf(\"%s\\n%s\\n%s\\n\",p1,p2,p3);\n return(0);\n}\n\nvoid Swap(char **q1, char* *q2)\n{char *t;\n t= *q1;\n *q1 = *q2;\n *q2 = t;\n}'),(1045,'\n#include<stdio.h>\nint main()\n{\n	int array[11];\n	int n=10;\n	//scanf(\"%d\",&n);\n	int temp;\n	int i;\n	for(i=0;i<n;i++)\n		scanf(\"%d\",&array[i]);\n	temp=0;\n	for(i=0;i<n;i++)\n		if(array[temp] > array[i])\n			temp = i;\n		int t = array[temp];\n		array[temp] = array[0];\n		array[0] = t;\n	temp = 0;\n	for(i=0;i<n;i++)\n		if(array[temp] < array[i])\n			temp = i;\n		t = array[temp];\n		array[temp] = array[n-1];\n		array[n-1] = t;\n	for(i=0;i<n;i++)\n	{\n		\n		printf(\"%d \",array[i]);\n	}\n	printf(\"\\n\");\n	return 0;\n}'),(1046,'\n#include <stdio.h>\nvoid mv(int *p,int n,int m)\n{\n    int *h, t,i;\n    h=p+n-m-1; \n    for(;h>=p;h--)\n    {\n         for(i=0;i<m;i++) \n         {\n                     t=*(h+i);\n                     *(h+i)=*(h+i+1);\n                     *(h+i+1)=t;\n          }\n   }\n}\n\n\nint main()\n{\n    int a[80];\n     int m,i,n;\n	 scanf(\"%d\",&n);\n for(i=0;i<n;i++) \n	 scanf(\"%d\",&a[i]);\n   scanf(\"%d\",&m);\n  mv(a,n,m); \n for(i=0;i<n;i++) \n	 printf(\"%d \",a[i]);\n \n  return 0;\n}'),(1047,'\n#include <stdio.h> \n\nconst int M = 3; \n\nint main() \n{ \n    int n, s = 0; \n    scanf(\"%d\", &n); \n    for (int i = 2; i <= n; ++i) \n        s = (s+M)%i; \n    printf(\"%d\\n\", s+1); \n    return 0; \n}'),(1048,'\n#include <stdio.h>\n#include <string.h>\n#define N 80\nvoid fun(char a[N],int m)\n{char *p1,b[N];int i,l;\np1=a;i=1;l=0;\nwhile(i<m){i++;p1++;}\nwhile(*p1!=\'\\0\')\n{b[l]=*p1;\n p1++;\n l++;\n}\nb[l]=\'\\0\';\nputs(b);\n}\nint main()\n{char a[N];int m,n;\nscanf(\"%d\\n\",&n);\ngets(a);\nscanf(\"%d\",&m);\nfun(a,m);\nreturn 0;\n}'),(1049,'\nstruct  \n{int year;  \n int month;  \n int day;  \n}date;  \nmain()  \n{int days;\n//printf(\"Input  year,month,day:\");\nscanf(\"%d%d%d\",&date.year,&date.month,&date.day);\nswitch(date.month)  \n {case 1: days=date.day;    break;  \n case 2: days=date.day+31; break;  \n case 3: days=date.day+59; break;  \n case 4: days=date.day+90; break;  \n case 5: days=date.day+120;break;  \ncase 6: days=date.day+31; break;  \n   case 7: days=date.day+181; break;  \n   case 8: days=date.day+212; break;  \ncase 9: days=date.day+243; break;  \ncase 10: days=date.day+273; break;  \ncase 11: days=date.day+304; break;  \ncase 12: days=date.day+334; break;  \n}  \nif((date.year%4==0&&date.year%100!=0||date.year%400==0)&&date.month>=3)days+=1;  \nprintf(\"%d\",days);  \n}'),(1050,'\nint N=100;\nstruct student  \n{char num[6];  \n   char name[8];  \n   int score[3];  \n}stu[100]; \nvoid print(struct student st)  \n{	 int i,j;  \n     printf(\"%s,%s\",st.num,st.name);  \n     for(j=0;j<3;j++)  \n     printf(\",%d\",st.score[j]);  \n     printf(\"\\n\");  \n} \nmain()  \n{int i,j ;  \n   scanf (\"%d\",&N);\n   for(i=0;i<N;i++)  \n{\n	//printf(\"Input score of student %d:\\n\",i+1);  \n     //printf(\"no.:\");  \n     scanf(\"%s\",stu[i].num);  \n     ///printf(\"name:\");  \n     scanf(\"%s\",stu[i].name);  \n     for(j=0;j<3;j++)  \n     {//printf(\"score%d:\",j+1);  \n      scanf(\"%d\",&stu[i].score[j]);  \n}  \n \n print(stu[i]);  \n}  \n\n\n}'),(1051,'\n#include<stdio.h>\n#define N 100 \nstruct student\n{\nchar num[6];\nchar name[8];\nint score[4];\nint avr;\n}stu[N];\nint r;\n\nint main()\n{\n  int sum3=0,sum1=0,sum2=0,maxi;\n  int sum;\n  int max;\n  scanf(\"%d\",&r);\n  int i,j;\n  for(i=0;i<r;i++)\n  {\n   scanf(\"%s%s\",stu[i].num,stu[i].name);\n   for(j=0;j<3;j++)\n   {\n    scanf(\"%d\",&stu[i].score[j]);\n   }\n\n}\n\nmax=0;\nmaxi=0;\n for(i=0;i<r;i++)\n {\n  sum=0;\n  sum1+=stu[i].score[0];\n  sum2+=stu[i].score[1];\n  sum3+=stu[i].score[2];\n  for(j=0;j<3;j++)\n    sum+=stu[i].score[j];\n  stu[i].avr=sum/3;\n  \n  if(sum>max)\n  {\n  max=sum;\n  maxi=i;\n  }\n\n }\nprintf(\"%d %d %d\",sum1/r,sum2/r,sum3/r);\nputchar(\'\\n\');\n\nprintf(\"%s %s %d %d %d\",stu[maxi].num,stu[maxi].name,stu[maxi].score[0],stu[maxi].score[1],stu[maxi].score[2]);\n\n\nreturn 0;\n}'),(1052,'\nimport java.util.Scanner;\nimport java.io.*;\npublic class Main {\n	public static Scanner cin=new Scanner(System.in);\n	public static void main(String[] args){\n		int n=cin.nextInt();\n		int m=cin.nextInt();\n		int num[][]=new int[m+n][2];\n		int tmp[]={0,0};\n		for(int i=0;i<m+n;i++)\n		{\n			for(int j=0;j<2;j++)\n			{\n				num[i][j]=cin.nextInt();\n			}\n		}\n		for(int i=0;i<m+n-1;i++)\n		{\n			for(int j=i+1;j<m+n;j++)\n			{\n				if(num[j][0]<num[i][0])\n				{\n					tmp=num[i];\n					num[i]=num[j];\n					num[j]=tmp;\n				}\n			}\n		}\n		for(int i=0;i<m+n;i++)\n		{\n			System.out.println(num[i][0]+\" \"+num[i][1]);\n		}\n		\n		\n	}\n	\n}'),(1053,'#include<iostream>\n#include<stack>\n#include<string>\nusing namespace std;\n\nint main()\n{\n	int n=0,m;\n	string s;\n	stack<string> S0,S1,S2;\n	while(cin>>m>>s)\n	{\n		n++;\n		if(!m)\n			S0.push(s);\n		else if(m==1)\n			S1.push(s);\n		else\n			S2.push(s);\n	}\n	for(m=0;m<10;m++)\n	{\n		if(S0.empty())\n			cout<<0<<\' \';\n		else\n		{\n			cout<<S0.top()<<\' \';\n			S0.pop();\n		}\n		if(S1.empty())\n			cout<<0<<\' \';\n		else\n		{\n			cout<<S1.top()<<\' \';\n			S1.pop();\n		}\n		if(S2.empty())\n			cout<<0<<endl;\n		else\n		{\n			cout<<S2.top()<<endl;\n			S2.pop();\n		}\n	}\n	while(!S0.empty())\n	{\n		cout<<S0.top()<<\' \';\n		S0.pop();\n	}\n	while(!S1.empty())\n	{\n		cout<<S1.top()<<\' \';\n		S1.pop();\n	}\n	while(!S2.empty())\n	{\n		cout<<S2.top()<<endl;\n		S2.pop();\n	}\n	return 0;\n}'),(1054,'#include<stdio.h>\n#include<string.h>\n\nchar r[1000];\n\nvoid bc(char n[],int s,int e)\n{\n	int i,flag,k,j,a[1000],b[1000];\n	for(i=0;i<strlen(n);i++)\n		a[i]=n[i]-48;\n	k=0;\n	while(1)\n	{\n		for(i=0;i<strlen(n);i++)\n		{\n			if(a[i]!=0&&i<strlen(n)-1)\n			{\n				a[i+1]+=(a[i]%e)*s;\n				a[i]/=e;\n			}\n			if(i==strlen(n)-1)\n			{\n				b[k++]=a[i]%e;\n				a[i]/=e;\n			}\n		}\n		flag=0;\n		for(i=0;i<strlen(n);i++)\n			if(a[i]!=0)\n				flag=1;\n		if(!flag)\n			break;\n	}\n	for(j=0,i=k-1;i>=0;i--)\n		r[j++]=b[i]+48;\n	r[j]=\'\\0\';\n}\n\nint main()\n{\n	char n[1000];\n	while(scanf(\"%s\",n)!=EOF)\n	{\n		bc(n,10,2);\n		puts(r);\n	}\n	return 0;\n}'),(1055,'#include<stdio.h>\n\nint main()\n{\n	int n,f,k=1;\n	scanf(\"%d\",&f);\n	while(scanf(\"%d\",&n)!=EOF)\n	{\n		if(n<f)\n		{\n			k=0;\n			break;\n		}\n		f=n;\n	}\n	puts(k?\"YES\":\"NO\");\n	return 0;\n} '),(1056,'#include<iostream>\n#include<string>\n#include<cstdlib>\nusing namespace std;\n\nconst int INT_ONLY=1;\nconst int SMALL_ONLY=2;\n\nstring roundString(string s)\n{\n	double d=atof(s.c_str());\n	int dec,sign;\n	s=fcvt(d,2,&dec,&sign);\n	return s;\n}\n\nstring formatChinese(int flag,string s)\n{\n	int sLength=s.length();\n	string bigLetter[]={\"零\",\"壹\",\"贰\",\"叁\",\"肆\",\"伍\",\"陆\",\"柒\",\"捌\",\"玖\"};\n	string unit[]={\"元\",\"拾\",\"佰\",\"仟\",\"万\",\"拾\",\"佰\",\"仟\",\"亿\",\"拾\",\"佰\",\"仟\",\"万\"};\n	string small[]={\"分\",\"角\"};\n	string newS=\"\";\n	for(int i=0;i<sLength;i++)\n	{\n		if(flag==INT_ONLY)\n			newS=newS+bigLetter[s.at(i)-48]+unit[sLength-i-1];\n		else if(flag==SMALL_ONLY)\n			newS=newS+bigLetter[s.at(i)-48]+small[sLength-i-1];\n	}\n	return newS;\n}\n\nstring splitNum(string s)\n{\n	if(\"\"==s)\n		return \"\";\n	string intOnly=s.substr(0,s.size()-2);\n	string intPart=formatChinese(1,intOnly);\n	string smallOnly=s.substr(s.size()-2,s.size());\n	string smallPart=formatChinese(2,smallOnly);\n	string newS=intPart+smallPart;\n	return newS;\n}\n\nstring replaceAll(string src,string regex,string replacement)\n{\n	int length=regex.length();\n	while(src.find(regex)<src.length())\n		src.replace(src.find(regex),length,replacement);\n	return src;\n}\n\nstring cleanZero(string s)\n{\n	if(\"\"==s)\n		return \"\";\n	string regex1[]={\"零仟\",\"零佰\",\"零拾\"};\n	string regex2[]={\"零亿\",\"零万\",\"零元\"};\n	string regex3[]={\"亿\",\"万\",\"元\"};\n	string regex4[]={\"零角\",\"零分\"};\n	for(int i=0;i<3;i++)\n		s=replaceAll(s,regex1[i],\"零\");\n	for(int i=0;i<3;i++)\n	{\n		s=replaceAll(s,\"零零零\",\"零\");\n		s=replaceAll(s,\"零零\",\"零\");\n		s=replaceAll(s,regex2[i],regex3[i]);\n	}\n	for(int i=0;i<2;i++)\n		s=replaceAll(s,regex4[i],\"\");\n	s=replaceAll(s,\"亿万\",\"亿\");\n	return s;\n}\n\nint main()\n{\n	string s;\n	int i,j,l,flag;\n	while(cin>>s)\n	{\n		if(s==\"0\"||s==\"0.0\"||s==\"0.00\")\n		{\n			cout<<\"零元整\"<<endl;\n			continue;\n		}\n		if(s==\"10\"||s==\"10.0\"||s==\"10.00\")\n		{\n			cout<<\"拾元整\"<<endl;\n			continue;\n		}\n		l=s.length();\n		for(i=0;i<l;i++)\n			if(s[i]==\'.\')\n			{\n				for(flag=1,j=i+1;s[j]!=\'\\0\';j++)\n					if(s[j]!=\'0\')\n					{\n						flag=0;\n						break;\n					}\n				if(!flag)\n					break;\n			}\n		s=roundString(s);\n		s=splitNum(s);\n		s=cleanZero(s);\n		if(i<l)\n			cout<<s<<endl;\n		else\n			cout<<s<<\"整\"<<endl;\n	}\n	return 0;\n}'),(1057,'#include<stdio.h>\n\nint main()\n{\n	int a,b,c,d;\n	scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n	printf(\"%d %d\\n\",a+c,b+d);\n	return 0;\n} '),(1058,'#include<stdio.h>\n\nint main()\n{\n	int a,b,c,d;\n	scanf(\"%d%d%d%d\",&a,&b,&c,&d);\n	printf(\"%d %d\\n\",a*c-b*d,a*d+b*c);\n	return 0;\n}'),(1059,'#include<cstdio>\n#include<algorithm>\nusing namespace std;\n\nstruct P\n{\n	int c,in;\n}a[100],b[100];\n\nbool cmp(P a,P b)\n{\n	return a.in>b.in;\n}\n\nint main()\n{\n	int m,n,i,j;\n	scanf(\"%d%d\",&m,&n);\n	for(i=0;i<m;i++)\n		scanf(\"%d%d\",&a[i].c,&a[i].in);\n	for(i=0;i<n;i++)\n		scanf(\"%d%d\",&b[i].c,&b[i].in);\n	sort(a,a+m,cmp);\n	sort(b,b+n,cmp);\n	i=j=0;\n	while(i<m||j<n)\n	{\n		if(a[i].in==b[j].in)\n		{\n			if(a[i].c+b[j].c)\n				printf(\"%d %d\\n\",a[i].c+b[j].c,a[i].in);\n			i++;\n			j++;\n		}\n		else if(a[i].in<b[j].in)\n		{\n			if(b[j].c)\n				printf(\"%d %d\\n\",b[j].c,b[j].in);\n			j++;\n		}\n		else\n		{\n			if(a[i].c)\n				printf(\"%d %d\\n\",a[i].c,a[i].in);\n			i++;\n		}\n	}\n	return 0;\n} '),(1060,'public class Main{\r\n	public static void main(String args[]){\r\n		System.out.println(\"**************************\\n         Very    Good!\\n**************************\");\r\n	}\r\n}'),(1061,'public class Main{\r\n	public static void main(String args[]){\r\n		System.out.println(\"**************************\\n         Very    Good!\\n**************************\");\r\n	}\r\n}'),(1062,'#include <stdio.h>\n#include <math.h>\n#include <queue>\n#include <memory.h>\nusing namespace std;\nstruct point\n{\n	int x,y,z;\n};\nstruct type\n{\n	int j;\n	double len;\n	friend bool operator <(type a,type b)\n	{\n		return a.len>b.len;\n	}\n};\ntype t,tt;\ninline int sqr(int num)\n{\n	return num*num;\n}\npoint p[31];\ndouble dis[31][31];\nbool visit[31];\nint main()\n{\n	int repeat,n,i,j,cur;\n	double sum;\n\n	scanf(\"%d\",&repeat);\n	while(repeat--)\n	{\n		scanf(\"%d\",&n);\n		for(i=0;i<n;i++)\n		{\n			scanf(\"%d%d%d\",&p[i].x,&p[i].y,&p[i].z);\n			for(j=0;j<n;j++)\n				dis[i][j]=dis[j][i]=sqrt( sqr(p[i].x-p[j].x)+sqr(p[i].y-p[j].y)+sqr(p[i].z-p[j].z));\n		}\n		sum=0;\n		cur=0;\n		memset(visit,false,sizeof(visit));\n		priority_queue<type> q;\n		for(i=0;i<n-1;i++)\n		{\n			visit[cur]=true;\n			for(j=0;j<n;j++)\n				if( !visit[j])\n				{\n					t.j=j;\n					t.len=dis[cur][j];\n					q.push(t);\n				}\n			while( !q.empty())\n			{\n				t=q.top();\n				q.pop();\n				if( !visit[t.j] ) break;\n			}\n			sum+=t.len;\n			cur=t.j;\n		}\n		printf(\"%.2f\\n\",sum);\n	}\n	return 0;\n}'),(1063,'#include<stdio.h>\n#include<string.h>\nint main()\n\n{\n\n       int n,k;\n\n       scanf(\"%d\",&n);\n\n       for(k=0;k<n;k++)\n\n       {\n\n              char t[2000];\n              int a,b,i,j,l;\n              int x,y;\n              char map[32][33]={0};\n              scanf(\"%d %d\", &a,&b);\n              scanf(\"%s\", &t);\n              l=strlen(t)-1;\n              x=31-b;\n              y=a;\n              for(i=0;i<l;i++)\n              {\n                     if(t[i]==\'E\')\n                     {\n                            map[x+1][y+1]=\'X\';\n                            y++;\n                     }\n                     else if(t[i]==\'N\')\n                     {\n                            map[x][y+1]=\'X\';\n                            x--;\n                     }\n                     else if(t[i]==\'W\')\n                     {\n                            map[x][y]=\'X\';\n                            y--;\n                     }\n                     else if(t[i]==\'S\')\n                     {\n                            map[x+1][y]=\'X\';\n                            x++;\n                     }\n              }\n              printf(\"Bitmap #%d\\n\",k+1);\n              for(i=0;i<32;i++)\n              {\n                     for(j=1;j<33;j++)\n                     {\n                            if(map[i][j]!=\'X\')\n                                   map[i][j]=\'.\';\n                            printf(\"%c\",map[i][j]);\n                     }\n                     printf(\"\\n\");\n              }\n              printf(\"\\n\");\n       }\n       return 0;\n}\n'),(1064,'#include<stdio.h>\n#include<string.h>\nint main()\n{\n    int n;\n    int total;\n    int a=0,b=0;\n    scanf(\"%d\",&n);\n    getchar();\n    while(n>0)\n    {\n        scanf(\"%d\",&total);\n        if(total%2!=0)\n        {\n            a=0;b=0;\n        }\n        else if(total%4!=0)\n        {\n            a=(total-2)/4+1;b=total/2;\n        }\n        else\n        {\n            a=total/4;b=total/2;\n        }\n        printf(\"%d %d\\n\",a,b);\n        n--;\n    }\n    return 0;\n}\n'),(1065,'#include <stdio.h>\n#include <math.h>\nchar map[8][9];\nint ok(int i,int j,char ch)\n{\n	return i>=0&&j>=0&&i<8&&j<8&&ch==map[i][j];\n}\nint ok2(int i,int j)\n{\n		return i>=0&&j>=0&&i<8&&j<8;\n}\nint can(int si,int sj,int ei,int ej)\n{\n	return ok2(si,sj)&&ok2(ei,ej)&&( (si==ei&&fabs(sj-ej)==1) || (sj==ej&&fabs(si-ei)==1));\n}\nint amount(int si,int sj)\n{\n	int i,count=1;\n\n	for(i=1;;i++)\n		if( ok(si-i,sj,map[si][sj]) ) count++;\n		else break;\n	for(i=1;;i++)\n		if( ok(si+i,sj,map[si][sj]) ) count++;\n		else break;\n	if(count>2) return 1;\n	for(i=count=1;;i++)\n		if( ok(si,sj-i,map[si][sj]) ) count++;\n		else break;\n	for(i=1;;i++)\n		if( ok(si,sj+i,map[si][sj]) ) count++;\n		else break;\n	if(count>2) return 1;\n	else return 0;\n}\nint main()\n{\n	int i,si,sj,ei,ej;\n	char t;\n\n	while(scanf(\"%s\",map[0])!=EOF)\n	{\n		for(i=1;i<8;i++)\n			scanf(\"%s\",map[i]);\n		scanf(\"%d%d%d%d\",&si,&sj,&ei,&ej);\n		si--;sj--;ei--;ej--;\n		t=map[si][sj];\n		map[si][sj]=map[ei][ej];\n		map[ei][ej]=t;\n		if( can(si,sj,ei,ej) && (amount(si,sj) || amount(ei,ej))) puts(\"Ok!\");\n		else puts(\"Illegal move!\");\n	}\n	return 0;\n}'),(1066,'#include <stdio.h>\n#include <vector>\n#include <string>\nusing namespace std;\n\nint main()\n{\n	int i;\n	char s[101],op[3],s2[101];\n	\n	while(scanf(\"%s\",s),s[0]!=\'.\')\n	{\n		scanf(\"%s%s\",op,s2);\n		vector<string> m;\n		vector<string>::iterator it;\n		string t;\n		for(i=0;s[i];i++)\n		{\n			if(s[i]!=\'[\')\n			{\n				if(s[i]==\',\'||s[i]==\']\')\n				{\n					if( t!=\"\" ) m.push_back(t);\n					t=\"\";\n				}\n				else t+=s[i];\n			}\n			\n		}\n		for(i=0;s2[i];i++)\n		{\n			if(s2[i]!=\'[\')\n			{\n				if(s2[i]==\',\'||s2[i]==\']\')\n				{\n					if(op[0]==\'+\')\n					{\n						if( t!=\"\" ) m.push_back(t);\n					}\n					else\n					{\n						for(it=m.begin();it!=m.end();it++)\n						{\n							if( (*it)==t )\n							{\n								m.erase(it);\n								break;\n							}\n						}\n					}\n					t=\"\";\n				}\n				else t+=s2[i];\n			}\n		}\n		putchar(\'[\');\n		for(i=0;i<m.size();i++)\n		{\n			printf(\"%s%s\",m[i].c_str(),i==m.size()-1?\"\":\",\");\n		}\n		putchar(\']\');\n		putchar(10);\n	}\n	return 0;\n}'),(1067,'#include<stdio.h>\n#include<string.h>\n#include<stdlib.h>\n#include<math.h>\n\nint mod10(int x)\n{\n	int a=1,i;\n	for(i=0;i<x;i++)\n		a=(a*10)%101;\n	return a;\n}\n\nint bit(char c)\n{\n	if(c>\'C\')\n	{\n		if(c>\'I\')\n			return 3;\n		else\n			return 2;\n	}\n	else\n		return 1;\n}\n\nint main()\n{\n	int i,j,k,l,len,n,t,sum;\n	int shu[1000];\n	char s[100];\n	scanf(\"%d\",&t);\n	while(t--)\n	{\n		n=0;sum=0;\n		scanf(\"%s\",s);\n		len=strlen(s);\n		for(i=0;i<len;i++)\n		{\n			if(s[i]>=\'a\')\n				s[i]-=32;\n		}\n		for(i=0,j=0;i<len;i++)\n		{\n			n=(s[i]-\'A\'+1)*(s[i]-\'A\'+1);\n			k=bit(s[i]);\n			j+=k;\n			for(l=1;l<=k;l++)\n			{\n				shu[j-l]=n%10;\n				n/=10;\n			}\n		}\n		for(i=j-1,k=0;i>=0;i--,k++)\n			sum+=(shu[i]*mod10(k))%101;\n		printf(\"%d\\n\",sum%101);\n	}\n	return 0;\n}'),(1068,'\n    #include<stdio.h>\n     int n,num[1000001],t[10];\n     int main()\n     {\n         int a;\n         scanf(\"%d\",&a);\n          int i;\n          while(a>0)\n          {\n              scanf(\"%d\",&n);\n               num[1]=1;\n               num[2]=2;\n               for (i=3;i<=n;i++)\n               {\n                    if(i%2==1)  num[i]=num[i-1];\n                    if(i%2==0)  num[i]=(num[i-1]+num[i/2])%1000000000;\n                }\n               printf (\"%d\",num[n]);\n                printf(\"\\n\");\n                a--;\n          }\n          return 0;\n    }\n'),(1069,'#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing namespace std;\nchar map[71][71];\nstring dp[71][71],mx;\nint cmp(string s1,string s2)\n{\n	int i;\n\n	if( s1.length()>s2.length()) return 1;\n	else if( s2.length()>s1.length()) return -1;\n	else \n	{\n		for(i=0;s1[i];i++)\n		{\n			if( s1[i]>s2[i] ) return 1;\n			else if(s1[i]<s2[i]) return -1;\n		}\n		return 0;\n	}\n}\nint main()\n{\n	int w,h,i,j;\n\n	while(scanf(\"%d%d\",&w,&h),w+h)\n	{\n		for(i=0;i<h;i++)\n		{\n			scanf(\"%s\",map[i]);\n			for(j=0;j<w;j++)\n				dp[i][j]=\"\";\n		}\n		mx=\"\";\n		for(i=0;i<h;i++)\n		{\n			for(j=0;j<w;j++)\n			{\n				if(map[i][j]>=\'0\'&&map[i][j]<=\'9\')\n				{\n					if(map[i][j]!=\'0\') dp[i][j]+=map[i][j];\n					if( i>0 && cmp(dp[i-1][j]+map[i][j],dp[i][j])>0) dp[i][j]=dp[i-1][j]+map[i][j];\n					if(j>0 && cmp(dp[i][j-1]+map[i][j],dp[i][j])>0) dp[i][j]=dp[i][j-1]+map[i][j];\n					if(dp[i][j]==\"0\") dp[i][j]=\"\";\n				}\n				if( cmp(dp[i][j],mx)>0 ) mx=dp[i][j];\n			}\n		}\n		for(i=0;i<mx.length();i++)\n			putchar(mx[i]);\n		putchar(10);\n	}\n	return 0;\n}'),(1070,'#include <stdio.h>\n#include <stdlib.h>\n\nint cmp(const void *a,const void *b)\n{\n	return *(int *)a - *(int *)b;\n}\n\nint main()\n{\n	int n,m,shu,sum = 0,zheng[10],fu[10],i = 0,j = 0,zflag = 0,fflag = 0,k,zero = 0;\n	scanf(\"%d\",&n);\n	while(n--)\n	{\n	    scanf(\"%d\",&m);\n	    while(m--)\n		{\n			scanf(\"%d\",&shu);\n			if(shu > 0)\n			{\n				zheng[i++] = shu;\n				zflag = 1;\n			}\n			if(shu < 0)\n			{\n				fu[j++] = shu;\n				fflag = 1;\n			}\n			if(shu == 0)\n			zero = 1;\n		}\n		if(zflag)\n		qsort(zheng,i,sizeof(int),cmp);\n		if(fflag)\n		qsort(fu,j,sizeof(int),cmp);\n		if(zflag)\n		{\n			for(k = 0;k < i;k++)\n			sum += zheng[k];\n			if(fflag)\n			{\n                if((sum - zheng[0]) > (sum + fu[j-1]))\n				printf(\"%d\\n\",sum - zheng[0]);\n				else\n				printf(\"%d\\n\",sum + fu[j-1]);\n			}\n			else\n			printf(\"%d\\n\",sum - zheng[0]);\n		}\n		else\n		{\n			if(zero)\n			printf(\"%d\\n\",fu[j-1] + 0);\n			else\n			printf(\"%d\\n\",fu[j-1] + fu[j-2]);\n		}\n		i = j = zflag = fflag = 0;\n		sum = 0;\n		zero = 0;\n	}\n	return 0;\n}'),(1071,'#include <stdio.h>\n#define MAX 22\ntypedef struct node\n{\n     double matrix[MAX][MAX];\n}Matrix;\nMatrix unit,init,result;\nint t,n,k;\ndouble data[MAX];\nvoid Init()\n{\n    int i,j;\n    scanf(\"%d\",&n);\n    for(i=1;i<=n;i++)   //输入初始值\n        scanf(\"%lf\",&data[i]);\n    for(i=1;i<=n;i++)\n        for(j=1;j<=n;j++)\n        {\n            init.matrix[i][j]=0;\n            unit.matrix[i][j]=(i==j);  //单位矩阵\n        }\n    int num;\n    double p;\n    for(i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&num);\n        if(num==0) //否则除0错误\n        {\n            init.matrix[i][i]=1.0;   //因为没有分东西给别人,故东西全部给自己,第一错误\n            continue;\n        }\n        p=1.0/num;\n        while(num--)\n        {\n            scanf(\"%d\",&j);\n            init.matrix[i][j]=p;\n        }\n    }\n    scanf(\"%d\",&k);   //经过k秒\n}\nMatrix Mul(Matrix a,Matrix b)  //矩阵乘法\n{\n    Matrix c;\n    int i,j,p;\n    for(i=1;i<=n;i++)\n        for(j=1;j<=n;j++)\n        {\n            c.matrix[i][j]=0.0;\n            for(p=1;p<=n;p++)\n            {\n                c.matrix[i][j]+=a.matrix[i][p]*b.matrix[p][j];\n            }\n        }\n    return c;\n}\nMatrix Cal(int exp)  //矩阵幂\n{\n    Matrix p,q,res;\n    p=unit;  //单位矩阵\n    q=init;  //初始矩阵\n    while(exp!=1)\n    {\n        if(exp&1)//幂是奇数\n        {\n            exp--;\n            p=Mul(p,q);  //这里忘记写乘,导致很多次错误,要细心\n        }\n        else\n        {\n            exp>>=1;\n            q=Mul(q,q);\n        }\n    }\n    res=Mul(p,q);\n    return res;\n}\nint main()\n{\n    int i,j;\n    double r;\n    scanf(\"%d\",&t);\n    while(t--)\n    {\n        Init();\n        result=Cal(k);\n        for(i=1;i<=n;i++)\n        {\n            r=0;\n            for(j=1;j<=n;j++)\n                r+=result.matrix[j][i]*data[j];\n            if((i-1))  //格式控制\n                printf(\" \");\n            printf(\"%0.2lf\",r);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n'),(1072,'#include <stdio.h>\r\nvoid main()\r\n{\r\n	printf(\"Hello world\\n\");\r\n}'),(1073,'#include<stdio.h>\r\n\r\nint max(int a,int b,int c){\r\n	return a >= b ? (a >= c ? a : c)  : (b >= c ? b : c) ;\r\n}\r\nint main(){\r\n\r\n	int a,b,c;\r\n	scanf(\"%d%d%d\",&a,&b,&c);\r\n	printf(\"%d\",max(a,b,c));\r\n	\r\n	return 0;\r\n}'),(1074,'#include<stdio.h>\r\n\r\nint max(int a,int b,int c){\r\n	return a >= b ? (a >= c ? a : c)  : (b >= c ? b : c) ;\r\n}\r\nint main(){\r\n\r\n	int a,b,c;\r\n	scanf(\"%d%d%d\",&a,&b,&c);\r\n	printf(\"%d\",max(a,b,c));\r\n	\r\n	return 0;\r\n}'),(1075,'#include<stdio.h>\r\n\r\nint max(int a,int b,int c){\r\n	return a >= b ? (a >= c ? a : c)  : (b >= c ? b : c) ;\r\n}\r\nint main(){\r\n\r\n	int a,b,c;\r\n	scanf(\"%d%d%d\",&a,&b,&c);\r\n	printf(\"%d\",max(a,b,c));\r\n	\r\n	return 0;\r\n}'),(1076,'#include<stdio.h>\r\npublic void f(int n){\r\nf(n+1);\r\nprintf(\"%d\",&n);\r\n}\r\n\r\nint main(){\r\nf(1);\r\n}');
/*!40000 ALTER TABLE `source_code_user` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `topic`
--

DROP TABLE IF EXISTS `topic`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `topic` (
  `tid` int(11) NOT NULL AUTO_INCREMENT,
  `title` varbinary(60) NOT NULL,
  `status` int(2) NOT NULL DEFAULT '0',
  `top_level` int(2) NOT NULL DEFAULT '0',
  `cid` int(11) DEFAULT NULL,
  `pid` int(11) NOT NULL,
  `author_id` varchar(48) NOT NULL,
  `time` varchar(60) not null ,
<<<<<<< HEAD
<<<<<<< HEAD
  `delete_flag` int(11) not null default '0',
=======
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
  PRIMARY KEY (`tid`),
  KEY `cid` (`cid`,`pid`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `topic`
--

LOCK TABLES `topic` WRITE;
/*!40000 ALTER TABLE `topic` DISABLE KEYS */;
<<<<<<< HEAD
<<<<<<< HEAD
INSERT INTO topic (title, status, top_level, cid, pid, author_id, time) VALUES (1,'测试',0,0,NULL,1061,'yhy5058');
=======
INSERT INTO `topic` VALUES (1,'测试',0,0,NULL,1061,'yhy5058');
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
INSERT INTO `topic` VALUES (1,'测试',0,0,NULL,1061,'yhy5058');
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
/*!40000 ALTER TABLE `topic` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `users`
--

DROP TABLE IF EXISTS `users`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `users` (
  `user_id` varchar(48) NOT NULL DEFAULT '',
  `email` varchar(100) DEFAULT NULL,
  `submit` int(11) DEFAULT '0',
  `solved` int(11) DEFAULT '0',
  `defunct` char(1) NOT NULL DEFAULT 'N',
  `ip` varchar(20) NOT NULL DEFAULT '',
  `accesstime` datetime DEFAULT NULL,
  `volume` int(11) NOT NULL DEFAULT '1',
  `language` int(11) NOT NULL DEFAULT '1',
  `password` varchar(32) DEFAULT NULL,
  `reg_time` datetime DEFAULT NULL,
  `nick` varchar(100) NOT NULL DEFAULT '',
  `school` varchar(100) NOT NULL DEFAULT '',
  /*用户等级 1：学生 2：教师 3：学院领导 4:管理员*/
  `level` INT(5) not null DEFAULT '1',
<<<<<<< HEAD
<<<<<<< HEAD
  `delete_flag` int(11) not null default '0',
=======
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
  PRIMARY KEY (`user_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `users`
--

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;
<<<<<<< HEAD
<<<<<<< HEAD
INSERT INTO users (user_id, email, submit, solved, defunct, ip, accesstime, volume, language, password, reg_time, nick, school, level) VALUES ('14101118','yanghy@youyicloud.com',72,67,'N','59.67.0.184','2017-04-30 02:49:57',1,1,'w1AJ+Fuba+TpvTQyddZST53qzERlMDA5','2017-04-30 02:49:57','admin','天科大',4),('yhy5058','',0,0,'N','59.67.0.184','2017-04-30 04:14:28',1,1,'rG9hnT74p/vOa5GE9Glf46qP4kI3OGE0','2017-04-30 04:14:28','yhy5058','',0),('team01','your_own_email@internet',0,0,'N','59.67.0.184','2017-04-30 04:24:07',1,1,'QMOQU1pFy7o3c/yFncpwk5+rqiYwODM4','2017-04-30 04:24:07','','your_own_school',0);
=======
INSERT INTO `users` VALUES ('14101118','yanghy@youyicloud.com',72,67,'N','59.67.0.184','2017-04-30 02:49:57',1,1,'w1AJ+Fuba+TpvTQyddZST53qzERlMDA5','2017-04-30 02:49:57','admin','天科大',4),('yhy5058','',0,0,'N','59.67.0.184','2017-04-30 04:14:28',1,1,'rG9hnT74p/vOa5GE9Glf46qP4kI3OGE0','2017-04-30 04:14:28','yhy5058','',0),('team01','your_own_email@internet',0,0,'N','59.67.0.184','2017-04-30 04:24:07',1,1,'QMOQU1pFy7o3c/yFncpwk5+rqiYwODM4','2017-04-30 04:24:07','','your_own_school',0);
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
INSERT INTO `users` VALUES ('14101118','yanghy@youyicloud.com',72,67,'N','59.67.0.184','2017-04-30 02:49:57',1,1,'w1AJ+Fuba+TpvTQyddZST53qzERlMDA5','2017-04-30 02:49:57','admin','天科大',4),('yhy5058','',0,0,'N','59.67.0.184','2017-04-30 04:14:28',1,1,'rG9hnT74p/vOa5GE9Glf46qP4kI3OGE0','2017-04-30 04:14:28','yhy5058','',0),('team01','your_own_email@internet',0,0,'N','59.67.0.184','2017-04-30 04:24:07',1,1,'QMOQU1pFy7o3c/yFncpwk5+rqiYwODM4','2017-04-30 04:24:07','','your_own_school',0);
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

/*作业*/
DROP TABLE IF EXISTS `homework`;
CREATE TABLE `homework` (
  `homework_id` BIGINT(20) NOT NULL ,
  `homework_creator_id` varchar(48) NOT NULL DEFAULT '',
  `homework_create_time` varchar(50) not null,
  `homework_end_time` varchar(50) not null,
  `homework_score` DECIMAL(3,2) UNSIGNED NOT NULL DEFAULT '0.00',
  `homework_problem` TEXT NOT NULL ,
<<<<<<< HEAD
<<<<<<< HEAD
  `delete_flag` int(11) not null default '0',
=======
>>>>>>> c46d0824de76fd787bbb6dee4e96a3670765b74d
=======
>>>>>>> d5ce09997160eb49af0f7686681af87d19b4e61b
  PRIMARY KEY (`homework_id`)
)ENGINE =InnoDB DEFAULT CHARSET =utf8;

INSERT INTO homework (homework_id, homework_creator_id, homework_create_time, homework_end_time, homework_score, homework_problem)
VALUES (1001,1002,'1777333447','1777333447',0,'1001 1002');



drop table if EXISTS `user_course`;
create table `user_course`(
  `id` int(10) not null AUTO_INCREMENT,
  `user_id` varchar(48) not null default '',
  `teacher_id` varchar(48) not null default '',
  `course_id` int(10) not null,
  PRIMARY KEY (`id`)
)ENGINE =InnoDB DEFAULT CHARSET =utf8 AUTO_INCREMENT=2;


/*用户-作业关联表*/
DROP TABLE IF EXISTS `user_homework`;
CREATE TABLE `user_homework` (
  `id` int(10) not null AUTO_INCREMENT,
  `user_id` varchar(48) NOT NULL DEFAULT '' ,
  `homework_id` BIGINT(20) NOT NULL,
  PRIMARY KEY (`id`)
)ENGINE =InnoDB DEFAULT CHARSET =utf8 AUTO_INCREMENT=2;

INSERT INTO user_homework (user_id, homework_id) VALUES (1001,1001);




/*用户-竞赛关联表*/
DROP TABLE IF EXISTS `user_contest`;
CREATE TABLE `user_contest` (
  `id` int(10) not null AUTO_INCREMENT,
  `user_id` varchar(48) NOT NULL DEFAULT '' ,
  `contest_id` BIGINT(20) NOT NULL,
  PRIMARY KEY (`id`)
)ENGINE =InnoDB DEFAULT CHARSET =utf8 AUTO_INCREMENT=2;

INSERT INTO user_contest (user_id, contest_id) VALUES (1001,1001);

